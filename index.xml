<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wesigj's blog</title><link>https://wesigj.github.io/</link><description>Recent content on Wesigj's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 08 Sep 2024 00:08:00 +0800</lastBuildDate><atom:link href="https://wesigj.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>design pattern abstract_factory</title><link>https://wesigj.github.io/p/design-pattern-abstract_factory/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-abstract_factory/</guid><description>&lt;h1 id="设计模式-抽象工厂abstract_factory">设计模式-抽象工厂abstract_factory
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>抽象工厂模式（Abstract Factory Pattern）是一种创建型设计模式&lt;/li>
&lt;li>用于创建一系列相关或依赖对象的接口，而无需指定它们具体的类&lt;/li>
&lt;li>具体工厂生产具体产品
&lt;ul>
&lt;li>具体工厂继承抽象工厂&lt;/li>
&lt;li>具体产品继承抽象产品&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1抽象工厂abstract_factory">1.抽象工厂abstract_factory
&lt;/h2>&lt;p>抽象工厂模式（Abstract Factory Pattern）是一种创建型设计模式，用于创建一系列相关或依赖对象的接口，而无需指定它们具体的类。这种模式允许系统独立于具体类的变化，从而提高了系统的灵活性和可扩展性。&lt;/p>
&lt;p>在C++中实现抽象工厂模式通常涉及以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义产品接口&lt;/strong>：为不同的产品族定义一个或多个抽象接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建具体产品类&lt;/strong>：为每个产品接口实现具体类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定义抽象工厂接口&lt;/strong>：定义一个抽象工厂接口，声明创建各种产品的接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建具体工厂类&lt;/strong>：为每个具体的产品族实现一个具体工厂类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用工厂方法&lt;/strong>：客户端代码使用抽象工厂接口来创建产品，而不需要知道具体工厂和产品的细节。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>下面是一个简单的C++示例，展示了如何实现抽象工厂模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 产品接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">makeSound&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体产品
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Dog&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">makeSound&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Woof!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Cat&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">makeSound&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Meow!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象工厂接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">AnimalFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createDog&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createCat&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">AnimalFactory&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体工厂
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">DogFactory&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">AnimalFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createDog&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Dog&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createCat&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// DogFactory cannot create a Cat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CatFactory&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">AnimalFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createDog&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// CatFactory cannot create a Dog
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createCat&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Cat&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 客户端代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AnimalFactory&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">factory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">factory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DogFactory&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">dog&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">createDog&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dog&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">makeSound&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">factory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CatFactory&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">createCat&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cat&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">makeSound&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>Animal&lt;/code> 是一个产品接口，&lt;code>Dog&lt;/code> 和 &lt;code>Cat&lt;/code> 是具体产品。&lt;code>AnimalFactory&lt;/code> 是抽象工厂接口，&lt;code>DogFactory&lt;/code> 和 &lt;code>CatFactory&lt;/code> 是具体工厂，它们分别实现了创建 &lt;code>Dog&lt;/code> 和 &lt;code>Cat&lt;/code> 的方法。客户端代码通过工厂接口来创建对象，而不需要知道具体是如何创建的。这样，如果需要添加新的动物类型，只需要添加相应的产品类和工厂类即可，不需要修改现有代码。&lt;/p>
&lt;h2 id="2在c中如何使用抽象工厂模式来创建一个更复杂的产品族">2.在C++中，如何使用抽象工厂模式来创建一个更复杂的产品族？
&lt;/h2>&lt;p>在C++中，使用抽象工厂模式创建一个更复杂的产品族涉及到定义多个产品层次结构和相应的工厂接口。以下是一个更复杂的产品族的示例，其中包含多个产品类别和相应的工厂方法。&lt;/p>
&lt;p>假设我们有一个复杂的产品族，包括不同类型的动物和它们的栖息地。每种动物都有特定的栖息地，例如，鸟类可能生活在树上或水边，而爬行动物可能生活在洞穴或沙漠中。&lt;/p>
&lt;p>首先，定义产品接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Animal.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">makeSound&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Habitat.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Habitat&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Habitat&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">describe&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着，创建具体的产品类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Bird.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Animal.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Bird&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">makeSound&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Bird chirps!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// TreeHabitat.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Habitat.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TreeHabitat&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Habitat&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">describe&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;This is a tree habitat.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Reptile.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Animal.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Reptile&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">makeSound&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Reptile hisses!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// DesertHabitat.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Habitat.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DesertHabitat&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Habitat&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">describe&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;This is a desert habitat.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，定义抽象工厂接口，包括创建动物和栖息地的方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// AnimalHabitatFactory.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">AnimalHabitatFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createAnimal&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Habitat&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createHabitat&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">AnimalHabitatFactory&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建具体的工厂类，例如一个工厂专门创建鸟类和它们的栖息地：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// BirdHabitatFactory.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;AnimalHabitatFactory.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Bird.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;TreeHabitat.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BirdHabitatFactory&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">AnimalHabitatFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createAnimal&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Bird&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Habitat&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createHabitat&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TreeHabitat&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样，可以创建另一个工厂类来创建爬行动物和它们的栖息地：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ReptileHabitatFactory.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;AnimalHabitatFactory.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Reptile.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;DesertHabitat.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ReptileHabitatFactory&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">AnimalHabitatFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createAnimal&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Reptile&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Habitat&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createHabitat&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DesertHabitat&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，客户端代码使用抽象工厂来创建对象：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;AnimalHabitatFactory.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Create a bird and its habitat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">AnimalHabitatFactory&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">birdFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BirdHabitatFactory&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">bird&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">birdFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">createAnimal&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">birdHabitat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">birdFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">createHabitat&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bird&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">makeSound&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">birdHabitat&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">describe&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Create a reptile and its habitat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">AnimalHabitatFactory&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">reptileFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ReptileHabitatFactory&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">reptile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">reptileFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">createAnimal&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">reptileHabitat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">reptileFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">createHabitat&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reptile&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">makeSound&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reptileHabitat&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">describe&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，我们定义了两个产品层次结构：&lt;code>Animal&lt;/code> 和 &lt;code>Habitat&lt;/code>，每个层次结构都有自己的具体实现。我们定义了一个抽象工厂 &lt;code>AnimalHabitatFactory&lt;/code>，它有两个方法来创建动物和它们的栖息地。然后，我们为每种产品族创建了具体的工厂类：&lt;code>BirdHabitatFactory&lt;/code> 和 &lt;code>ReptileHabitatFactory&lt;/code>。客户端代码通过工厂接口来创建对象，而不需要知道具体的实现细节。这样，如果需要添加新的动物或栖息地类型，只需要添加相应的产品类和工厂类即可，不需要修改现有代码。&lt;/p>
&lt;h2 id="3在c中抽象工厂模式的实现有哪些常见的问题和解决方案">3.在C++中，抽象工厂模式的实现有哪些常见的问题和解决方案？
&lt;/h2>&lt;p>在C++中实现抽象工厂模式时，可能会遇到一些常见问题以及相应的解决方案：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>问题：系统复杂性增加&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>解决方案：确实，抽象工厂模式通过引入许多抽象类和接口，可能会使系统变得更加复杂。为了解决这个问题，应该在真正需要这种模式时才使用它，例如当存在多个产品族需要创建时。如果系统较为简单，可以考虑使用更简单的工厂模式或构造者模式 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>问题：难以支持新产品类型&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>解决方案：当需要添加新的产品类型时，可能需要修改抽象工厂接口以及所有具体工厂类。为了避免这种情况，可以在设计初期就考虑到扩展性，或者使用更灵活的设计模式，例如原型模式或建造者模式 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>问题：违反依赖倒置原则&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>解决方案：如果客户端代码直接依赖于具体的工厂实现，而不是抽象接口，这可能违反了依赖倒置原则。为了解决这个问题，确保客户端只通过抽象工厂接口与工厂交互，并使用依赖注入来提供具体的工厂实现 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>问题：难以扩展新的产品等级结构&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>解决方案：抽象工厂模式的一个限制是，向系统添加新的产品等级结构可能比较困难。为了解决这个问题，可以在设计时采用更通用的接口，或者使用工厂方法模式来为每个产品单独创建工厂 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>问题：过度使用导致设计混乱&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>解决方案：在一些情况下，过度使用抽象工厂模式可能会使设计变得混乱。为了避免这种情况，应该只在需要创建相关对象族时使用抽象工厂模式，并且确保每个工厂只负责创建一组紧密相关的产品 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>问题：参数化工厂与抽象工厂的混淆&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>解决方案：抽象工厂和参数化工厂都用于创建一组不同的产品，但它们的使用场景不同。当产品具有不同的接口且需要向客户端明确这些差异时，应该使用抽象工厂。如果产品之间的差异不明显或者客户端不需要知道这些差异，可以使用参数化工厂 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>问题：C++中的内存管理&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>解决方案：在现代C++中，推荐使用智能指针（如&lt;code>std::unique_ptr&lt;/code>）来管理内存，避免使用裸指针和直接的&lt;code>new&lt;/code>、&lt;code>delete&lt;/code>操作。这有助于自动管理对象的生命周期，减少内存泄漏的风险 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>问题：接口或抽象类的使用选择&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>解决方案：在实现工厂模式时，选择使用接口还是抽象类取决于具体需求。如果需要定义一个简单的工厂，只包含一个创建对象的方法，接口可能是更好的选择。如果工厂需要包含一些公共的实现细节或多个方法，抽象类可能更合适 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过考虑这些常见问题和解决方案，可以更有效地在C++中应用抽象工厂模式，同时保持代码的清晰和可维护性。&lt;/p>
&lt;h2 id="4如果我想在c中实现一个更灵活的工厂模式你有什么建议">4.如果我想在C++中实现一个更灵活的工厂模式，你有什么建议？
&lt;/h2>&lt;p>在C++中实现一个更灵活的工厂模式，可以考虑以下几种方法和设计模式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用参数化工厂方法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>允许工厂方法接受参数，以决定创建哪种具体产品。这增加了灵活性，因为同一个工厂可以根据不同的输入参数创建不同的产品。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>依赖注入&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过依赖注入（Dependency Injection），将创建对象的职责与使用对象的职责分离，从而提高灵活性和可测试性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>注册机制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用注册机制允许在运行时动态注册和创建具体产品。这可以通过将工厂方法注册到一个中心注册表中来实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单例模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于某些类型的工厂，使用单例模式确保全局只有一个工厂实例，简化资源管理和访问。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原型模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果创建对象的开销很大，可以使用原型模式，通过复制现有的对象来创建新对象，而不是每次都从头开始创建。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>建造者模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当创建复杂对象时，使用建造者模式可以将对象的构造过程封装起来，允许逐步构建对象，并在最后提供一个完整的产品。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工厂方法模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>工厂方法模式允许将对象的创建委托给子类，这样可以根据子类的具体实现来创建不同的产品。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>抽象工厂模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果需要创建相关或依赖的一组对象，可以使用抽象工厂模式。每个具体工厂类负责创建特定产品族的所有对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多态的使用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>利用多态性，可以在不知道具体对象类型的情况下，通过接口或抽象类来使用对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板和泛型&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用C++模板和泛型编程可以创建类型安全的工厂，这些工厂可以用于不同类型的对象，而不需要为每种类型编写单独的代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>最小化工厂接口&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>只暴露必要的工厂接口给客户端，隐藏具体的实现细节，这样在不改变接口的情况下可以灵活地更改内部实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用配置文件&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用配置文件来定义对象的创建逻辑，这样在不修改代码的情况下，通过更改配置就可以改变工厂的行为。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组合工厂模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将多个工厂组合成一个更复杂的工厂，这样可以根据不同的情况使用不同的工厂来创建对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>利用智能指针&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用智能指针（如&lt;code>std::unique_ptr&lt;/code>或&lt;code>std::shared_ptr&lt;/code>）来管理对象的生命周期，避免内存泄漏。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>考虑线程安全&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果工厂模式将在多线程环境中使用，确保工厂的实现是线程安全的，或者使用线程安全的并发控制机制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过结合以上方法和设计模式，可以在C++中实现一个既灵活又强大的工厂模式，以满足不同场景下的需求。&lt;/p>
&lt;h2 id="5c中如何避免抽象工厂模式导致的系统复杂性增加">5.C++中，如何避免抽象工厂模式导致的系统复杂性增加？
&lt;/h2>&lt;p>在C++中，避免抽象工厂模式导致的系统复杂性增加可以采取以下一些策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>合理使用设计模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>只在确实需要的时候使用抽象工厂模式。如果系统中的产品族不多，或者产品族之间的关联性不强，可能不需要使用抽象工厂模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>简化产品接口&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保产品接口尽可能简洁，只包含必要的操作。减少接口的复杂性可以降低整个系统的复杂度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>限制产品族的数量&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>避免定义过多的产品族。每个产品族都需要相应的具体工厂，这会增加系统的复杂性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用依赖注入&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过依赖注入减少工厂与客户端之间的耦合，使系统更加灵活，并且易于测试。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免过度设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在设计初期避免过度设计。只有在确信未来会扩展更多产品族时，才使用抽象工厂模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>利用组合优于继承&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用对象组合代替继承来扩展功能，这样可以减少类的数量，降低系统的复杂性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单一职责原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保每个类只负责一项任务。如果发现类承担了过多职责，应该考虑将其拆分成更小的类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码复用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过模板和泛型编程来复用代码，减少重复代码，降低系统复杂性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模块化设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将系统分解为多个模块，每个模块负责一部分功能，减少模块间的依赖。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文档和注释&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>编写清晰的文档和注释，帮助开发者理解系统的设计和各个组件的作用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码审查&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定期进行代码审查，以识别和重构那些可能导致系统复杂性增加的部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用现有的库和框架&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>尽可能使用已经存在的库和框架来实现工厂模式，避免重复造轮子。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>灵活运用其他设计模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>根据需要，灵活运用工厂方法模式、建造者模式或原型模式等，这些模式可能在某些情况下比抽象工厂模式更简单。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>逐步引入&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果可能，逐步引入抽象工厂模式。一开始可以使用更简单的工厂模式，随着系统的发展，再逐步迁移到抽象工厂模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过上述方法，可以在保持系统灵活性和可扩展性的同时，有效控制和降低由于使用抽象工厂模式带来的系统复杂性。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern adapter pattern</title><link>https://wesigj.github.io/p/design-pattern-adapter-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-adapter-pattern/</guid><description>&lt;h1 id="设计模式-适配器模式-adapter-pattern">设计模式-适配器模式-adapter pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>适配器模式（Adapter Pattern）是一种结构性设计模式&lt;/li>
&lt;li>用于使不兼容的接口能够一起工作&lt;/li>
&lt;li>通过一个中间层（即适配器）来转换一个类的接口，使得原本由于接口不兼容而不能一起工作的类可以协同工作。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1适配器模式adapter-pattern">1.适配器模式（Adapter Pattern）
&lt;/h2>&lt;p>适配器模式（Adapter Pattern）是一种结构性设计模式，用于使不兼容的接口能够一起工作。它主要通过一个中间层（即适配器）来转换一个类的接口，使得原本由于接口不兼容而不能一起工作的类可以协同工作。&lt;/p>
&lt;h3 id="11适配器模式的主要角色包括">1.1.适配器模式的主要角色包括
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>目标（Target）接口&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义客户端使用的特定领域相关的接口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>适配者（Adaptee）类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>一个已经存在的类，需要适配，它拥有与目标接口不兼容的接口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>适配器（Adapter）类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过在内部包装一个适配者对象，把源接口转换成目标接口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="12适配器模式的分类">1.2.适配器模式的分类
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>类适配器模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用对象组合，通过继承实现目标接口，并包含一个适配者的实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象适配器模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用对象组合，通过一个单独的类来实现转换，这个类包含一个指向适配者对象的引用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>接口适配器模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过一个接口来适配，通常用于实现多个接口的情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="13类适配器-对象适配器-接口适配器-c示例">1.3.类适配器 对象适配器 接口适配器 c++示例
&lt;/h3>&lt;p>类适配器、对象适配器和接口适配器是适配器模式的三种形式，它们用于解决接口不兼容的问题。以下是它们之间的主要区别以及C++示例：&lt;/p>
&lt;h4 id="131类适配器class-adapter">1.3.1.类适配器（Class Adapter）
&lt;/h4>&lt;ul>
&lt;li>使用继承来实现。&lt;/li>
&lt;li>适配器类继承自目标接口和适配者类。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>C++ 示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 目标接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ITarget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 适配者类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Adaptee&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">specificRequest&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Adaptee specific request&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 类适配器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ClassAdapter&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ITarget&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">private&lt;/span> &lt;span class="n">Adaptee&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">specificRequest&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用继承自 Adaptee 的方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="132对象适配器object-adapter">1.3.2.对象适配器（Object Adapter）
&lt;/h4>&lt;ul>
&lt;li>使用组合来实现。&lt;/li>
&lt;li>适配器类包含一个适配者类的实例，并在内部委托调用。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>C++ 示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 对象适配器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ObjectAdapter&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ITarget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Adaptee&lt;/span> &lt;span class="n">adaptee&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 组合 Adaptee
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adaptee&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">specificRequest&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 委托调用 Adaptee 的方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="133接口适配器interface-adapter">1.3.3.接口适配器（Interface Adapter）
&lt;/h4>&lt;ul>
&lt;li>通常指适配多个接口的情况。&lt;/li>
&lt;li>适配器类实现多个源接口，并将它们的调用适配到目标接口。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>C++ 示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 另一个适配者接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">IAnotherAdaptee&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">anotherRequest&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 另一个适配者实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">AnotherAdapteeImpl&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">IAnotherAdaptee&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">anotherRequest&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Another Adaptee request&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 接口适配器实现 ITarget 和 IAnotherAdaptee
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">InterfaceAdapter&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ITarget&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">IAnotherAdaptee&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">anotherRequest&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 实现 ITarget 的请求，委托给 IAnotherAdaptee 的实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">anotherRequest&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... 实现 IAnotherAdaptee 的请求
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="134区别总结">1.3.4.区别总结
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>类适配器&lt;/strong>通过继承实现适配，适用于适配者接口较为固定的情况。&lt;/li>
&lt;li>&lt;strong>对象适配器&lt;/strong>通过组合实现适配，提供了更高的灵活性，可以在运行时动态改变适配者对象。&lt;/li>
&lt;li>&lt;strong>接口适配器&lt;/strong>通常用于适配多个具有不同接口的适配者，通过实现多个接口来统一调用。&lt;/li>
&lt;/ul>
&lt;p>在实际开发中，选择哪种适配器模式取决于具体的设计需求和现有的代码结构。&lt;/p>
&lt;h3 id="14适配器模式的应用场景">1.4.适配器模式的应用场景
&lt;/h3>&lt;ul>
&lt;li>当你希望使用一个已经存在的类，但这个类的接口与你需要的不兼容时。&lt;/li>
&lt;li>当你想创建一个可以复用的类，用于与一个或多个不兼容的接口进行交互时。&lt;/li>
&lt;li>当你想提供一个统一的高层接口，用于访问不同的子系统或类库时。&lt;/li>
&lt;/ul>
&lt;p>适配器模式使得你可以在不修改原有类代码的前提下，通过引入一个中间层来适配不同类的接口，提高了代码的灵活性和复用性。&lt;/p>
&lt;h2 id="2适配器模式优缺点">2.适配器模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>单一职责原则你可以将接口或数据转换代码从程序主要业务逻辑中分离。&lt;/li>
&lt;li>开闭原则。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端- 代码的情况下在程序中添加新类型的适配器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3适配器模式应用场景">3.适配器模式应用场景
&lt;/h2>&lt;p>适配器模式在实际开发中的应用非常广泛，以下是一些常见的应用场景：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>第三方库的集成&lt;/strong>：
当需要使用一个第三方库，但其接口与现有系统不兼容时，可以创建一个适配器来转换接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>新旧系统的迁移&lt;/strong>：
在新旧系统迁移过程中，旧系统可能使用一些特定的接口，通过适配器模式可以逐步将旧接口替换为新接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>硬件设备的控制&lt;/strong>：
在硬件设备通信中，不同的设备可能有不同的通信协议，适配器模式可以用来统一这些协议，简化控制逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>UI组件的复用&lt;/strong>：
在图形用户界面开发中，不同厂商提供的组件可能有不同的接口，使用适配器模式可以使这些组件能够在不同的环境中复用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支付网关集成&lt;/strong>：
集成多个支付平台时，每个平台的API可能不同，通过适配器模式可以为应用程序提供一个统一的支付接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据访问层&lt;/strong>：
在数据访问层，不同的数据库可能有不同的访问接口，适配器模式可以用来创建一个统一的数据访问接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中间件开发&lt;/strong>：
中间件通常需要与不同的系统或应用程序交互，适配器模式可以用来适配这些不同的接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Web服务的消费者&lt;/strong>：
当使用多个Web服务时，每个服务可能使用不同的数据格式或通信协议，适配器模式可以用来标准化这些服务的调用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>遗留代码的重构&lt;/strong>：
在处理遗留代码时，可能需要修改接口以适应新的需求，适配器模式可以在不修改原有代码的情况下实现这一点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模块化设计&lt;/strong>：
在模块化设计中，不同的模块可能使用不同的接口，适配器模式可以用来连接这些模块，实现松耦合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试驱动开发&lt;/strong>：
在测试驱动开发中，适配器模式可以用来模拟外部系统的接口，方便进行单元测试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>云服务集成&lt;/strong>：
集成不同的云服务时，每个服务可能有不同的API，适配器模式可以用来提供一个统一的接口。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>适配器模式通过提供一个中间层来转换接口，使得原本不兼容的接口可以协同工作，从而提高了系统的灵活性和可扩展性。&lt;/p>
&lt;h2 id="4类适配器-对象适配器-接口适配器区别">4.类适配器 对象适配器 接口适配器区别
&lt;/h2>&lt;p>类适配器、对象适配器和接口适配器都是适配器模式的实现方式，它们用于解决接口不兼容的问题。以下是这三种适配器模式的主要区别：&lt;/p>
&lt;h3 id="41类适配器模式class-adapter-pattern">4.1.类适配器模式（Class Adapter Pattern）
&lt;/h3>&lt;ul>
&lt;li>使用&lt;strong>继承&lt;/strong>来实现。&lt;/li>
&lt;li>将目标接口作为基类，适配器类继承目标接口并包含一个适配者对象。&lt;/li>
&lt;li>由于使用了继承，类适配器模式可能会受限于现有类的继承结构，并且可能违反里氏替换原则。&lt;/li>
&lt;li>通常用于适配者和目标接口之间有较大差异的情况。&lt;/li>
&lt;/ul>
&lt;h3 id="42对象适配器模式object-adapter-pattern">4.2.对象适配器模式（Object Adapter Pattern）
&lt;/h3>&lt;ul>
&lt;li>使用&lt;strong>组合&lt;/strong>来实现。&lt;/li>
&lt;li>适配器类包含一个指向适配者对象的引用，并通过委托方式调用适配者的方法。&lt;/li>
&lt;li>适配器类实现目标接口，将调用转发给内部的适配者对象。&lt;/li>
&lt;li>对象适配器模式更加灵活，不受限于继承结构，可以同时适配多个适配者类。&lt;/li>
&lt;li>通常用于需要适配多个具有不同接口的适配者类的情况。&lt;/li>
&lt;/ul>
&lt;h3 id="43接口适配器模式interface-adapter-pattern">4.3.接口适配器模式（Interface Adapter Pattern）
&lt;/h3>&lt;ul>
&lt;li>这个术语在设计模式的官方分类中并不常见，它通常指的是使用接口来实现适配的功能。&lt;/li>
&lt;li>接口适配器模式不直接继承或包含适配者，而是定义一个新的接口，该接口将多个不兼容的接口统一起来。&lt;/li>
&lt;li>这种模式通常涉及到多个接口的适配，而不是单个类或对象。&lt;/li>
&lt;li>它允许一个类实现多个接口，并将这些接口的方法映射到一个统一的接口上。&lt;/li>
&lt;/ul>
&lt;h3 id="44应用场景">4.4.应用场景
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>类适配器&lt;/strong>适用于你想要使用一个已有的类，并且这个类的方法可以作为基类的一部分时。&lt;/li>
&lt;li>&lt;strong>对象适配器&lt;/strong>适用于你想要使用一个已有的类，但是不想通过继承改变其结构时，或者需要适配多个不同的类时。&lt;/li>
&lt;li>&lt;strong>接口适配器&lt;/strong>适用于需要将多个不兼容的接口统一为一个接口，以便可以在不同的上下文中使用它们时。&lt;/li>
&lt;/ul>
&lt;h3 id="45举例说明">4.5.举例说明
&lt;/h3>&lt;ul>
&lt;li>类适配器：假设有一个&lt;code>MediaPlayer&lt;/code>接口和一个&lt;code>AudioPlayer&lt;/code>类，&lt;code>AudioPlayer&lt;/code>有一个播放MP3的方法。如果需要让&lt;code>AudioPlayer&lt;/code>播放视频，可以创建一个&lt;code>MediaAdapter&lt;/code>类，继承自&lt;code>MediaPlayer&lt;/code>，内部包含一个&lt;code>AudioPlayer&lt;/code>实例，并添加播放视频的方法。&lt;/li>
&lt;li>对象适配器：在上述例子中，如果不希望继承&lt;code>MediaPlayer&lt;/code>接口，可以创建一个&lt;code>MediaAdapter&lt;/code>类，包含一个&lt;code>AudioPlayer&lt;/code>的实例，并实现&lt;code>MediaPlayer&lt;/code>接口，将播放视频的方法委托给&lt;code>AudioPlayer&lt;/code>的播放MP3方法。&lt;/li>
&lt;li>接口适配器：如果存在多个播放接口，如&lt;code>PlayVideo&lt;/code>和&lt;code>PlayAudio&lt;/code>，可以创建一个&lt;code>UnifiedPlayer&lt;/code>接口，它将这些播放方法统一起来，然后实现这个接口，将不同的播放请求映射到相应的播放方法。&lt;/li>
&lt;/ul>
&lt;p>每种适配器模式都有其适用场景和优缺点，开发者需要根据具体情况选择最合适的适配器模式。&lt;/p>
&lt;h2 id="5在实际项目中如何决定使用类适配器还是对象适配器">5.在实际项目中，如何决定使用类适配器还是对象适配器？
&lt;/h2>&lt;p>在实际项目中，决定使用类适配器还是对象适配器取决于多种因素，包括设计要求、项目结构、代码复用性、灵活性需求以及维护性等。以下是一些指导原则，可以帮助你做出决定：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>复用现有子类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果你需要复用现有的适配者子类，类适配器模式可能更合适，因为它通过继承来扩展现有类的功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多重继承问题&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果你的编程语言不支持多重继承，或者多重继承在项目中导致问题，对象适配器模式是更好的选择，因为它使用组合而非继承。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>修改现有类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果你不能或不想修改现有的适配者类（例如，当它是第三方库的一部分时），对象适配器模式允许你在不修改原有代码的情况下进行适配。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>灵活性和扩展性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象适配器模式提供了更高的灵活性，因为它允许你在运行时更换适配者对象，而类适配器则在编译时就确定了适配者。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单一职责原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果希望遵循单一职责原则，避免在类适配器中引入多个适配者接口的实现，对象适配器模式允许你将不同的适配者职责分离到不同的适配器类中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>接口转换&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果需要将多个不同的接口转换为一个统一的接口，对象适配器模式可能更合适，因为它可以包含多个适配者对象并统一它们的接口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码清晰性和可维护性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果使用类适配器会使代码变得复杂难以理解，对象适配器模式可能更易于维护，因为它将适配逻辑封装在单独的类中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些对性能要求极高的场景下，继承（类适配器）可能比组合（对象适配器）有更小的运行时开销。但这种差异通常非常小，不应成为主要决策因素。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设计一致性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>考虑项目中的其他设计模式和原则，选择与项目整体设计风格一致的适配器模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>团队熟悉度&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>考虑团队对两种模式的熟悉程度和使用经验，选择团队更熟悉和更易于维护的模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>在实际应用中，两种适配器模式都可以用来解决接口不兼容的问题，选择哪一种取决于具体的上下文和上述提到的考虑因素。有时，为了保持设计的一致性或者满足特定的技术需求，项目可能会选择使用其中一种模式。在其他情况下，两种模式都适用，选择哪一种更多地取决于个人或团队的偏好。&lt;/p>
&lt;h2 id="6接口适配器在多线程环境下使用时需要注意哪些问题">6.接口适配器在多线程环境下使用时需要注意哪些问题？
&lt;/h2>&lt;p>在多线程环境下使用接口适配器时，需要注意以下几个问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>线程安全性&lt;/strong>：
确保适配器实现或继承的接口或类是线程安全的。如果适配器中包含共享资源，需要使用适当的同步机制（如互斥锁、信号量等）来避免竞态条件和数据不一致问题 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免死锁&lt;/strong>：
在使用多个锁或资源时，要注意避免死锁的发生。确保以一致的顺序获取锁，或者使用锁管理工具来帮助避免死锁 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源管理&lt;/strong>：
适配器在多线程环境中可能会涉及到资源的分配和释放，需要确保资源的正确管理，避免资源泄露或重复释放 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：
适配器可能会引入额外的同步开销，特别是在高并发场景下。需要评估并优化适配器的性能，以避免成为系统的性能瓶颈 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常处理&lt;/strong>：
适配器在多线程环境中可能会遇到线程中断或异常情况，需要妥善处理这些异常，确保系统的稳定性和健壮性 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程局部变量&lt;/strong>：
如果适配器需要为每个线程维护独立的状态，可以使用线程局部变量（Thread Local Storage, TLS）来避免共享状态的问题 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>并发集合类&lt;/strong>：
考虑使用Java提供的并发集合类，如&lt;code>ConcurrentHashMap&lt;/code>，这些集合类在多线程环境下自动处理线程安全问题，可以减少适配器实现的复杂性 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>锁的粒度和公平性&lt;/strong>：
选择合适的锁粒度和公平性策略，以平衡性能和线程调度的公平性，避免线程饥饿或锁竞争 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程池的使用&lt;/strong>：
在多线程环境中，使用线程池来管理线程的创建和销毁，可以有效减少线程创建和销毁的开销，提高资源利用率 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过考虑这些方面，可以确保接口适配器在多线程环境下的安全性、稳定性和性能。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern behavioral patterns</title><link>https://wesigj.github.io/p/design-pattern-behavioral-patterns/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-behavioral-patterns/</guid><description>&lt;h1 id="设计模式-行为模式-behavioral-patterns">设计模式-行为模式-behavioral patterns
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;hr>
&lt;h2 id="1行为模式behavioral-patterns">1.行为模式（Behavioral Patterns）
&lt;/h2>&lt;p>行为模式（Behavioral Patterns）是软件设计模式的一种，主要关注对象之间的通信和职责的分配。行为模式提供了不同类和对象之间交互的一般化方法，有助于管理和简化复杂的交互逻辑。以下是十一种常见的行为设计模式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>策略模式（Strategy Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义一系列算法，将每个算法封装起来，并使它们可以互换。策略模式让算法的变化独立于使用算法的客户。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板方法模式（Template Method Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在一个方法中定义一个算法的骨架，将一些步骤的执行延迟到子类中。模板方法模式使得子类可以在不改变算法结构的情况下，重新定义算法的某些特定步骤。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>观察者模式（Observer Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义对象之间的一对多依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代器模式（Iterator Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>提供一种顺序访问聚合对象中的各个元素，而不需要暴露聚合对象的内部表示。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>责任链模式（Chain of Responsibility Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>命令模式（Command Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将请求或操作封装为一个对象，从而使你可以用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>备忘录模式（Memento Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在不破坏封装性的前提下，捕获并保存一个对象的内部状态，以便以后可以恢复到这个状态。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态模式（State Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>允许一个对象在其内部状态发生改变时改变其行为，看起来好像改变了其类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>访问者模式（Visitor Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为一个对象结构（如组合结构）增加新能力，不改变结构中的类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中介者模式（Mediator Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使得对象之间不再相互引用，而是通过中介者来进行交互。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>解释器模式（Interpreter Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义一个语言的文法，并建立一个解释器来解释该语言中的句子。解释器模式适合于简单的语言或脚本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>行为模式的应用场景包括但不限于：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>策略模式&lt;/strong>：适用于需要动态选择算法或行为的场景，如游戏AI、图像处理算法等。&lt;/li>
&lt;li>&lt;strong>模板方法模式&lt;/strong>：适用于需要固定算法结构，同时允许子类定制特定步骤的场景。&lt;/li>
&lt;li>&lt;strong>观察者模式&lt;/strong>：适用于需要建立对象之间的一对多依赖关系，如事件发布订阅系统。&lt;/li>
&lt;li>&lt;strong>迭代器模式&lt;/strong>：适用于需要访问聚合对象内部元素，但不想暴露其内部结构的场景。&lt;/li>
&lt;li>&lt;strong>责任链模式&lt;/strong>：适用于需要多个对象依次处理请求，且请求的处理者不明确的场景。&lt;/li>
&lt;li>&lt;strong>命令模式&lt;/strong>：适用于需要将操作封装为对象，支持命令的排队、记录或撤销的场景。&lt;/li>
&lt;li>&lt;strong>备忘录模式&lt;/strong>：适用于需要保存和恢复对象状态的场景，如撤销/重做操作。&lt;/li>
&lt;li>&lt;strong>状态模式&lt;/strong>：适用于对象状态变化导致行为变化的场景，如订单状态管理。&lt;/li>
&lt;li>&lt;strong>访问者模式&lt;/strong>：适用于需要对一个对象结构添加新操作，同时又不想修改现有对象结构的场景。&lt;/li>
&lt;li>&lt;strong>中介者模式&lt;/strong>：适用于需要降低多个对象或类之间的复杂交互关系的场景。&lt;/li>
&lt;li>&lt;strong>解释器模式&lt;/strong>：适用于需要实现简单的语言或语法解析的场景。&lt;/li>
&lt;/ul>
&lt;p>行为模式通过定义对象之间的相互作用，帮助开发者实现灵活、可扩展的系统设计。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern bridge pattern</title><link>https://wesigj.github.io/p/design-pattern-bridge-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-bridge-pattern/</guid><description>&lt;h1 id="设计模式-桥接模式-bridge-pattern">设计模式-桥接模式-bridge pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>桥接模式（Bridge Pattern）是一种结构性设计模式&lt;/li>
&lt;li>用于将抽象部分与其实现部分分离，使它们可以独立地变化&lt;/li>
&lt;li>通俗来说，桥接模式就是车上船，车就是具体实现&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1桥接模式bridge-pattern">1.桥接模式（Bridge Pattern）
&lt;/h2>&lt;p>桥接模式（Bridge Pattern）是一种结构性设计模式，用于将抽象部分与其实现部分分离，使它们可以独立地变化。这种模式通过定义一个桥接接口，将实现的类和抽象的类解耦，从而能够独立地扩展抽象类和实现类。&lt;/p>
&lt;h3 id="11桥接模式的主要角色包括">1.1.桥接模式的主要角色包括
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>抽象（Abstraction）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义了客户使用的接口，维护一个指向实现化对象的引用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>扩展抽象（Refined Abstraction）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>扩展抽象类，添加了更多的业务方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现化（Implementor）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义了实现化的接口，它不被抽象类直接使用，而是仅作为扩展抽象类的一部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>具体实现化（Concrete Implementor）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>实现化接口的具体类，包含了实现化的具体业务。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="12c实现示例">1.2.C++实现示例
&lt;/h3>&lt;p>首先，定义实现化接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Implementor.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Implementor&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Implementor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">operation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着，创建具体的实现化类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ConcreteImplementor.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Implementor.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteImplementor&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Implementor&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">operation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ConcreteImplementor operation&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，定义抽象类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Abstraction.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Implementor.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Abstraction&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Implementor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">implementor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Abstraction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Implementor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">imp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">implementor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">imp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Abstraction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着，扩展抽象类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// RefinedAbstraction.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Abstraction.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">RefinedAbstraction&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Abstraction&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RefinedAbstraction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Implementor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">imp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">Abstraction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">imp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">implementor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">operation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">refinedRequest&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">refinedRequest&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Refined request&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，客户端代码使用桥接模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ConcreteImplementor.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;RefinedAbstraction.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Implementor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">imp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteImplementor&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Abstraction&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">abstraction&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RefinedAbstraction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">imp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">abstraction&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">abstraction&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">imp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13桥接模式的应用场景">1.3.桥接模式的应用场景
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>当一个类存在两个独立变化的维度时&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>例如，一个图形系统，图形的类型和颜色是两个独立变化的维度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>当一个类需要从多个角度进行扩展时&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>每个角度可以使用不同的实现化。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>当需要通过第三方类扩展系统时&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>第三方类可以作为实现化部分，而系统的核心功能作为抽象部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>当不希望使用继承来扩展系统时&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用组合和接口来扩展系统，避免继承带来的耦合和限制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>桥接模式提供了一种灵活的方式来扩展系统的功能，同时保持系统的可维护性和可扩展性。通过桥接模式，可以在不修改现有代码的前提下，通过增加新的实现化类来扩展系统。&lt;/p>
&lt;h2 id="2桥接模式优缺点">2.桥接模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>你可以创建与平台无关的类和程序。&lt;/li>
&lt;li>客户端代码仅与高层抽象部分进行互动， 不会接触到平台的详细信息。&lt;/li>
&lt;li>开闭原则。 你可以新增抽象部分和实现部分， 且它们之间不会相互影响。&lt;/li>
&lt;li>单一职责原则。 抽象部分专注于处理高层逻辑， 实现部分处理平台细节。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>对高内聚的类使用该模式可能会让代码更加复杂。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3桥接模式使用场景">3.桥接模式使用场景
&lt;/h2>&lt;p>在实际项目中，桥接模式（Bridge Pattern）可以应用于多种场景，尤其是当需要将一个类的抽象部分与它的实现部分分离，以便它们可以独立地变化和扩展时。以下是一些具体的应用实例：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>图形界面库开发&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在开发图形界面库时，可以使用桥接模式将界面的绘制（抽象部分）与具体的控件类型（实现部分）分离。这样，增加新的控件类型或改变绘制方式时，不需要修改已有的代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支付系统设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在支付系统中，支付方式（如信用卡、PayPal、微信支付）可以作为实现化角色，而支付接口作为抽象部分。这样，添加新的支付方式或修改现有支付逻辑时互不影响。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏角色和行为分离&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在游戏开发中，角色（如战士、法师）可以有一个抽象类，而具体的行为（如攻击、防御、移动）可以作为实现化角色。这样，可以灵活地为不同角色分配不同的行为。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>硬件设备的驱动程序开发&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当开发硬件设备的驱动程序时，可以使用桥接模式将设备的硬件控制（抽象部分）与具体的操作（实现部分）分离。这样，更换设备或更新操作逻辑时更加灵活。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络应用的协议处理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在网络通信中，可以使用桥接模式将协议的抽象处理与具体的协议实现分离。这样，增加新的协议或修改现有协议的处理逻辑时，不需要修改核心的协议处理代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>报告生成系统&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在报告生成系统中，报告的格式（如PDF、Excel、HTML）可以作为实现化角色，而报告的内容生成逻辑作为抽象部分。这样，添加新的报告格式或修改报告内容时互不干扰。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多语言支持&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在需要多语言支持的应用程序中，可以使用桥接模式将用户界面的元素（抽象部分）与不同的语言资源（实现部分）分离。这样，添加新的语言或更新翻译时更加方便。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>软件的插件架构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当软件采用插件架构时，可以使用桥接模式将插件的接口（抽象部分）与具体的插件实现（实现部分）分离。这样，开发新的插件或更新现有插件时互不影响。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源管理器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在资源管理器中，可以使用桥接模式将资源的访问方式（抽象部分）与具体的资源类型（实现部分）分离。这样，增加新的资源类型或改变资源访问方式时更加灵活。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过这些应用实例，我们可以看到桥接模式在实际项目中的价值，它有助于提高代码的可维护性、可扩展性和灵活性。在设计系统时，如果预见到某个类可能会有多个变化维度，考虑使用桥接模式来避免未来代码的复杂性。&lt;/p>
&lt;h2 id="4在实际项目中如何确保桥接模式的实现与抽象部分的解耦">4.在实际项目中，如何确保桥接模式的实现与抽象部分的解耦？
&lt;/h2>&lt;p>在实际项目中，确保桥接模式的实现与抽象部分的解耦，可以遵循以下几个关键步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>明确角色职责&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>清晰定义抽象部分（Abstraction）和实现部分（Implementor）的职责，确保它们之间的接口是明确的，并且没有依赖关系。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用接口或抽象类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为实现部分定义一个接口或抽象类，这个接口或抽象类将被抽象部分所依赖，而不是具体的实现类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>依赖关系反向&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保抽象部分不直接依赖具体实现类，而是依赖实现部分的接口或抽象类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>通过组合实现解耦&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在抽象部分中，使用一个成员变量来组合实现部分的接口或抽象类，而不是具体实现类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免直接引用实现类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在抽象部分的代码中，避免直接引用任何实现类的实例，所有的操作都通过实现部分的接口或抽象类来进行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用工厂模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>可以使用工厂模式来创建实现部分的对象，这样可以进一步解耦实现部分的具体类和抽象部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定义清晰的协议&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为实现部分定义清晰的协议或接口，确保所有实现类都遵循这个协议，这样抽象部分不依赖于任何特定的实现细节。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单一职责原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>遵循单一职责原则，确保抽象类和实现类都只处理它们应该处理的职责。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编写单元测试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为抽象部分和实现部分编写单元测试，确保它们可以独立于彼此进行测试。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码审查&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过代码审查来确保实现遵循桥接模式的原则，没有不当的依赖关系。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文档和注释&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>编写清晰的文档和注释，说明抽象部分和实现部分的接口和职责。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>逐步集成&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在集成过程中，逐步将抽象部分和实现部分结合起来，确保它们可以协同工作，同时保持各自的独立性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用依赖注入&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>利用依赖注入（Dependency Injection）来动态地将实现部分注入到抽象部分中，而不是在抽象部分中创建具体实现的实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免条件语句&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>避免在抽象部分中使用条件语句来判断具体的实现类型，这有助于保持解耦。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过这些步骤，可以确保在实际项目中实现桥接模式时，抽象部分和实现部分能够保持高度的解耦，从而提高代码的灵活性和可维护性。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern builder_pattern</title><link>https://wesigj.github.io/p/design-pattern-builder_pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-builder_pattern/</guid><description>&lt;h1 id="设计模式-生成器模式-builder_pattern">设计模式-生成器模式 builder_pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>生成器模式（Builder Pattern）是一种创建型设计模式&lt;/li>
&lt;li>用于构造一个复杂的对象。这个对象的构建过程涉及多个步骤，并且希望将构建过程与表示对象本身分离，使得相同的构建过程能够创建出不同的表示。
&lt;ul>
&lt;li>一个指挥者（Director）对象来控制构建过程&lt;/li>
&lt;li>一个产品（Product）接口表示要构建的复杂对象&lt;/li>
&lt;li>一个或多个具体的构建者（Builder）类来实现构建过程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1生成器模式-builder_pattern">1.生成器模式 builder_pattern
&lt;/h2>&lt;p>生成器模式（Builder Pattern）是一种创建型设计模式，用于构造一个复杂的对象。这个对象的构建过程涉及多个步骤，并且希望将构建过程与表示对象本身分离，使得相同的构建过程能够创建出不同的表示。&lt;/p>
&lt;p>生成器模式通过引入一个指挥者（Director）对象来控制构建过程，一个产品（Product）接口表示要构建的复杂对象，以及一个或多个具体的构建者（Builder）类来实现构建过程。这样，你可以在不改变构建过程的情况下，通过改变构建者的具体实现来创建不同的产品。&lt;/p>
&lt;p>以下是使用C++实现生成器模式的一个示例：&lt;/p>
&lt;p>首先，定义产品接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Product.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Product&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Product&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他产品相关的接口和实现...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着，创建具体的产品类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ConcreteProduct.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Product.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteProduct&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Product&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 具体产品的实现...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，定义构建者接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Builder.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Product.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Builder&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">BuildPartA&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">BuildPartB&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他构建方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="n">Product&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">GetProduct&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来，创建具体的构建者类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ConcreteBuilder.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Builder.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ConcreteProduct.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteBuilder&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Builder&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteProduct&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">product_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteBuilder&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">product_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteProduct&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">ConcreteBuilder&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">BuildPartA&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构建产品的一部分...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">BuildPartB&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构建产品的一部分...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Product&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">GetProduct&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">product_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，定义指挥者类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Director.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Builder.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Director&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">Construct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">builder&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">BuildPartA&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">builder&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">BuildPartB&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 调用其他构建方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，客户端代码使用生成器模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Director.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ConcreteBuilder.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Director&lt;/span> &lt;span class="n">director&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteBuilder&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">director&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Construct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Product&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">product&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetProduct&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用构建好的产品...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">product&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 清理资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>Product&lt;/code> 是产品接口，&lt;code>ConcreteProduct&lt;/code> 是具体产品。&lt;code>Builder&lt;/code> 是构建者接口，&lt;code>ConcreteBuilder&lt;/code> 是具体构建者，实现了构建过程。&lt;code>Director&lt;/code> 是指挥者，负责调用构建者的方法来构建产品。客户端代码通过指挥者和构建者来创建复杂的产品对象，而不需要知道具体的构建细节。这样，如果需要添加新的产品类型，只需要添加相应的具体构建者即可，不需要修改现有代码。&lt;/p>
&lt;h2 id="2生成器模式优缺点">2.生成器模式优缺点
&lt;/h2>&lt;h3 id="21优点">2.1.优点
&lt;/h3>&lt;ul>
&lt;li>你可以分步创建对象， 暂缓创建步骤或递归运行创建步骤。&lt;/li>
&lt;li>生成不同形式的产品时， 你可以复用相同的制造代码。&lt;/li>
&lt;li>单一职责原则。 你可以将复杂构造代码从产品的业务逻辑中分离出来。&lt;/li>
&lt;/ul>
&lt;h3 id="22缺点">2.2.缺点
&lt;/h3>&lt;ul>
&lt;li>由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加。&lt;/li>
&lt;/ul>
&lt;h2 id="3生成器模式在实际开发中有哪些应用场景">3.生成器模式在实际开发中有哪些应用场景？
&lt;/h2>&lt;p>生成器模式（Builder Pattern）在实际开发中有多种应用场景，尤其适用于创建一个复杂对象的步骤很多，或者对象的创建过程需要高度的灵活性时。以下是一些具体的应用实例：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>构建复杂对象&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当对象的构造需要多个步骤，并且这些步骤可能会经常变化时，使用生成器模式可以将构建过程封装起来，便于管理和修改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GUI组件构建&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在图形用户界面（GUI）编程中，生成器模式可以用来构建复杂的界面组件，如面板、菜单、工具栏等，这些组件可能由多个小部件组成。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据库连接&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在数据库编程中，可以使用生成器模式构建数据库连接字符串，不同的数据库类型（如MySQL、PostgreSQL）可能需要不同的连接参数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置文件解析&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当需要从配置文件（如XML、JSON）构建配置对象时，生成器模式可以提供一种灵活的方式来处理不同的配置选项。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Web页面内容生成&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在Web开发中，生成器模式可以用来构建复杂的页面内容，如HTML、CSS、JavaScript代码，这些代码可能由多个部分组成。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>报表生成&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>报表软件中，生成器模式可以用来构建复杂的报表，报表可能包含文本、图表、表格等多种元素。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据结构的构建&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在算法实现中，如果需要构建复杂的数据结构，如树、图等，生成器模式可以提供一种清晰的方式来组织构建过程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象的版本控制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当对象有多个版本或变体时，可以使用不同的构建者来创建对象的不同版本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>API请求构建&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在网络编程中，生成器模式可以用来构建复杂的API请求，包括设置请求头、请求体、参数等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏角色创建&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在游戏开发中，生成器模式可以用来创建具有多种属性和技能的游戏角色。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>汽车配置&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在实际的汽车制造系统中，生成器模式可以用来根据不同的配置选项构建汽车，如发动机类型、颜色、内饰等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>产品定制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于需要定制的产品，如家具、电脑硬件等，生成器模式可以帮助用户选择不同的组件和选项来定制产品。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>使用生成器模式可以使得构建过程与表示对象本身分离，提高系统的灵活性和可扩展性。同时，它也使得相同的构建过程能够创建出不同的表示，增加了代码的复用性。&lt;/p>
&lt;h2 id="4生成器模式和工厂模式有什么区别它们各自适用于什么情况">4.生成器模式和工厂模式有什么区别，它们各自适用于什么情况？
&lt;/h2>&lt;p>生成器模式（Builder Pattern）和工厂模式（Factory Pattern）都是创建型设计模式，用于创建对象，但它们在应用场景和设计意图上存在一些关键的区别：&lt;/p>
&lt;h3 id="41生成器模式builder-pattern">4.1.生成器模式（Builder Pattern）
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>适用场景&lt;/strong>：生成器模式适用于创建一个复杂对象，这个对象的构建过程涉及多个步骤，并且希望将构建过程与表示对象本身分离，使得相同的构建过程能够创建出不同的表示。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>创建的对象通常由多个部分组成，且这些部分的构建顺序很重要。&lt;/li>
&lt;li>允许用户通过指定的构建步骤来创建一个复杂的对象。&lt;/li>
&lt;li>可以存在多个不同的构建者，它们实现了相同的构建接口，但构建过程的细节可能不同。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="42工厂模式factory-pattern">4.2.工厂模式（Factory Pattern）
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>适用场景&lt;/strong>：工厂模式用于创建一个对象，当这个对象的创建逻辑与使用该对象的客户端逻辑分离时，可以使用工厂模式。它适用于当创建对象的逻辑较为简单，不需要多个步骤时。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>提供一个接口用于创建对象，让子类决定实例化哪一个类。&lt;/li>
&lt;li>通常用于处理对象的创建，这些对象的创建过程不会太复杂。&lt;/li>
&lt;li>隐藏了实例创建的细节，由工厂类来决定如何创建对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="43区别">4.3.区别
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>复杂性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>生成器模式适合创建过程复杂的对象，而工厂模式适合创建过程简单的对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分离度&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>生成器模式通过构建者类和指挥者类进一步分离了创建逻辑和表示细节，而工厂模式通常只包含一个工厂类来处理创建逻辑。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>灵活性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>生成器模式提供了更高的灵活性，可以通过不同的构建者类创建不同的产品，而工厂模式通常只能创建一种类型的对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用场景&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果对象的创建涉及到多个步骤，并且这些步骤可能会变化，生成器模式是一个更好的选择。&lt;/li>
&lt;li>如果对象的创建逻辑相对简单，或者创建逻辑是固定的，工厂模式可能更合适。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可扩展性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>生成器模式更容易扩展以支持新的产品类型，因为可以引入新的构建者类而不需要修改现有的构建过程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码结构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>生成器模式通常包含多个类（产品、构建者接口、具体构建者、指挥者），而工厂模式可能只包含一个工厂类和产品类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>在选择使用哪种模式时，需要根据实际的需求和上下文来决定。如果对象的创建过程复杂且可能变化，生成器模式提供了更好的解决方案；如果对象的创建过程简单且不太可能变化，工厂模式可能是一个更简单直接的选择。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Chain of Responsibility Pattern</title><link>https://wesigj.github.io/p/design-pattern-chain-of-responsibility-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-chain-of-responsibility-pattern/</guid><description>&lt;h1 id="设计模式-责任链模式-chain-of-responsibility-pattern">设计模式-责任链模式-Chain of Responsibility Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>责任链模式（Chain of Responsibility Pattern）是一种行为设计模式&lt;/strong>&lt;/li>
&lt;li>&lt;strong>它允许一个请求沿着一条链（多个对象组成的链）传递，直到链上的某个对象能够处理该请求为止&lt;/strong>&lt;/li>
&lt;li>&lt;strong>这种模式将请求的发送者和接收者解耦，使得多个对象都有机会处理请求，从而增加了系统的灵活性&lt;/strong>&lt;/li>
&lt;li>&lt;strong>能看多少是多少，看不完下次记得回来看&lt;/strong>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1责任链模式chain-of-responsibility-pattern">1.责任链模式（Chain of Responsibility Pattern）
&lt;/h2>&lt;p>责任链模式（Chain of Responsibility Pattern）是一种行为设计模式，它允许一个请求沿着一条链（多个对象组成的链）传递，直到链上的某个对象能够处理该请求为止。这种模式将请求的发送者和接收者解耦，使得多个对象都有机会处理请求，从而增加了系统的灵活性。&lt;/p>
&lt;p>责任链模式的主要特点包括：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>请求的传递性&lt;/strong>：请求在责任链上的多个对象间传递，直到被处理。&lt;/li>
&lt;li>&lt;strong>对象的解耦&lt;/strong>：请求的发送者不需要知道哪个具体对象会处理其请求，也不需要知道链的结构。&lt;/li>
&lt;li>&lt;strong>动态调整&lt;/strong>：责任链可以根据需要动态地增加或移除处理对象，提高了系统的可扩展性。&lt;/li>
&lt;li>&lt;strong>处理的多样性&lt;/strong>：一个请求可以被多个对象处理，或者由链上的某个对象最终处理。&lt;/li>
&lt;/ol>
&lt;p>责任链模式的结构通常包括以下角色：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Handler（抽象处理者）&lt;/strong>：定义一个处理请求的接口，通常包含一个指向下一个处理者的引用。&lt;/li>
&lt;li>&lt;strong>ConcreteHandler（具体处理者）&lt;/strong>：实现抽象处理者接口，负责处理请求或将请求传递给链上的下一个处理者。&lt;/li>
&lt;li>&lt;strong>Client（客户端）&lt;/strong>：创建处理者链，并提交请求。&lt;/li>
&lt;/ul>
&lt;p>以下是一个简单的责任链模式的实现示例（以C++为例）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象处理者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体处理者A
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteHandlerA&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;HandlerA handles request &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">successor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">successor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体处理者B
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteHandlerB&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;HandlerB handles request &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">successor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">successor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">handlerA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConcreteHandlerA&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">handlerB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConcreteHandlerB&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">handlerA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handlerB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">handlerB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 链的末端
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">handlerA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 由HandlerA处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">handlerA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 由HandlerB处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">handlerA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">25&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 无人处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>Handler&lt;/code>是一个抽象类，定义了处理请求的接口和设置下一个处理者的接口。&lt;code>ConcreteHandlerA&lt;/code>和&lt;code>ConcreteHandlerB&lt;/code>是具体的处理者，它们实现了&lt;code>Handler&lt;/code>接口。客户端创建了两个处理者对象，并设置它们之间的责任链。然后，客户端通过责任链提交请求。&lt;/p>
&lt;p>责任链模式适用于以下场景：&lt;/p>
&lt;ul>
&lt;li>多个对象可能处理同一个请求，但具体哪个对象处理该请求并不明确。&lt;/li>
&lt;li>需要动态地增加或移除责任链中的处理者。&lt;/li>
&lt;li>客户端只需要发送请求，而不需要知道请求是如何被处理的，也不需要知道有哪些对象参与了处理。&lt;/li>
&lt;/ul>
&lt;h2 id="2责任链模式优缺点">2.责任链模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>你可以控制请求处理的顺序。&lt;/li>
&lt;li>单一职责原则。 你可对发起操作和执行操作的类进行解耦。&lt;/li>
&lt;li>开闭原则。 你可以在不更改现有代码的情况下在程序中新增处理者。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>部分请求可能未被处理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3如何设计一个责任链模式的客户端来使用这个模式">3.如何设计一个责任链模式的客户端来使用这个模式？
&lt;/h2>&lt;p>在C++中设计一个责任链模式的客户端，可以遵循以下步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义处理者接口&lt;/strong>：创建一个抽象基类，定义处理请求的接口和设置下一个处理者的指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现具体处理者&lt;/strong>：创建具体处理者类，继承自处理者接口，并实现处理请求的方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组装责任链&lt;/strong>：在客户端代码中，创建具体处理者对象的实例，并将它们连接成链。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>发送请求&lt;/strong>：客户端创建请求并将其发送给责任链的第一个处理者。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>以下是一个C++中责任链模式的示例实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 定义请求类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Request&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 请求类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">explicit&lt;/span> &lt;span class="nf">Request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 定义处理者接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 实现具体处理者A
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteHandlerA&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ConcreteHandlerA handles the request.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="nf">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">successor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">successor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 实现具体处理者B
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteHandlerB&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ConcreteHandlerB handles the request.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="nf">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">successor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">successor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 客户端代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">handlerA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConcreteHandlerA&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">handlerB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConcreteHandlerB&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">handlerA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handlerB&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 组装责任链
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建请求并发送
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">requestA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">requestB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">handlerA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">requestA&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 应该由ConcreteHandlerA处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">handlerA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">requestB&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 应该由ConcreteHandlerB处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>Handler&lt;/code> 是一个抽象基类，定义了 &lt;code>HandleRequest&lt;/code> 和 &lt;code>SetSuccessor&lt;/code> 方法。&lt;code>ConcreteHandlerA&lt;/code> 和 &lt;code>ConcreteHandlerB&lt;/code> 是具体处理者类，它们实现了 &lt;code>Handler&lt;/code> 接口。每个处理者在处理请求时，会检查请求类型是否符合自己的处理条件，如果不符合且存在后继者，则将请求传递给后继者。&lt;/p>
&lt;p>客户端代码创建了 &lt;code>ConcreteHandlerA&lt;/code> 和 &lt;code>ConcreteHandlerB&lt;/code> 的实例，并通过调用 &lt;code>SetSuccessor&lt;/code> 方法将它们连接成一条责任链。然后，客户端创建了两个请求，并将它们发送给责任链的第一个处理者（&lt;code>handlerA&lt;/code>）。&lt;/p>
&lt;p>通过这种方式，客户端可以灵活地使用责任链模式来处理请求，同时保持请求发送者和接收者之间的解耦。&lt;/p>
&lt;h2 id="4责任链模式在实际项目中有哪些应用场景">4.责任链模式在实际项目中有哪些应用场景？
&lt;/h2>&lt;p>责任链模式在实际项目中的应用场景非常广泛，以下是一些典型的应用案例：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>多步骤审批流程&lt;/strong>：例如，在企业内部的审批系统中，一个审批请求可能需要经过多个层级的审批者，如部门经理、财务经理、总经理等。每个审批者根据自己的职责和权限处理请求，如果无法处理则传递给下一个审批者。这种场景可以通过责任链模式实现，使得审批流程清晰且易于管理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>权限控制系统&lt;/strong>：在权限控制中，用户的不同操作可能需要不同权限级别的审批。责任链模式可以用于构建一个权限验证链，每个节点代表一个权限检查，请求在链上传递直到被适当权限的节点处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>事件处理系统&lt;/strong>：在图形用户界面（GUI）编程中，事件（如鼠标点击、键盘输入）可能需要多个组件处理。责任链模式允许事件在组件层级结构中传递，直到某个组件处理该事件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>日志系统&lt;/strong>：在日志系统中，可以根据日志级别（如INFO、DEBUG、ERROR）将日志消息传递给不同的处理器。责任链模式可以用于构建日志处理器链，每个处理器处理特定级别的日志。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>过滤器链&lt;/strong>：在Java的Servlet过滤器中，请求在到达目标资源之前可能需要通过多个过滤器的处理。每个过滤器可以执行特定的任务，如身份验证、日志记录等，然后将请求传递给下一个过滤器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工作流系统&lt;/strong>：在工作流管理系统中，任务可能需要按照特定的顺序经过多个处理步骤。责任链模式可以用来构建这样的工作流，每个步骤作为一个处理节点，任务在链上传递直到完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>错误处理&lt;/strong>：在软件系统中，错误和异常可能需要多个处理器来处理。责任链模式可以用于构建一个错误处理链，每个节点负责处理特定类型的错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能优化&lt;/strong>：在某些情况下，责任链模式可以用于优化性能，例如通过缓存机制避免不必要的处理，或者通过请求过滤减少责任链的遍历。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Tomcat 过滤器&lt;/strong>：在Tomcat服务器中，过滤器链用于处理HTTP请求和响应。每个过滤器可以执行特定的任务，如权限检查、请求日志记录等，然后将请求传递给下一个过滤器。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这些应用场景，我们可以看到责任链模式如何帮助系统设计变得更加灵活和可维护，同时也提高了代码的可读性和可扩展性。&lt;/p>
&lt;h2 id="5责任链模式在权限控制系统中是如何实现的能否举例说明">5.责任链模式在权限控制系统中是如何实现的，能否举例说明？
&lt;/h2>&lt;p>责任链模式在权限控制系统中的应用主要是通过创建一系列的处理对象（处理器），每个对象负责特定的权限验证任务。这些处理对象按照特定的顺序连接成一条链，当一个权限验证请求到来时，请求会沿着这条链传递，直到被适当的处理对象处理。&lt;/p>
&lt;p>以下是责任链模式在权限控制系统中实现的步骤和技术细节：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义处理接口&lt;/strong>：首先定义一个处理接口，通常包含一个处理方法和一个设置下一个处理者的引用的方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建具体处理者&lt;/strong>：根据不同的权限验证需求，创建具体的处理者类，每个类实现处理接口，并在处理方法中添加具体的验证逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组装责任链&lt;/strong>：在系统初始化或运行时，根据配置信息或业务逻辑动态地组装责任链，将各个处理者连接起来。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>请求处理&lt;/strong>：当用户发起权限请求时，请求首先被发送到责任链的第一个处理者，如果该处理者无法处理，则将请求传递给链中的下一个处理者，依此类推。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>处理结果&lt;/strong>：一旦请求被处理，处理者可以返回处理结果，或者根据业务需求继续沿着责任链传递。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>错误处理和日志记录&lt;/strong>：在责任链的实现中，通常需要考虑错误处理和日志记录的逻辑，以便于调试和审计。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>例如，在一个Web应用中，可能需要对用户的请求进行登录验证、角色检查、权限验证等多个步骤的检查。每个步骤都由一个具体处理者实现，这些处理者按照请求处理的顺序连接成一条责任链。用户的请求首先经过登录验证处理器，如果通过，则传递给角色检查处理器，以此类推，直到所有的验证都通过，或者某个验证失败并返回错误信息。&lt;/p>
&lt;p>通过责任链模式，权限控制系统可以灵活地增加、删除或修改权限验证的步骤，而不需要修改现有的代码，提高了系统的可扩展性和可维护性。同时，该模式也使得请求处理的流程更加清晰，便于理解和管理。&lt;/p>
&lt;h2 id="6在责任链模式中如果某个处理者无法处理请求它会如何影响整个责任链">6.在责任链模式中，如果某个处理者无法处理请求，它会如何影响整个责任链？
&lt;/h2>&lt;p>在责任链模式中，如果某个处理者无法处理请求，这通常会导致以下几种情况：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>传递给下一个处理者&lt;/strong>：如果当前处理者无法处理请求，它会将请求传递给链中的下一个处理者。这个过程会一直持续，直到请求被处理或传递到链的末端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>请求未被处理&lt;/strong>：如果责任链中的所有处理者都无法处理请求，那么请求可能会被忽略或被视为无效。在这种情况下，客户端可能需要提供一种默认的处理策略或错误处理机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>错误处理&lt;/strong>：在某些实现中，如果请求无法被处理，可能会触发一个错误处理流程。这可以是责任链中的一个特殊处理者，或者是一个在链外独立的错误处理机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>记录日志&lt;/strong>：在请求无法被处理的情况下，系统可能会记录日志信息，以便后续分析和调试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>通知客户端&lt;/strong>：在某些设计中，如果请求无法被处理，责任链可能会通过某种方式通知客户端，例如返回一个错误码或抛出一个异常。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>终止处理&lt;/strong>：如果某个处理者无法处理请求，它可以选择不将请求传递给下一个处理者，从而终止进一步的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>回退处理&lt;/strong>：在某些情况下，如果后续处理者都无法处理请求，责任链可能会回退到之前的处理者，尝试其他可能的处理策略。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>为了确保责任链的正确性和健壮性，设计时应该考虑以下因素：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>默认处理者&lt;/strong>：在责任链的末端设置一个默认处理者，以处理那些未被前面处理者处理的请求。&lt;/li>
&lt;li>&lt;strong>错误处理策略&lt;/strong>：定义清晰的错误处理策略，以便在请求无法被处理时采取适当的措施。&lt;/li>
&lt;li>&lt;strong>日志记录&lt;/strong>：在责任链的每个处理者中添加日志记录，以便于跟踪请求的处理过程和诊断问题。&lt;/li>
&lt;li>&lt;strong>客户端反馈&lt;/strong>：确保客户端能够接收到关于请求处理结果的反馈，无论是成功处理还是无法处理。&lt;/li>
&lt;/ul>
&lt;p>通过这些措施，可以确保责任链模式在处理请求时的灵活性和可靠性，同时减少因请求未被处理而带来的潜在问题。&lt;/p>
&lt;h2 id="7如果责任链中的某个处理者抛出异常应该如何设计异常处理机制">7.如果责任链中的某个处理者抛出异常，应该如何设计异常处理机制？
&lt;/h2>&lt;p>在责任链模式中，如果某个处理者在处理请求时抛出异常，应该设计一个健壮的异常处理机制来确保系统的稳定性和可靠性。以下是设计异常处理机制的一些建议：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>在处理者中捕获异常&lt;/strong>：每个处理者应该在其&lt;code>handleRequest&lt;/code>方法中添加异常捕获逻辑，以便在处理请求时捕获并处理可能发生的异常。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定义异常处理策略&lt;/strong>：为责任链定义一个统一的异常处理策略，例如记录日志、发送错误通知、清理资源等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>传递异常信息&lt;/strong>：如果当前处理者无法处理异常，可以将异常信息传递给链中的下一个处理者，或者传递给链外的异常处理器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设置异常处理者&lt;/strong>：在责任链的末端或特定位置设置一个专门用于处理异常的处理者，它负责处理链中其他处理者未能处理的异常。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>向上抛出异常&lt;/strong>：在某些情况下，如果责任链无法处理异常，可以选择将异常向上抛出，由客户端代码来处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端异常处理&lt;/strong>：客户端代码应该准备好处理可能从责任链抛出的异常，这可能包括为用户提供错误信息或执行其他恢复操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用模板方法模式&lt;/strong>：可以使用模板方法模式在基类中定义责任链的处理流程，并在适当的时机处理异常，这样具体处理者只需要关注业务逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常日志记录&lt;/strong>：确保所有捕获的异常都被记录在日志中，以便于问题追踪和系统监控。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常透明性&lt;/strong>：在设计责任链时，应该明确哪些异常是处理者必须处理的，哪些是可以传递的，这有助于减少异常处理的混乱。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源清理&lt;/strong>：在捕获异常后，确保进行适当的资源清理工作，以防止资源泄漏。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>以下是一个简单的C++代码示例，展示了如何在责任链模式中处理异常：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;exception&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 处理者接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">GetSuccessor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体处理者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteHandler&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">HandleException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">exception&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 异常处理逻辑，例如日志记录
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Exception caught: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">what&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">ProcessRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 业务处理逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">exception&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HandleException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 可以选择将异常传递给下一个处理者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">successor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ProcessRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">successor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">GetSuccessor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">successor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 请求类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Request&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 请求数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 客户端
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">handlerA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConcreteHandler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">handlerB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConcreteHandler&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">handlerA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetSuccessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handlerB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Request&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 发送请求可能会抛出异常
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">handlerA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">HandleRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">exception&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Exception in client: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">what&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 客户端可以执行额外的异常处理逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>ConcreteHandler&lt;/code> 类在处理请求时可能会抛出异常。在&lt;code>ProcessRequest&lt;/code>方法中，我们使用&lt;code>try-catch&lt;/code>块来捕获异常，并调用&lt;code>HandleException&lt;/code>方法来处理异常。如果存在后继者，我们可以将异常传递给链中的下一个处理者。在客户端代码中，我们也准备了一个&lt;code>try-catch&lt;/code>块来捕获可能从责任链抛出的异常。&lt;/p>
&lt;p>通过这种方式，责任链模式中的异常可以被适当地捕获和处理，同时保证了系统的健壮性和稳定性。&lt;/p>
&lt;h2 id="8在设计责任链时如何确保异常处理的透明性和一致性">8.在设计责任链时，如何确保异常处理的透明性和一致性？
&lt;/h2>&lt;p>在设计责任链时，确保异常处理的透明性和一致性可以通过以下方法实现：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>统一异常处理策略&lt;/strong>：定义一个统一的异常处理接口或抽象类，确保所有处理器都遵循相同的异常处理规则。这可以通过在处理器接口中定义一个异常处理方法来实现，例如 &lt;code>handleException(Exception e)&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常捕获与传播&lt;/strong>：在每个处理器中，使用 &lt;code>try-catch&lt;/code> 块来捕获可能发生的异常，并根据需要处理或将异常传递给链中的下一个处理器。如果当前处理器无法处理异常，应确保异常能够透明地传递到链中的下一个处理器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>日志记录&lt;/strong>：在异常处理方法中添加日志记录，记录异常的发生、处理器的名称和异常信息。这有助于调试和监控责任链中的异常情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常封装&lt;/strong>：如果需要对异常进行额外的处理或转换，可以在处理器中封装异常，然后继续沿着责任链传递或返回给客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>链末端的异常处理&lt;/strong>：在责任链的末端设置一个默认的异常处理器，用于处理链中未被捕获的异常。这可以确保所有异常都能得到妥善处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端透明性&lt;/strong>：客户端发送请求时，不需要知道责任链中的具体异常处理逻辑。处理器链应隐藏异常处理的细节，只向客户端返回最终的处理结果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用模板方法模式&lt;/strong>：可以使用模板方法模式在基类中定义责任链的处理流程，包括异常处理的模板方法，具体处理器只需实现具体的业务逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常处理的一致性&lt;/strong>：确保所有处理器使用相同的异常处理策略，例如使用相同的日志格式、异常处理流程和错误代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试和验证&lt;/strong>：对责任链中的异常处理机制进行充分的测试，包括单元测试和集成测试，确保在各种异常情况下都能正常工作。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这些方法，可以确保责任链中的异常处理既透明又一致，从而提高系统的健壮性和可维护性。&lt;/p>
&lt;h2 id="9在设计异常处理策略时有哪些常见的错误或者陷阱我需要避免">9.在设计异常处理策略时，有哪些常见的错误或者陷阱我需要避免？
&lt;/h2>&lt;p>在设计异常处理策略时，确实存在一些常见的错误和陷阱，以下是你应该避免的几点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>捕获所有异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>避免使用一个通用的 &lt;code>catch&lt;/code> 块来捕获所有类型的异常。这样做会掩盖错误的本质，使得调试变得困难，并且可能会隐藏一些不应该被忽略的错误。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>忽略异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>不要忽略或不处理捕获到的异常。如果一个异常被捕获，应该采取适当的措施，如记录日志、清理资源或向上层抛出更具体的异常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>过度使用异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>异常应该用于处理非正常的情况，而不是正常的程序流程控制。不要使用异常来代替正常的程序逻辑，如使用异常来控制循环或条件分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不恰当的异常类型&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>抛出的异常应该是合适的类型，能够准确描述错误情况。避免抛出过于通用的异常，如 &lt;code>Exception&lt;/code> 或 &lt;code>Throwable&lt;/code>，而应该使用更具体的异常类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不清晰的错误信息&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当抛出异常时，应该提供清晰和详细的错误信息，这有助于调试和错误追踪。避免抛出空的或含糊不清的异常信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源泄露&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在异常处理中，确保所有分配的资源（如文件句柄、数据库连接、网络连接等）在发生异常时都能被正确释放，避免资源泄露。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不恢复状态&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在捕获异常后，应该尽可能恢复系统到一个安全和一致的状态。例如，在数据库操作中，如果发生异常，应该确保事务被回滚。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不记录异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于捕获的异常，应该记录足够的信息，包括异常类型、堆栈跟踪和可能的错误上下文。这对于事后分析和问题解决非常重要。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不进行异常的适当转换&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当捕获一个异常并需要抛出另一个异常时，应该适当地转换异常，而不是直接抛出原始异常，这样可以避免暴露实现细节。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不测试异常处理代码&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>异常处理代码应该被包含在测试中。确保你的异常处理逻辑能够正确处理预期的异常情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不一致的异常处理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在整个应用程序中，应该保持一致的异常处理策略。这包括异常的捕获、处理和抛出方式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不处理外部库的异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当使用外部库或框架时，应该了解它们可能抛出的异常，并在应用程序中适当地处理这些异常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过避免这些常见的错误和陷阱，你可以设计出一个健壮且有效的异常处理策略，提高应用程序的稳定性和可维护性。&lt;/p>
&lt;h2 id="10在编写异常处理代码时有哪些最佳实践可以遵循">10.在编写异常处理代码时，有哪些最佳实践可以遵循？
&lt;/h2>&lt;p>在编写异常处理代码时，遵循以下最佳实践可以帮助你更好地管理异常，确保代码的健壮性和可维护性：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>精确捕获异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>尽可能捕获具体的异常类型，而不是通用的 &lt;code>Exception&lt;/code> 类。这有助于针对不同类型的异常采取适当的处理措施。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免空的 &lt;code>catch&lt;/code> 块&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>不要仅仅捕获异常而不做任何处理。如果没有必要处理特定的异常，不如不捕获它，让上层代码或默认的异常处理器来处理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用finally块或try-with-resources语句&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保在 &lt;code>finally&lt;/code> 块中释放资源，或者在Java 7及以上版本中使用try-with-resources语句自动管理资源。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不要在finally块中忽略异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在 &lt;code>finally&lt;/code> 块中，不要忽略或吞没异常。如果必须在 &lt;code>finally&lt;/code> 块中抛出异常，确保它不是由方法调用产生的新异常，否则会覆盖原始异常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提供有用的错误信息&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当抛出异常时，提供清晰和详细的错误消息。如果可能，包括错误代码、用户提示信息和可能的解决方案。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不要使用异常进行流程控制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>异常应该用于处理非正常情况，而不是正常的程序流程控制。不要使用异常来代替if-else语句。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>记录异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在捕获异常时，记录足够的信息，包括异常类型、堆栈跟踪和上下文信息，以便于调试和监控。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>恢复或回滚状态&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在捕获异常后，尽可能恢复系统到一个安全和一致的状态，或者回滚到操作前的状态。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>封装和转换异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当捕获一个异常并需要抛出另一个异常时，封装原始异常的信息，或者转换为更具体的异常类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试异常处理代码&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保对异常处理代码进行充分的测试，包括单元测试和集成测试，以验证异常处理逻辑的正确性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保持异常处理的一致性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在整个应用程序中，保持异常处理策略的一致性，包括异常的捕获、处理和抛出方式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>处理第三方库的异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>了解并妥善处理第三方库可能抛出的异常，确保它们不会破坏应用程序的稳定性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免异常链中的循环引用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在封装或转换异常时，避免创建循环引用，这可能会导致内存泄露。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用自定义异常&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为特定的错误条件创建自定义异常类，这样可以提供更清晰的错误处理逻辑和更好的API设计。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>考虑异常的可见性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>仅向可能需要知道异常发生的代码层公开异常。例如，不要在API的公共方法签名中抛出实现细节的异常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过遵循这些最佳实践，你可以确保异常处理代码既有效又高效，同时提高应用程序的整体质量和用户体验。&lt;/p>
&lt;h2 id="11在进行错误处理机制的测试时有哪些常见的测试场景和测试方法">11.在进行错误处理机制的测试时，有哪些常见的测试场景和测试方法？
&lt;/h2>&lt;p>在进行错误处理机制的测试时，以下是一些常见的测试场景和测试方法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>测试环境设置&lt;/strong>：根据软件测试技术设置测试环境，确保测试过程能够顺利进行。这包括计划测试并确保被测试系统包含较少的重要数据，因为测试期间可能会出现系统崩溃问题 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>生成测试用例&lt;/strong>：创建可能引发错误的不同测试用例。例如，如果软件操作在分数上，则将分数的分母设置为零。测试用例的生成与开发团队有关，因为不了解内部代码就无法设计测试用例 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>执行测试用例&lt;/strong>：在生成测试用例后，开始实际的测试过程。这包括运行程序并使用生成的测试用例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>结果和分析&lt;/strong>：执行测试用例后，分析其结果。包括检查生成测试用例的预期输出的不一致性。程序可能会进入无限循环，导致软件失败 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>重新测试&lt;/strong>：如果测试失败，则在分析后再次执行所有上述步骤来测试系统。它还包括使用最近生成的新测试用例进行系统测试 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试异常捕获&lt;/strong>：确保在每个处理器中使用 &lt;code>try-catch&lt;/code> 块来捕获可能发生的异常，并根据需要处理或将异常传递给链中的下一个处理器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试资源清理&lt;/strong>：在捕获异常后，确保进行适当的资源清理工作，以防止资源泄漏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试异常链&lt;/strong>：在封装或转换异常时，确保不会创建循环引用，这可能会导致内存泄露。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试日志记录&lt;/strong>：确保在捕获异常时记录足够的信息，包括异常类型、堆栈跟踪和上下文信息，以便于调试和监控。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试客户端错误处理&lt;/strong>：客户端代码应该准备好处理可能从责任链抛出的异常，这可能包括为用户提供错误信息或执行其他恢复操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试异常处理的透明性和一致性&lt;/strong>：确保所有处理器使用相同的异常处理策略，例如使用相同的日志格式、异常处理流程和错误代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试自定义异常&lt;/strong>：为特定的错误条件创建自定义异常类，这样可以提供更清晰的错误处理逻辑和更好的API设计。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这些测试场景和方法，可以确保错误处理机制在各种异常情况下都能正常工作，提高应用程序的稳定性和可靠性。&lt;/p>
&lt;h2 id="12在测试错误处理机制时如何确保测试用例的覆盖面足够全面">12.在测试错误处理机制时，如何确保测试用例的覆盖面足够全面？
&lt;/h2>&lt;p>确保测试错误处理机制时测试用例的覆盖面足够全面，可以遵循以下最佳实践：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>理解错误处理逻辑&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在编写测试用例之前，彻底理解应用程序的错误处理逻辑，包括可能抛出的异常类型、错误处理路径、资源清理逻辑等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>边界值分析&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>设计测试用例以检查边界条件，这些往往是错误和异常的常见来源。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>等价类划分&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将输入数据划分为有效的和无效的等价类，并为每个等价类设计测试用例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常场景覆盖&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>识别所有可能的异常场景，并为每种场景设计测试用例，包括但不限于网络故障、数据格式错误、资源不足、权限问题等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用自动化工具&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用自动化测试工具来生成测试用例，这些工具可以帮助识别代码中未被测试覆盖的部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>集成测试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>进行集成测试以确保组件间的错误处理逻辑能够协同工作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>压力测试和负载测试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过压力测试和负载测试来模拟系统在高负载下的错误处理能力。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>负测试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>特别设计测试用例来验证系统对错误输入的处理能力，例如非法参数、异常数据类型等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常链测试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>测试异常链，即一个异常导致另一个异常的情况，确保系统能够正确处理异常链。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码覆盖工具&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用代码覆盖工具来检查测试用例是否覆盖了所有的错误处理代码路径。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模拟和桩&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用模拟对象和桩来模拟外部依赖项，并测试错误处理逻辑。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续集成&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在持续集成（CI）流程中包含错误处理测试，确保每次代码提交都经过测试。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>探索性测试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>结合探索性测试来发现未被自动化测试覆盖的错误处理场景。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用户反馈&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>利用用户反馈来发现实际使用中的错误处理问题，并根据这些反馈设计测试用例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>回归测试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在每次修改错误处理逻辑后进行回归测试，确保修改没有引入新的问题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文档和注释&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>检查错误处理代码的文档和注释，确保测试用例覆盖了所有文档化的错误处理逻辑。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过上述方法，可以确保测试用例覆盖各种可能的错误情况，从而提高错误处理机制的健壮性和可靠性。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Command Pattern</title><link>https://wesigj.github.io/p/design-pattern-command-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-command-pattern/</guid><description>&lt;h1 id="设计模式-命令模式-command-pattern">设计模式-命令模式-Command Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>命令模式（Command Pattern）是一种行为设计模式&lt;/li>
&lt;li>它将一个请求封装为一个对象，从而允许用户使用不同的请求、队列或日志请求来参数化其他对象&lt;/li>
&lt;li>命令模式也支持可撤销的操作&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1命令模式command-pattern">1.命令模式（Command Pattern）
&lt;/h2>&lt;p>命令模式（Command Pattern）是一种行为设计模式，它将一个请求封装为一个对象，从而允许用户使用不同的请求、队列或日志请求来参数化其他对象。命令模式也支持可撤销的操作。它通常包含以下角色：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Command（命令接口）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义命令的接口，声明执行操作的方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ConcreteCommand（具体命令）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>实现命令接口，对应于具体的行为和接收者的绑定。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Client（客户端）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>创建具体的命令对象，并设置其接收者。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Invoker（调用者）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>要求命令对象执行请求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Receiver（接收者）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>知道如何实施与执行一个请求相关的操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>命令模式的主要优点包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>解耦&lt;/strong>：命令模式将发起操作的对象（客户端）与执行操作的对象（接收者）解耦。&lt;/li>
&lt;li>&lt;strong>扩展性&lt;/strong>：可以较容易地新增Command类来扩展新的命令，而无需修改已有代码。&lt;/li>
&lt;li>&lt;strong>复合命令&lt;/strong>：可以将多个命令组织成复合命令（如宏命令）。&lt;/li>
&lt;li>&lt;strong>支持撤销&lt;/strong>：可以实现命令的撤销和重做功能。&lt;/li>
&lt;/ul>
&lt;p>命令模式的典型应用场景包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>宏命令&lt;/strong>：将一系列命令组合成一个宏命令。&lt;/li>
&lt;li>&lt;strong>按钮和菜单项&lt;/strong>：在GUI应用程序中，按钮和菜单项的点击事件可以封装为命令对象。&lt;/li>
&lt;li>&lt;strong>事务管理&lt;/strong>：在需要支持事务撤销和重做的系统中，命令模式可以捕获所有必要的信息来实现这些功能。&lt;/li>
&lt;/ul>
&lt;p>以下是一个简单的C++实现示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// The Command interface
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// A ConcreteCommand
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Light&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">On&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Light is on&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Off&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Light is off&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SwitchOnCommand&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Light&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SwitchOnCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Light&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">light&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">light&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">On&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">light&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Off&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SwitchOffCommand&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Light&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SwitchOffCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Light&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">light&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">light&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Off&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">light&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">On&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// The Invoker
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">RemoteControl&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">StoreAndExecute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Execute&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">back&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Light&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">light&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Light&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RemoteControl&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">remote&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RemoteControl&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">switchOn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SwitchOnCommand&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">light&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">switchOff&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SwitchOffCommand&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">light&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">remote&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">StoreAndExecute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">switchOn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">remote&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">StoreAndExecute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">switchOff&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">remote&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">remote&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">remote&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>Light&lt;/code> 是接收者，&lt;code>SwitchOnCommand&lt;/code> 和 &lt;code>SwitchOffCommand&lt;/code> 是具体命令，&lt;code>RemoteControl&lt;/code> 是调用者。客户端创建了开关灯的命令，并由遥控器执行。同时，遥控器还记录了命令的历史，允许撤销操作。&lt;/p>
&lt;h2 id="2命令模式优缺点">2.命令模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>单一职责原则。 你可以解耦触发和执行操作的类。&lt;/li>
&lt;li>开闭原则。 你可以在不修改已有客户端代码的情况下在程序中创建新的命令。&lt;/li>
&lt;li>你可以实现撤销和恢复功能。&lt;/li>
&lt;li>你可以实现操作的延迟执行。&lt;/li>
&lt;li>你可以将一组简单命令组合成一个复杂命令。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>代码可能会变得更加复杂， 因为你在发送者和接收者之间增加了一个全新的层次。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3命令模式在实际开发中有哪些常见的应用场景">3.命令模式在实际开发中有哪些常见的应用场景？
&lt;/h2>&lt;p>命令模式在实际开发中的应用场景非常广泛，它可以帮助将请求发送者和接收者解耦，同时提供额外的功能，如日志记录、事务处理和支持撤销操作。以下是一些常见的应用场景：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>图形用户界面（GUI）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在GUI应用程序中，命令模式可以用来封装用户的动作，如点击按钮、选择菜单项等。每个动作都可以通过一个命令对象来表示，这些命令对象可以被触发器（如按钮）调用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>事务处理系统&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在需要支持事务撤销和重做的系统中，命令模式可以捕获执行操作所需的所有信息，允许系统在需要时回滚到之前的状态。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>宏命令&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>可以将一系列命令组合成一个宏命令，以便一次性执行多个操作。这在文本编辑器、图形编辑器和其他需要宏功能的应用程序中非常有用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络应用程序&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在客户端-服务器架构中，命令模式可以用来封装客户端请求，将请求序列化为命令对象，然后发送到服务器端执行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏开发&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在游戏中，玩家的每个动作（如移动、跳跃、攻击）都可以被视为一个命令。命令模式可以用来管理和调度这些动作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定时任务和计划任务&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>命令模式可以用来封装定时任务或计划任务的操作，允许系统在特定时间执行这些任务。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>硬件控制系统&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在嵌入式系统或智能家居系统中，命令模式可以用来控制硬件设备，如开关灯、调节温度等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>权限控制系统&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在需要细粒度权限控制的系统中，命令模式可以用来封装权限检查逻辑，确保只有具备相应权限的用户才能执行特定操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据库操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在数据库应用程序中，命令模式可以用来封装SQL命令或存储过程调用，使得数据库操作更加灵活和可管理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设计模式组合&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>命令模式可以与其他设计模式结合使用，如组合模式、策略模式等，以实现更复杂的功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>远程过程调用（RPC）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在RPC系统中，命令模式可以用来封装远程调用的请求，允许客户端像调用本地方法一样调用远程服务。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>命令行工具&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在命令行工具中，命令模式可以用来解析和执行用户输入的命令。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过这些应用场景，命令模式提供了一种灵活和可扩展的方式来封装和调度操作，使得代码更加清晰和易于维护。&lt;/p>
&lt;h2 id="4如何用命令模式实现一个撤销功能">4.如何用命令模式实现一个撤销功能？
&lt;/h2>&lt;p>实现撤销功能是命令模式的一个典型应用。撤销功能允许用户回退到之前的状态，这在许多应用程序中都非常有用，如文本编辑器、图形编辑器和游戏等。以下是使用命令模式实现撤销功能的步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义命令接口&lt;/strong>：
创建一个命令接口，它包含执行操作的方法（如 &lt;code>Execute&lt;/code>）和撤销操作的方法（如 &lt;code>Undo&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建具体命令&lt;/strong>：
为每个可撤销的操作创建具体的命令类，实现命令接口。这些类将包含执行操作和撤销操作的逻辑。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DrawCommand&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Canvas&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">canvas&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 假设是绘制的线条或形状的点集
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DrawCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Canvas&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">canvas&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="n">canvas&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">canvas&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">canvas&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">canvas&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Erase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建接收者&lt;/strong>：
创建一个接收者类，它知道如何执行与请求相关的操作。在上面的例子中，&lt;code>Canvas&lt;/code> 类是接收者，它知道如何绘制和擦除图形。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Canvas&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">Draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 绘制图形的逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Erase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 擦除图形的逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建调用者&lt;/strong>：
创建一个调用者类，它负责执行命令。调用者维护一个命令的历史记录，以便可以执行撤销操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CommandInvoker&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">StoreAndExecute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Execute&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端代码&lt;/strong>：
在客户端代码中，创建命令对象并将其传递给调用者。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Canvas&lt;/span> &lt;span class="n">canvas&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CommandInvoker&lt;/span> &lt;span class="n">invoker&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建并执行命令
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">drawCmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DrawCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">canvas&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* 点集 */&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">invoker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StoreAndExecute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">drawCmd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 撤销命令
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">invoker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 清理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">drawCmd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>在这个例子中，&lt;code>DrawCommand&lt;/code> 是一个具体命令，它知道如何让 &lt;code>Canvas&lt;/code> 接收者执行绘制操作。当用户想要撤销操作时，&lt;code>CommandInvoker&lt;/code> 调用命令的 &lt;code>Undo&lt;/code> 方法，命令对象则调用 &lt;code>Canvas&lt;/code> 的 &lt;code>Erase&lt;/code> 方法来擦除之前的绘制。&lt;/p>
&lt;p>通过这种方式，命令模式不仅将请求的发起者和执行者解耦，而且还支持撤销操作，使得用户可以回退到之前的状态。这种模式还可以很容易地扩展，以支持重做（redo）操作，只需在调用者中添加一个向前的命令历史记录即可。&lt;/p>
&lt;h2 id="5如何为命令模式中的命令接口添加参数传递功能">5.如何为命令模式中的命令接口添加参数传递功能？
&lt;/h2>&lt;p>在命令模式中，为了向命令接口添加参数传递功能，可以在命令接口中定义一个或多个参数。这些参数可以在命令对象被创建时传递，并在执行操作时使用。以下是如何实现这一点的步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>修改命令接口&lt;/strong>：
在命令接口中添加一个或多个参数，这些参数将用于执行命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建具体命令&lt;/strong>：
在具体命令类中，实现命令接口，并在 &lt;code>Execute&lt;/code> 和 &lt;code>Undo&lt;/code> 方法中使用传递的参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">OpenFileCommand&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FileManager&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fileManager&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">fileName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">OpenFileCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FileManager&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">manager&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="n">fileManager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">manager&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">fileName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fileManager&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fileName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fileManager&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CloseFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fileName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建接收者&lt;/strong>：
接收者类将包含实际执行操作的方法，这些方法可以接受命令对象传递的参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">FileManager&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">OpenFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 打开文件的逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">CloseFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 关闭文件的逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建调用者&lt;/strong>：
调用者类负责执行命令，并将参数传递给命令对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CommandInvoker&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">StoreAndExecute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端代码&lt;/strong>：
在客户端代码中，创建命令对象时传递参数，并执行命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FileManager&lt;/span> &lt;span class="n">fileManager&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CommandInvoker&lt;/span> &lt;span class="n">invoker&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建命令对象并传递参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">openCmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">OpenFileCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fileManager&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;example.txt&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">invoker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StoreAndExecute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">openCmd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;read&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 假设 &amp;#34;read&amp;#34; 是打开文件的模式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 撤销命令
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">invoker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;read&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 清理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">openCmd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>在这个例子中，&lt;code>OpenFileCommand&lt;/code> 是一个具体命令，它接受一个文件名和打开模式作为参数。当命令被执行时，它将这些参数传递给 &lt;code>FileManager&lt;/code> 的 &lt;code>OpenFile&lt;/code> 方法。同样，撤销操作也会传递相应的参数。&lt;/p>
&lt;p>通过这种方式，命令模式允许你灵活地向命令对象传递所需的参数，并在执行和撤销操作时使用这些参数。这使得命令模式非常适用于需要传递复杂参数或多个参数的场景。&lt;/p>
&lt;h2 id="6在gui应用程序中如何使用命令模式来提高用户交互的效率">6.在GUI应用程序中，如何使用命令模式来提高用户交互的效率？
&lt;/h2>&lt;p>在GUI（图形用户界面）应用程序中，命令模式可以提高用户交互的效率，因为它将用户的动作（如点击按钮、选择菜单项等）与执行的动作解耦，并且允许用户撤销和重做操作。以下是如何在GUI应用程序中使用命令模式的步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义命令接口&lt;/strong>：
创建一个命令接口，通常包含 &lt;code>Execute&lt;/code>、&lt;code>Undo&lt;/code> 和可能的 &lt;code>Redo&lt;/code> 方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Redo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建具体命令类&lt;/strong>：
为每个用户动作创建具体的命令类，实现命令接口。这些命令对象将封装与用户动作相关的所有信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SaveCommand&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TextEditor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">editor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SaveCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TextEditor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">editor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">editor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">editor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">editor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Save&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* 保存操作通常不需要撤销 */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Redo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">Execute&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建接收者类&lt;/strong>：
接收者类是实际执行命令的类，它提供了命令对象需要调用的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TextEditor&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">Save&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 保存文档的逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... 其他方法 ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建调用者类&lt;/strong>：
调用者类负责接收用户输入并执行相应的命令。它通常包含一个命令历史列表，用于撤销和重做操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MenuBar&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TextEditor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">editor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">currentCommand&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MenuBar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TextEditor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">editor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">editor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">editor&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">currentCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">ExecuteCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">currentCommand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">currentCommand&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Execute&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">currentCommand&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">currentCommand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">currentCommand&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">currentCommand&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Redo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">currentCommand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">currentCommand&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Redo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>将命令对象与用户界面元素绑定&lt;/strong>：
在GUI中，将命令对象与按钮、菜单项或其他用户界面元素绑定。当用户与这些元素交互时，相应的命令对象被执行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 假设有一个SaveButton和SaveMenuItem
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">SaveButton&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SaveCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">editor&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SaveMenuItem&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SaveCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">editor&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现撤销和重做功能&lt;/strong>：
在调用者类中实现撤销和重做功能，允许用户回退和重新执行最近的操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在用户点击撤销按钮时调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MenuBar&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在用户点击重做按钮时调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MenuBar&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Redo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端代码&lt;/strong>：
在客户端代码中，创建命令对象并将其与用户界面元素关联。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TextEditor&lt;/span> &lt;span class="n">editor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MenuBar&lt;/span> &lt;span class="n">menuBar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">editor&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建命令对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">saveCmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SaveCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">editor&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 绑定命令对象到用户界面元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 执行命令
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">menuBar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ExecuteCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">saveCmd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 撤销命令
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">menuBar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 重做命令
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">menuBar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Redo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 清理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">saveCmd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>通过这种方式，命令模式使得GUI应用程序能够以一种灵活和可扩展的方式来处理用户操作，同时提供了撤销和重做功能，从而提高了用户交互的效率和用户体验。&lt;/p>
&lt;h2 id="7如何确保在gui应用程序中正确地实现撤销和重做功能">7.如何确保在GUI应用程序中正确地实现撤销和重做功能？
&lt;/h2>&lt;p>要确保在GUI应用程序中正确地实现撤销和重做功能，可以遵循以下步骤和最佳实践：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用命令模式&lt;/strong>：命令模式是实现撤销和重做功能的核心。每个用户操作都封装为一个命令对象，这些对象包含执行操作所需的所有信息以及撤销和重做操作的方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>命令接口扩展&lt;/strong>：扩展命令接口以支持撤销和重做操作。通常，命令接口会包含 &lt;code>Execute&lt;/code>、&lt;code>Undo&lt;/code> 和 &lt;code>Redo&lt;/code> 方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>管理命令历史&lt;/strong>：创建一个命令历史管理器来管理命令历史，包括撤销和重做的命令栈。当执行操作时，将命令推入撤销栈；当撤销操作时，从撤销栈中弹出命令并执行撤销，同时将命令推入重做栈；当重做操作时，从重做栈中弹出命令并执行重做，同时将命令推回撤销栈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>具体命令实现&lt;/strong>：为每个具体操作创建命令类，实现命令接口，并在其中实现执行、撤销和重做逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>调用者和接收者&lt;/strong>：创建调用者类来执行命令，调用者通常包含一个命令引用。创建接收者类来实际执行与命令相关的操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>集成到GUI&lt;/strong>：将命令对象与GUI元素（如按钮、菜单项等）绑定，确保用户交互能够触发相应的命令执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试和验证&lt;/strong>：对撤销和重做功能进行充分的测试，包括单元测试和集成测试，确保在各种操作场景下都能正确地撤销和重做。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用户界面反馈&lt;/strong>：在用户界面中提供清晰的反馈，如禁用已撤销的操作的重做按钮，或者在状态栏中显示当前的撤销和重做状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能优化&lt;/strong>：考虑到撤销和重做操作可能会对性能产生影响，特别是在处理大量数据时，需要进行性能优化，如使用快照、差异记录等技术。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常处理&lt;/strong>：确保在执行命令时妥善处理异常，避免因异常而导致命令历史不一致。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过遵循这些步骤和最佳实践，可以确保在GUI应用程序中实现一个健壮且用户友好的撤销和重做功能。&lt;/p>
&lt;h2 id="8命令模式在事务处理系统中是如何实现事务的撤销和重做的">8.命令模式在事务处理系统中是如何实现事务的撤销和重做的？
&lt;/h2>&lt;p>在事务处理系统中，命令模式可以通过以下方式实现事务的撤销和重做功能：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义命令接口&lt;/strong>：创建一个命令接口，它包含 &lt;code>Execute&lt;/code>、&lt;code>Undo&lt;/code> 和 &lt;code>Redo&lt;/code> 方法。这些方法分别用于执行命令、撤销操作和重做操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建具体命令类&lt;/strong>：为系统中的每个操作创建具体的命令类，这些类实现命令接口，并在其中封装接收者对象和执行操作所需的所有信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现接收者类&lt;/strong>：接收者类是实际执行命令操作的对象。它包含与命令相关的业务逻辑，并提供必要的方法来执行操作和撤销操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建调用者类&lt;/strong>：调用者类负责接收命令对象，并在适当的时候执行命令。它通常包含一个命令历史列表，用于记录执行过的命令，以便进行撤销和重做。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>管理命令历史&lt;/strong>：使用两个栈（或其他数据结构）来管理命令历史，一个用于撤销操作的命令历史，另一个用于重做操作的命令历史。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>执行命令&lt;/strong>：当用户执行一个操作时，调用者对象创建一个具体命令对象，并通过调用其 &lt;code>Execute&lt;/code> 方法来执行操作。执行后，命令对象被推入撤销栈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>撤销操作&lt;/strong>：当需要撤销操作时，调用者对象从撤销栈中弹出最顶层的命令对象，并调用其 &lt;code>Undo&lt;/code> 方法。如果撤销成功，该命令对象被推入重做栈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>重做操作&lt;/strong>：当需要重做操作时，调用者对象从重做栈中弹出最顶层的命令对象，并调用其 &lt;code>Redo&lt;/code> 方法。如果重做成功，该命令对象被推回撤销栈。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这种方式，命令模式不仅支持事务的撤销和重做，还提供了一种灵活的方式来管理和执行系统中的操作。这种模式使得每个操作都可以独立地被控制，同时保持了系统的灵活性和可维护性。&lt;/p>
&lt;h2 id="9命令模式在多线程环境下如何保证操作的原子性">9.命令模式在多线程环境下如何保证操作的原子性？
&lt;/h2>&lt;p>在C++中，命令模式的原子性通常可以通过以下方式来保证：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>互斥锁（Mutex）&lt;/strong>：
使用互斥锁是确保多线程环境下操作原子性的常用方法。在命令的执行方法中加锁，确保同一时间只有一个线程可以执行该命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">mtx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... 其他成员 ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... 执行命令 ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... 撤销命令 ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>原子操作&lt;/strong>：
对于简单的数据类型，可以使用C++11引入的原子类型，如 &lt;code>std::atomic&lt;/code>，来保证操作的原子性。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;atomic&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CounterCommand&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">increment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fetch_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_relaxed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">decrement&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fetch_sub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_relaxed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>条件变量&lt;/strong>：
如果命令的执行依赖于某些条件，可以使用条件变量来同步线程。条件变量可以与互斥锁结合使用，以确保在条件满足时，只有一个线程执行命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;condition_variable&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConditionalCommand&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">mtx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">condition_variable&lt;/span> &lt;span class="n">cv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">condition_met&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">waitForCondition&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">]{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">condition_met&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... 执行命令 ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">signalCondition&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">condition_met&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">notify_one&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程局部存储&lt;/strong>：
如果命令的状态不需要在多个线程间共享，可以使用线程局部存储（&lt;code>thread_local&lt;/code> 关键字）来存储每个线程的命令状态，从而避免同步。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">thread_local&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">threadSpecificCounter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ThreadLocalCounterCommand&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">increment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">threadSpecificCounter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">decrement&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span>&lt;span class="n">threadSpecificCounter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>不可变对象&lt;/strong>：
设计命令和接收者对象为不可变对象，一旦创建就不能被修改。这样可以避免多线程环境下的并发修改问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>事务内存（Transactional Memory）&lt;/strong>：
某些编译器和硬件支持事务内存，这是一种高级的同步机制，可以简化并发编程。在C++中，这通常是通过第三方库实现的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免共享状态&lt;/strong>：
尽可能设计无状态或只有局部状态的命令对象，避免共享状态，从而减少需要同步的操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用锁自由的数据结构&lt;/strong>：
使用专门为并发设计的锁自由数据结构，这些数据结构通常使用复杂的算法来保证线程安全，而不需要传统的锁。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在实际应用中，应该根据具体的业务需求和性能要求选择合适的策略来保证命令模式在多线程环境下操作的原子性。通常，互斥锁是最直接和常用的方法，但在高并发环境下，可能需要考虑更高效的并发控制机制。&lt;/p>
&lt;h2 id="10如何使用c11的原子操作来实现线程安全的命令执行">10.如何使用C++11的原子操作来实现线程安全的命令执行？
&lt;/h2>&lt;p>在C++11中，&lt;code>std::atomic&lt;/code> 提供了一种机制来确保在多线程环境中对变量的操作是原子的，这意味着操作是不可分割的，不会被其他线程中断。这对于实现线程安全的命令执行至关重要。以下是如何使用 &lt;code>std::atomic&lt;/code> 来实现线程安全的命令执行的一些关键点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用原子类型&lt;/strong>：你可以将需要原子操作的变量声明为 &lt;code>std::atomic&lt;/code> 类型。例如，如果你有一个需要原子操作的整数计数器，你可以声明它为 &lt;code>std::atomic&amp;lt;int&amp;gt;&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>原子操作&lt;/strong>：&lt;code>std::atomic&lt;/code> 提供了一系列原子操作，如 &lt;code>store&lt;/code>、&lt;code>load&lt;/code>、&lt;code>exchange&lt;/code>、&lt;code>compare_exchange_weak&lt;/code> 和 &lt;code>compare_exchange_strong&lt;/code> 等。这些操作保证了在多线程环境中对变量的访问和修改是原子的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">store&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 原子地设置counter的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 原子地读取counter的值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存顺序&lt;/strong>：C++11中的原子操作还允许你指定内存顺序（&lt;code>memory_order&lt;/code>），这是对操作可见性的保证。例如，&lt;code>memory_order_seq_cst&lt;/code> 提供了顺序一致的内存顺序，而 &lt;code>memory_order_relaxed&lt;/code> 则提供了最弱的同步保证。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fetch_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_relaxed&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 原子地增加counter的值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免数据竞争&lt;/strong>：通过使用 &lt;code>std::atomic&lt;/code>，你可以避免多个线程之间的数据竞争，因为原子操作保证了在任何时候只有一个线程可以修改变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用原子指针&lt;/strong>：如果你需要对指针进行原子操作，&lt;code>std::atomic&lt;/code> 也支持指针类型。这对于实现线程安全的内存管理非常有用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用原子操作共享指针&lt;/strong>：从C++20开始，&lt;code>std::atomic&lt;/code> 支持 &lt;code>std::shared_ptr&lt;/code>，允许你原子地操作共享指针，这对于管理共享资源的生命周期非常有用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">sharedPtr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>通过上述方法，你可以确保在多线程环境中命令的执行是线程安全的，从而避免由于并发访问导致的数据不一致问题。使用 &lt;code>std::atomic&lt;/code> 是C++11提供的一种有效机制，用于在不使用互斥锁的情况下实现线程安全的编程。&lt;/p>
&lt;h2 id="11能否举例说明命令模式在游戏开发中是如何应用的">11.能否举例说明命令模式在游戏开发中是如何应用的？
&lt;/h2>&lt;p>命令模式（Command Pattern）是一种行为设计模式，它将一个请求封装为一个对象，从而允许用户使用不同的请求、队列或日志请求来参数化其他对象。命令模式也支持可撤销的操作。在游戏开发中，命令模式可以用于实现游戏操作的执行、撤销和重做等功能。下面是一个简单的示例，说明如何在游戏开发中应用命令模式。&lt;/p>
&lt;h3 id="111场景描述">11.1.场景描述
&lt;/h3>&lt;p>假设我们正在开发一个简单的回合制策略游戏，玩家可以在地图上移动单位。我们希望能够执行、撤销和重做这些移动操作。&lt;/p>
&lt;h3 id="112组件">11.2.组件
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Command 接口&lt;/strong>：定义执行操作的方法。&lt;/li>
&lt;li>&lt;strong>ConcreteCommand 类&lt;/strong>：实现 Command 接口，对应于具体的行为和接收者。&lt;/li>
&lt;li>&lt;strong>Client&lt;/strong>：创建具体的命令对象，并设置其接收者。&lt;/li>
&lt;li>&lt;strong>Invoker&lt;/strong>：要求命令对象执行请求。&lt;/li>
&lt;li>&lt;strong>Receiver&lt;/strong>：知道如何实施与执行一个请求相关的操作。&lt;/li>
&lt;/ol>
&lt;h3 id="113示例代码">11.3.示例代码
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Command 接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ConcreteCommand 类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MoveUnitCommand&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Unit&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">unit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">oldPositionX&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">oldPositionY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">newPositionX&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">newPositionY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MoveUnitCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Unit&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">unit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">newX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">newY&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="n">unit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unit&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">newPositionX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newX&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">newPositionY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newY&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 在构造函数中保存旧位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">oldPositionX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unit&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getX&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">oldPositionY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unit&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getY&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 执行移动操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">unit&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newPositionX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">newPositionY&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 撤销移动操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">unit&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">oldPositionX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">oldPositionY&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Receiver 类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Unit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">newX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">newY&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newX&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 更新单位在地图上的位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getX&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getY&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Invoker 类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Game&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">executeCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">undoCommand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commandHistory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Client 代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Game&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Unit&lt;/span> &lt;span class="n">unit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建一个命令对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Command&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">moveCommand&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MoveUnitCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">unit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 执行命令
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">executeCommand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">moveCommand&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 撤销命令
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">undoCommand&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 清理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">moveCommand&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="114应用解释">11.4.应用解释
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Command&lt;/strong>：定义了 &lt;code>execute&lt;/code> 和 &lt;code>undo&lt;/code> 方法的接口。&lt;/li>
&lt;li>&lt;strong>MoveUnitCommand&lt;/strong>：实现了 &lt;code>Command&lt;/code> 接口，记录了一个单位的移动操作。它保存了单位的旧位置和新位置，并提供了执行和撤销操作的方法。&lt;/li>
&lt;li>&lt;strong>Unit&lt;/strong>：表示游戏中的一个单位，具有移动的能力。&lt;/li>
&lt;li>&lt;strong>Game&lt;/strong>：作为 Invoker，管理命令的执行和撤销。它记录了命令的历史，以便可以撤销操作。&lt;/li>
&lt;li>&lt;strong>Client&lt;/strong>：创建具体的命令对象，并将其传递给游戏（Invoker）以执行。&lt;/li>
&lt;/ul>
&lt;p>通过使用命令模式，游戏可以灵活地添加新的命令类型，而不需要修改现有的游戏逻辑。同时，它也支持撤销和重做功能，提高了游戏的交互性和用户体验。&lt;/p>
&lt;h2 id="12如何确保命令模式在游戏开发中的性能和效率">12.如何确保命令模式在游戏开发中的性能和效率？
&lt;/h2>&lt;p>在游戏开发中，命令模式可以通过以下方式来确保性能和效率：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>减少对象创建和销毁&lt;/strong>：通过复用命令对象，减少在游戏循环中频繁创建和销毁对象的性能开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用对象池&lt;/strong>：对于命令对象，可以使用对象池（Object Pool）模式来管理，这样可以减少内存分配和回收的开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免过度的继承&lt;/strong>：命令模式可能会导致大量的类继承，这在某些情况下可能会影响性能。可以通过使用组合（Composition）来减少继承。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>合理使用命令队列&lt;/strong>：将命令对象存储在队列中，可以控制命令的执行顺序，同时也可以通过优先级队列来优化命令的执行顺序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少命令执行的复杂度&lt;/strong>：确保命令对象的 &lt;code>execute&lt;/code> 方法尽可能高效，避免在其中执行复杂的计算或者长时间的操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用多线程和并行处理&lt;/strong>：对于可以并行处理的命令，可以考虑使用多线程来执行，以提高游戏的响应速度和性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优化命令的存储结构&lt;/strong>：选择合适的数据结构来存储命令对象，比如使用数组、链表或者哈希表，根据命令的访问模式来优化存储结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少命令的依赖&lt;/strong>：尽量减少命令对象之间的依赖关系，这样可以降低系统的复杂度，提高系统的可维护性和性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用高效的同步机制&lt;/strong>：在多线程环境下，如果需要同步，可以使用轻量级的同步机制，如 &lt;code>std::atomic&lt;/code> 操作，来保证线程安全，而不是使用重量级的锁机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少命令的撤销/重做操作的开销&lt;/strong>：如果游戏支持撤销和重做功能，应该优化这些操作的性能，比如通过快照（Snapshot）或者命令日志的方式来实现，而不是每次都重新计算状态。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述方法，可以在游戏开发中有效地应用命令模式，同时确保游戏的性能和效率。&lt;/p>
&lt;h2 id="13命令模式在游戏开发中如何与事件驱动架构相结合">13.命令模式在游戏开发中如何与事件驱动架构相结合？
&lt;/h2>&lt;p>在游戏开发中，命令模式与事件驱动架构的结合可以通过以下方式实现：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>封装玩家操作为命令&lt;/strong>：游戏中玩家的每个动作，如移动、攻击、施法等，都可以封装为一个具体的命令对象。这些命令对象在被触发时执行相应的游戏逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>事件队列管理&lt;/strong>：游戏服务器可以使用一个事件队列来管理这些命令对象。当玩家发出动作时，客户端将请求转换为命令对象并发送给服务器，服务器将这些命令对象放入事件队列中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异步处理&lt;/strong>：服务器的事件循环可以从事件队列中取出命令对象并异步执行它们，这样可以保证游戏的实时响应性，并且在高并发场景下保持良好的性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>事件驱动的反馈&lt;/strong>：命令执行后可能会触发新的事件，例如，玩家攻击命中后触发伤害事件，这些事件可以进一步驱动游戏逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优先级管理&lt;/strong>：对于关键命令，如战斗操作，可以通过优先级队列确保它们能够快速执行，以保证游戏的流畅性和玩家体验。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>错误处理与调试&lt;/strong>：在异步和事件驱动的环境中，错误处理和调试可能会变得复杂。可以通过引入集中化的日志管理、分布式跟踪和全面的异常处理机制来帮助识别和解决问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用成熟框架&lt;/strong>：为了简化开发，可以使用现有的框架或工具来支持命令模式与事件驱动编程的结合，例如CQRS（Command Query Responsibility Segregation）模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能优化&lt;/strong>：在高并发场景中，可以通过多线程或协程来并发处理事件和命令，或者使用分布式消息队列来提高系统的吞吐量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>监控和调试工具&lt;/strong>：使用分布式追踪系统、集中化日志管理和性能监控工具来监控系统的性能指标，如事件处理时间和命令执行延迟。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述方式，命令模式与事件驱动架构的结合可以在游戏开发中实现高效的命令执行、灵活的事件处理和良好的系统性能。这种结合不仅适用于游戏开发，也适用于需要处理复杂业务逻辑和高并发的其他应用场景。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Composite Pattern</title><link>https://wesigj.github.io/p/design-pattern-composite-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-composite-pattern/</guid><description>&lt;h1 id="设计模式-组合模式-composite-pattern">设计模式-组合模式-Composite Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>组合模式（Composite Pattern）是一种结构型设计模式&lt;/li>
&lt;li>它主要用于将对象组合成树形结构，以表示“部分-整体”的层次关系&lt;/li>
&lt;li>以表示“部分-整体”的层次关系。这种模式使得用户可以统一地对待单个对象和组合对象&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1组合模式composite-pattern">1.组合模式（Composite Pattern）
&lt;/h2>&lt;p>组合模式（Composite Pattern）是一种结构型设计模式，它主要用于将对象组合成树形结构，以表示“部分-整体”的层次关系。这种模式使得用户可以统一地对待单个对象和组合对象。&lt;/p>
&lt;h3 id="11组合模式的主要角色包括">1.1.组合模式的主要角色包括
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>组件（Component）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义了组合中所有对象的一致操作方式或接口，可以是抽象类或接口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>叶节点（Leaf）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>表示组合中的末端对象，不包含子节点。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Composite&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>表示组合中的容器对象，可以包含子节点，同时也继承自组件接口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端（Client）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用组件接口与组合结构交互。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="12c实现示例">1.2.C++实现示例
&lt;/h3>&lt;p>首先，定义组件接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Component.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Operation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着，创建叶节点类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Leaf.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Component.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Leaf&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">Operation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 叶节点的操作实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，定义组合类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Composite.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Component.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Composite&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">children&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">component&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">children&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">component&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">component&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">children&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">erase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">children&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">component&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">children&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">GetChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">children&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Operation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 组合对象的操作实现，可能涉及到递归调用子节点的操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">child&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">children&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">child&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Operation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，客户端代码使用组合模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Leaf.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Composite.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Composite&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">leaf1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Leaf&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">leaf2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Leaf&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构建组合结构
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">Composite&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">leaf1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">((&lt;/span>&lt;span class="n">Composite&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">leaf2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 客户端使用组合结构
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Operation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 清理资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">leaf1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">leaf2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13组合模式的应用场景">1.3.组合模式的应用场景
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>文件系统&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>可以使用组合模式模拟文件系统，其中文件和文件夹可以组合成树形结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组织结构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>表示公司的组织结构，员工和部门可以组合成树形结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GUI组件&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在图形界面开发中，可以使用组合模式来构建窗口、菜单、按钮等组件的层次结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文档编辑器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>表示文档编辑器中的文本段落、列表、表格等元素的层次结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分布式系统&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>表示分布式系统中的节点和子网络的组合结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>组合模式提供了一种灵活的方式来管理层次结构中的对象，使得单个对象和组合对象可以统一处理。通过递归地操作子节点，可以在不知道具体对象类型的情况下执行复杂操作。&lt;/p>
&lt;h2 id="2组合模式优缺点">2.组合模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>你可以利用多态和递归机制更方便地使用复杂树结构。&lt;/li>
&lt;li>开闭原则。 无需更改现有代码， 你就可以在应用中添加新元素， 使其成为对象树的一部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>对于功能差异较大的类， 提供公共接口或许会有困难。 在特定情况下， 你需要过度一般化组件接口， 使其变得令人难以理解。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3组合模式应用场景">3.组合模式应用场景
&lt;/h2>&lt;p>组合模式（Composite Pattern）在实际开发中有许多应用场景，特别适合用于管理具有层次结构的数据。以下是一些常见的应用实例：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>文件浏览器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在文件浏览器中，可以使用组合模式来表示文件系统，其中文件夹和文件可以组合成树状结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组织结构管理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>企业的组织结构通常具有层次性，组合模式可以用来表示员工、团队、部门等元素的层级关系。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>权限控制系统&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在权限控制系统中，可以使用组合模式来管理不同级别的权限，其中权限可以继承自上一级权限。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文档编辑器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>文档编辑器中的文本段落、标题、列表、表格等可以视为组合模式中的组件，它们可以被统一处理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图形界面开发&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>GUI开发中的窗口、菜单、按钮、面板等控件可以组合成树状结构，方便管理和操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分布式系统设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>分布式系统中的节点和子网络可以构成一个层次结构，使用组合模式可以方便地管理这些节点。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>报表系统&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>报表系统中的报表项可以组合成复杂的报表结构，如表格、图表、文本等可以作为组合元素。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模型-视图-控制器（MVC）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在MVC架构中，视图（View）组件可以采用组合模式来构建，允许有多个层次的视图组件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工作流引擎&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>工作流中的步骤和流程可以构成一个层次结构，使用组合模式可以灵活地管理和执行工作流。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内容管理系统（CMS）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>CMS中的页面、文章、媒体等可以组合成树状结构，方便内容的组织和管理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>菜单系统&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>应用程序中的菜单项和子菜单可以构成一个层次结构，使用组合模式可以方便地添加、删除和修改菜单项。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>插件架构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>插件系统中的插件可以具有自己的子插件，形成层次结构，使用组合模式可以方便地管理和扩展插件功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>电子表格&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>电子表格中的单元格、行、列、工作表等可以视为组合模式中的组件，可以进行统一的操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>树状数据结构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>任何需要树状数据结构的场景，如XML/HTML解析、决策树、分类系统等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>组合模式通过将对象组合成树形结构，允许客户端对单个对象和组合对象使用相同的操作，从而简化了客户端代码，并提高了系统的灵活性和可扩展性。&lt;/p>
&lt;h2 id="4在实现组合模式时有哪些设计原则或最佳实践需要遵循">4.在实现组合模式时，有哪些设计原则或最佳实践需要遵循？
&lt;/h2>&lt;p>在实现组合模式时，遵循一些设计原则和最佳实践可以帮助确保代码的清晰性、可维护性和扩展性。以下是一些关键的设计原则和最佳实践：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>保持接口一致性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保叶节点（Leaf）和容器（Composite）对象都实现相同的接口或继承自同一个抽象类。这样，客户端可以统一对待它们。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>最小化组件复杂性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>尽量简化组件的接口，只包含必要的操作。避免在组件接口中引入与组合逻辑无关的方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>递归设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在容器对象中，对于需要遍历子组件的操作，使用递归来实现。这样可以使客户端代码更加简洁。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免循环引用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在构建组合结构时，注意避免创建循环引用，这可能会导致内存泄漏或其他问题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>考虑线程安全&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果组合模式将在多线程环境中使用，确保组合结构的线程安全性，特别是在修改组合结构时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用深复制和浅复制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>根据需要决定是使用深复制还是浅复制来复制组合对象。深复制会复制整个组合结构，而浅复制只复制引用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>管理资源&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保正确管理组合对象中的资源，特别是在删除组合对象时，需要递归地释放所有子组件的资源。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定义清晰的添加和删除操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>提供清晰的方法来添加和删除子组件，确保组合结构的完整性和一致性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用组合模式的适用场景&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>只在确实需要表示部分-整体层次结构时使用组合模式。如果不需要这种层次结构，使用其他模式可能更合适。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免过度使用组合模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>不要仅仅为了使用设计模式而使用组合模式。确保它确实是解决特定问题的最佳选择。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编写单元测试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为组合模式的各个组件编写单元测试，确保它们的行为符合预期。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文档和注释&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为组合模式的接口和实现提供清晰的文档和注释，帮助其他开发者理解和使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>考虑使用现成的库或框架&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些情况下，可以考虑使用现成的库或框架来实现组合模式，以减少开发工作量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保持扩展性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>设计组合模式时，考虑到未来可能的扩展，使得添加新的组件类型或修改现有组件时更加容易。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过遵循这些设计原则和最佳实践，可以实现一个健壮、灵活且易于维护的组合模式结构。&lt;/p>
&lt;h2 id="5如何使用组合模式来优化现有的系统架构">5.如何使用组合模式来优化现有的系统架构？
&lt;/h2>&lt;p>在实际项目中，组合模式（Composite Pattern）可以用于优化系统架构，特别是在需要处理具有层次结构的数据时。以下是一些应用组合模式来优化现有系统架构的方法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>树形结构数据管理&lt;/strong>：
当系统需要处理具有树形结构的数据，如文件系统或组织架构时，组合模式可以简化数据的管理。通过将树中的每个元素视为对象，无论是叶子节点还是分支节点，它们都实现相同的接口，使得遍历和操作树结构变得更加一致和简单 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>UI组件层次管理&lt;/strong>：
在图形用户界面（GUI）开发中，可以使用组合模式来管理控件的层次结构。这样，容器控件和单个控件可以统一处理，简化了布局管理和事件处理 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中间件和路由系统&lt;/strong>：
在Web框架或网络应用中，组合模式可以用来设计中间件和路由系统。通过将中间件和路由组织成树形结构，可以灵活地添加和配置中间件，同时保持代码的清晰和可维护性 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据驱动设计&lt;/strong>：
在数据驱动的设计中，组合模式可以用于构建灵活的数据模型。通过将数据组织成树形结构，可以方便地进行数据的动态加载和修改，从而提高应用程序的可扩展性和灵活性 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏开发中的组件系统&lt;/strong>：
在游戏开发中，组合模式可以与组件系统（ECS）结合使用，将游戏对象的行为和数据分离，以实现高效的性能和灵活的扩展 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>系统集成和扩展&lt;/strong>：
当需要对现有系统集成新功能或进行扩展时，组合模式可以提供一种灵活的方法来整合新旧系统。通过将新功能作为组合模式中的叶子节点或分支节点添加，可以轻松地扩展系统的功能 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文档编辑器&lt;/strong>：
在文档编辑器中，可以使用组合模式来管理文档的层次结构，如段落、标题、列表等。这样，可以统一地处理文档中的各种元素，无论是单个文本元素还是包含多个子元素的复杂结构 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>产品目录管理&lt;/strong>：
在电子商务平台中，产品目录往往具有复杂的层次结构。组合模式可以用于管理这些层次关系，使得添加、删除和查询产品操作更加高效和一致 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这些方法，组合模式可以帮助开发者构建更加模块化、灵活和易于维护的系统架构。在应用组合模式时，需要注意保持系统的透明性和安全性，同时遵循设计原则，如单一职责原则和开闭原则，以确保系统的可扩展性和可维护性。&lt;/p>
&lt;h2 id="6组合模式在处理动态添加或删除组合元素时有哪些挑战如何克服">6.组合模式在处理动态添加或删除组合元素时有哪些挑战，如何克服？
&lt;/h2>&lt;p>在使用组合模式处理动态添加或删除组合元素时，可能会遇到以下挑战以及相应的解决方案：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>透明性与安全性的平衡&lt;/strong>：
透明组合模式（所有组件类都有添加和删除方法）可能不安全，因为叶子节点实际上不能包含子节点。安全组合模式通过仅在容器类中实现添加和删除方法来避免这个问题，但这牺牲了一些透明性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能问题&lt;/strong>：
如果树形结构非常深或宽，递归操作可能会导致性能问题。可以通过优化算法、使用迭代器或缓存结果来提高性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程安全&lt;/strong>：
在多线程环境中，动态修改组合结构可能会引发并发问题。确保添加和删除操作是线程安全的，例如通过使用同步机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>维护树形结构的完整性&lt;/strong>：
在添加或删除节点时，需要维护树的层次结构和父子关系。这可能需要在添加或删除操作中进行额外的检查和调整。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>处理复杂约束&lt;/strong>：
当组合结构中的节点有特定的约束条件时（例如，某些节点不能包含特定类型的子节点），在添加或删除节点时需要进行额外的检查以满足这些约束。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免循环引用&lt;/strong>：
在添加节点时，需要确保不会产生循环引用，这可能会导致内存泄漏或其他问题。可以通过检查新添加的节点是否已经存在于树中来避免这种情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现灵活性&lt;/strong>：
组合模式允许客户端代码以统一的方式处理所有类型的节点，但在实现时可能需要更多的设计工作来确保灵活性和可扩展性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用访问者模式&lt;/strong>：
当需要对组合结构中的元素执行复杂操作时，可以使用访问者模式来分离算法和结构，从而简化客户端代码并提高可维护性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用迭代器模式&lt;/strong>：
当需要遍历组合结构时，可以使用迭代器模式来提供一种统一的遍历机制，无论组合结构的复杂性如何。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这些策略，可以有效地克服在使用组合模式时遇到的挑战，并确保系统能够在运行时灵活地管理其组件。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern creational patterns</title><link>https://wesigj.github.io/p/design-pattern-creational-patterns/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-creational-patterns/</guid><description>&lt;h1 id="设计模式-创建式模式-creational-patterns">设计模式-创建式模式-creational patterns
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;hr>
&lt;h2 id="1创建式模式creational-patterns">1.创建式模式（Creational Patterns）
&lt;/h2>&lt;p>创建式模式（Creational Patterns）是软件设计模式的一种，主要用于处理对象的创建过程，封装对象的实例化过程，以便更好地控制对象的创建。创建式模式隐藏了对象如何创建、组合和表示的复杂性，而不是直接暴露给客户端代码。以下是五种基本的创建式设计模式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>单例模式（Singleton Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保一个类只有一个实例，并提供一个全局访问点。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工厂方法模式（Factory Method Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法让类的实例化推迟到子类进行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>抽象工厂模式（Abstract Factory Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>创建相关或依赖对象的家族，而不需明确指定具体类。它提供一个接口，用于创建一系列相关或相互依赖的对象，而不需要指定它们具体的类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>生成器模式（Builder Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>用于创建一个复杂对象，同时允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原型模式（Prototype Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>每种创建式模式都有其特定的应用场景和优缺点，以下是它们的一些使用场景：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>单例模式&lt;/strong>：适用于需要全局只有一个实例的情况，如配置管理器、连接池等。&lt;/li>
&lt;li>&lt;strong>工厂方法模式&lt;/strong>：适用于需要根据不同条件创建不同实例的情况，如支付接口的实现。&lt;/li>
&lt;li>&lt;strong>抽象工厂模式&lt;/strong>：适用于需要创建产品族的情况，这些产品在结构上相关联，如不同操作系统的GUI组件。&lt;/li>
&lt;li>&lt;strong>生成器模式&lt;/strong>：适用于需要构建复杂对象，且对象的构建过程涉及多个步骤的情况，如构建一个包含多个部件的汽车。&lt;/li>
&lt;li>&lt;strong>原型模式&lt;/strong>：适用于创建新对象的成本较高，或者对象的创建过程需要高度的灵活性时，如图形界面的复制操作。&lt;/li>
&lt;/ul>
&lt;p>选择使用哪种创建式模式，需要根据实际的需求和上下文来决定。创建式模式有助于提高代码的可维护性、可读性和灵活性。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="./factory_method_mode/README.md" >工厂方法模式 factory_method_mode&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./abstract_factory/README.md" >抽象工厂模式 abstract_factory&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./builder_pattern/README.md" >生成器模式 builder_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./prototype_pattern/README.md" >原型模式 prototype_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./singleton_pattern/README.md" >单例模式 singleton_pattern&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern decorator_pattern</title><link>https://wesigj.github.io/p/design-pattern-decorator_pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-decorator_pattern/</guid><description>&lt;h1 id="设计模式-装饰模式-decorator_pattern">设计模式-装饰模式-decorator_pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>装饰模式（Decorator Pattern）是一种结构型设计模式&lt;/li>
&lt;li>它允许用户在不修改对象自身的基础上，向一个对象添加新的功能&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1装饰模式decorator-pattern">1.装饰模式（Decorator Pattern）
&lt;/h2>&lt;p>装饰模式（Decorator Pattern）是一种结构型设计模式，它允许用户在不修改对象自身的基础上，向一个对象添加新的功能。这种模式通过创建一个包装对象，也就是装饰者，来包裹实际对象。装饰者同实际对象有相同的接口，并持有一个指向实际对象的引用，在调用实际对象的方法前后，可以执行额外的功能。&lt;/p>
&lt;h3 id="11装饰模式的主要角色包括">1.1.装饰模式的主要角色包括
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Component（抽象构件）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义了一个接口，描述了可以动态添加的责任。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ConcreteComponent（具体构件）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义了一个具体类，也可以实现抽象构件的角色。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Decorator（抽象装饰者）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>抽象类，实现与抽象构件相同的接口，并持有一个抽象构件类型的成员变量，用于包装或链接一个构件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ConcreteDecorator（具体装饰者）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>具体类，实现抽象装饰者，通过实现接口方法，给构件添加额外的职责。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="12c实现示例">1.2.C++实现示例
&lt;/h3>&lt;p>首先，定义抽象构件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Component.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Operation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着，创建具体构件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ConcreteComponent.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Component.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteComponent&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">Operation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ConcreteComponent Operation&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，定义抽象装饰者：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Decorator.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Component.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Decorator&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">component&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">comp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">component&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">comp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Decorator&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">component&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Operation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">component&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">component&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Operation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来，创建具体装饰者：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ConcreteDecorator.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Decorator.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteDecorator&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Decorator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteDecorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">comp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">Decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">comp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Operation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Decorator&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Operation&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用被装饰者的方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 添加额外的行为
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Additional Behavior for ConcreteDecorator&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，客户端代码使用装饰模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ConcreteComponent.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ConcreteDecorator.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">component&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteComponent&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">component&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Operation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Component&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">decoratedComponent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteDecorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">component&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">decoratedComponent&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Operation&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 装饰后的行为
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">decoratedComponent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13装饰模式的应用场景">1.3.装饰模式的应用场景
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>增加职责&lt;/strong>：
当需要给对象动态地添加职责时，装饰模式提供了一种灵活的解决方案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>扩展类的功能&lt;/strong>：
当类的功能需要扩展，但又不想用继承的方式时，可以使用装饰模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态行为&lt;/strong>：
如果需要在运行时动态地给对象添加行为，装饰模式可以轻松实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>透明性&lt;/strong>：
装饰模式可以保持对客户端的透明性，即客户端无需知道对象是原始对象还是被装饰过的对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>灵活性&lt;/strong>：
装饰模式可以很容易地通过添加新的装饰者类来扩展系统的功能。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>装饰模式通过使用组合而非继承来扩展对象的功能，这使得系统更加灵活和可扩展。同时，它也遵循了开闭原则，即软件实体应该对扩展开放，对修改关闭。&lt;/p>
&lt;h2 id="2装饰模式优缺点">2.装饰模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>你无需创建新子类即可扩展对象的行为。&lt;/li>
&lt;li>你可以在运行时添加或删除对象的功能。&lt;/li>
&lt;li>你可以用多个装饰封装对象来组合几种行为。&lt;/li>
&lt;li>单一职责原则。 你可以将实现了许多不同行为的一个大类拆分为多个较小的类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>在封装器栈中删除特定封装器比较困难。&lt;/li>
&lt;li>实现行为不受装饰栈顺序影响的装饰比较困难。&lt;/li>
&lt;li>各层的初始化配置代码看上去可能会很糟糕。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3装饰模式应用场景">3.装饰模式应用场景
&lt;/h2>&lt;p>装饰模式（Decorator Pattern）在实际开发中的常见应用场景包括但不限于：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>GUI组件功能增强&lt;/strong>：
在图形用户界面（GUI）编程中，可以为按钮、文本框等组件动态添加如边框、颜色、工具提示等额外功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>日志记录和事务处理&lt;/strong>：
在需要对方法执行进行日志记录或事务处理的场景中，装饰模式可以动态地为方法调用添加日志记录或事务管理功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能监测&lt;/strong>：
在应用程序中，可以使用装饰模式为方法添加性能监测功能，以统计方法的执行时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缓存机制&lt;/strong>：
在需要缓存结果以提高性能的场景中，装饰模式可以为对象添加缓存功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全性控制&lt;/strong>：
在需要对资源访问进行权限检查的场景中，装饰模式可以为方法或对象添加安全性控制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络通信&lt;/strong>：
在网络编程中，装饰模式可以用于添加如压缩、加密、身份验证等网络通信的功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源管理&lt;/strong>：
在资源管理场景中，如文件操作或数据库操作，装饰模式可以用于添加资源的打开、关闭以及资源使用监控等功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原型模式的扩展&lt;/strong>：
与原型模式结合使用，可以创建具有新行为的深拷贝对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现策略模式的备用方案&lt;/strong>：
当需要在运行时动态改变对象的行为时，装饰模式可以作为策略模式的替代方案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现开闭原则&lt;/strong>：
在需要遵循开闭原则（对扩展开放，对修改关闭）的场景中，装饰模式允许在不修改现有代码的基础上扩展功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现享元模式&lt;/strong>：
与享元模式结合使用，装饰模式可以用于实现共享对象的特定行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中间件开发&lt;/strong>：
在开发中间件时，装饰模式可以用于动态地添加或替换中间件组件的功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Web开发&lt;/strong>：
在Web开发中，装饰模式可以用于动态地为Web页面元素添加样式、脚本或其他行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏开发&lt;/strong>：
在游戏开发中，装饰模式可以用于为游戏对象添加如动画效果、特殊能力等额外功能。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>装饰模式通过将对象包装在装饰者类中来动态地添加功能，这使得装饰者可以与原始对象无缝集成，同时保持高度的灵活性和可扩展性。&lt;/p>
&lt;h2 id="4在实际开发中如何决定何时使用装饰模式而不是其他设计模式">4.在实际开发中，如何决定何时使用装饰模式而不是其他设计模式？
&lt;/h2>&lt;p>在实际开发中，决定何时使用装饰模式（Decorator Pattern）而不是其他设计模式，可以根据以下几个关键点来考虑：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>动态扩展功能&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果需要在运行时动态地给对象添加额外的职责或行为，装饰模式是一个合适的选择。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>透明性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>装饰模式可以保持对客户端的透明性，即客户端无需知道对象是原始对象还是被装饰过的对象。如果需要保持接口的一致性，可以考虑使用装饰模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>灵活性和可扩展性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果系统需要高度的灵活性和可扩展性，装饰模式允许你通过添加新的装饰者类来扩展功能，而不是通过修改现有代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免类爆炸&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当使用继承来扩展功能时，可能会导致类的数量急剧增加（类爆炸）。装饰模式通过组合来扩展功能，可以减少类的数目。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单一职责原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果希望遵循单一职责原则，避免在一个类中包含多个功能，可以使用装饰模式将不同的功能分离到不同的装饰者类中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>与继承的比较&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>继承是一种静态的行为扩展方式，而装饰模式提供了一种动态的扩展方式。如果行为扩展是已知的且固定的，继承可能是更好的选择；如果行为扩展是动态的或不确定的，装饰模式更合适。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组合优于继承&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果遵循“组合优于继承”的设计原则，装饰模式通过组合来实现功能的扩展，而不是通过继承。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>开闭原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果希望系统对扩展开放，对修改关闭，装饰模式允许在不修改现有代码的基础上扩展功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免多层继承&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果使用继承会导致多层继承结构，这可能会使系统难以理解和维护。装饰模式可以避免这种情况，因为它通过组合来实现功能的扩展。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现策略模式的替代方案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当需要在运行时动态改变对象的行为时，装饰模式可以作为策略模式的替代方案。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果性能是一个关键因素，需要考虑装饰模式可能会引入的额外开销。在某些情况下，使用继承或其他模式可能更高效。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>团队熟悉度&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>考虑团队对不同设计模式的熟悉度和使用经验，选择团队更熟悉和更易于维护的模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>在决定使用装饰模式时，需要权衡上述因素，并根据具体的应用场景和设计需求来做出选择。装饰模式特别适合于需要动态、灵活地扩展对象功能的情况。&lt;/p>
&lt;h2 id="5装饰模式有什么问题">5.装饰模式有什么问题？
&lt;/h2>&lt;p>装饰模式在实际开发中可能会遇到以下常见问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>复杂性增加&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>装饰模式可能会导致系统中存在大量的装饰器类，特别是当有多个层次的装饰时。这可能会使得系统结构变得复杂，难以理解和维护。为了解决这个问题，应该只在确实需要的时候添加装饰器，并且保持装饰器的职责单一。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能问题&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>装饰模式通过包装对象来添加功能，这可能会导致性能上的开销，尤其是在装饰链很长的情况下。为了减少性能影响，应该优化装饰器的实现，避免不必要的包装，并且在设计时考虑性能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>过度使用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果不加限制地使用装饰模式，可能会导致装饰器类的数量急剧膨胀，这与设计模式的初衷相违背。应该在设计时仔细考虑是否真的需要装饰器来提供额外的功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>装饰顺序敏感&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些情况下，装饰器的执行顺序可能会影响对象的行为。这可能会导致难以预测的结果。为了解决这个问题，可以通过明确的顺序约定或者在设计时就考虑到执行顺序的影响。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>难以管理装饰链&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在复杂的系统中，维护一个清晰的装饰链可能会很困难。可以通过引入更多的结构化管理或者使用设计模式如工厂模式来创建和管理装饰链。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>装饰器的透明性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>装饰器应该对客户端透明，这意味着客户端代码应该能够在不知道具体装饰器的情况下使用装饰后的对象。如果装饰器的实现不够透明，可能会导致客户端代码需要针对不同的装饰器编写不同的逻辑。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>装饰器的复用性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>装饰器应该具有良好的复用性，以便可以在不同的上下文中重复使用。如果装饰器与特定的组件紧密耦合，可能会降低其复用性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>为了克服这些问题，应该在设计时仔细考虑装饰模式的应用场景，并且在实现时注意保持装饰器的简洁和透明性。同时，也应该考虑到系统的可维护性和性能。在需要动态扩展功能时，装饰模式是一种有效的设计模式，但应该谨慎使用，避免上述问题的出现。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Facade Pattern</title><link>https://wesigj.github.io/p/design-pattern-facade-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-facade-pattern/</guid><description>&lt;h1 id="设计模式-外观模式-facade-pattern">设计模式-外观模式-Facade Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>外观模式（Facade Pattern）是一种结构型设计模式&lt;/li>
&lt;li>它提供了一个统一的接口来访问子系统中的一组接口&lt;/li>
&lt;li>外观模式定义了一个高级接口，让子系统更容易使用，同时隐藏了子系统组件之间的复杂性&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1外观模式facade-pattern">1.外观模式（Facade Pattern）
&lt;/h2>&lt;p>外观模式（Facade Pattern）是一种结构型设计模式，它提供了一个统一的接口来访问子系统中的一组接口。外观模式定义了一个高级接口，让子系统更容易使用，同时隐藏了子系统组件之间的复杂性。&lt;/p>
&lt;h3 id="11外观模式的主要角色包括">1.1.外观模式的主要角色包括
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>外观（Facade）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>提供一个简化的接口，用于访问子系统中的复杂操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>子系统（Subsystem）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>一组类或接口，每个类或接口都管理子系统中的一部分功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端（Client）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用外观来访问子系统的功能，而不是直接与子系统交互。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="12c实现示例">1.2.C++实现示例
&lt;/h3>&lt;p>首先，定义子系统接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// SubsystemA.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">SubsystemA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">operationA&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Subsystem A operation&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// SubsystemB.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">SubsystemB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">operationB&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Subsystem B operation&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// SubsystemC.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">SubsystemC&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">operationC&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Subsystem C operation&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，定义外观类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Facade.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;SubsystemA.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;SubsystemB.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;SubsystemC.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Facade&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SubsystemA&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">subsystemA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SubsystemB&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">subsystemB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SubsystemC&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">subsystemC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Facade&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">subsystemA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SubsystemA&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="n">subsystemB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SubsystemB&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="n">subsystemC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">SubsystemC&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Facade&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">subsystemA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">subsystemB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">subsystemC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">operation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">subsystemA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">operationA&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">subsystemB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">operationB&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">subsystemC&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">operationC&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，客户端代码使用外观模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Facade.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Facade&lt;/span> &lt;span class="n">facade&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">facade&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">operation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13外观模式的应用场景">1.3.外观模式的应用场景
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>系统集成&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当需要将多个子系统集成到一个较大的系统中时，外观模式可以提供一个简单的接口来管理这些子系统。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>库的封装&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当需要提供一个库的简化接口时，外观模式可以隐藏库的复杂性，使得客户端代码更容易使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>复杂系统的简化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当客户端需要与复杂系统交互，但只需要访问系统的一部分功能时，外观模式可以简化客户端的调用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>控制访问&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当需要控制对子系统的访问，或者需要在子系统操作前后执行额外的逻辑时，外观模式可以提供这样的控制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>外观模式通过提供一个简化的接口，使得客户端代码可以更容易地与复杂的子系统交互，同时隐藏了子系统的实现细节。这有助于提高系统的可维护性和可扩展性。&lt;/p>
&lt;h2 id="2外观模式优缺点">2.外观模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>你可以让自己的代码独立于复杂子系统。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>外观可能成为与程序中所有类都耦合的上帝对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3外观模式在实际项目中如何避免过度设计的问题">3.外观模式在实际项目中如何避免过度设计的问题？
&lt;/h2>&lt;p>在实际项目中应用外观模式时，要避免过度设计的问题，可以遵循以下原则和最佳实践：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>关注高层次的设计&lt;/strong>：在设计初期，专注于系统的高层次结构而不是具体的实现细节。这有助于避免在初期就引入过多的复杂性，从而减少过度设计的风险。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>逐步细化&lt;/strong>：随着项目的进展，逐步添加更多的细节到类图中。这种方法允许你在更了解需求和上下文的情况下，逐步引入必要的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分离关注点&lt;/strong>：如果发现某个类承担了太多责任，考虑将其拆分为多个更小、更专注的类。这有助于保持系统的清晰性和可维护性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免过度封装&lt;/strong>：外观模式应该提供一个简化的接口，但同时也要避免过度封装，以免隐藏过多的细节，导致维护困难。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>适度使用外观模式&lt;/strong>：并非所有复杂系统都需要外观模式。应根据实际复杂度和维护成本来决定是否应用外观模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>利用现代编程语言特性&lt;/strong>：在C++中，可以利用C++11或更高版本的特性，如智能指针、Lambda表达式等，来简化代码并提高资源管理的安全性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续重构&lt;/strong>：在开发过程中，持续重构代码以适应新的需求和理解。这有助于避免在项目初期就做出过多的设计决策。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>与客户沟通&lt;/strong>：与客户或利益相关者进行充分的沟通，确保对需求有准确的理解，避免基于错误假设的设计。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编写可测试的代码&lt;/strong>：确保外观模式的实现不会妨碍代码的测试性。这有助于在不影响系统其他部分的情况下，对外观类进行有效的测试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>遵循设计模式的初衷&lt;/strong>：设计模式的目的是为了提高代码质量，包括可读性、可扩展性和可维护性。在应用外观模式时，始终考虑这些目标。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述方法，可以在保持系统简洁性的同时，有效地利用外观模式来简化复杂系统的接口。记住，设计模式是工具，应该根据项目的具体需求和上下文来合理应用。&lt;/p>
&lt;h2 id="4在实际开发中如何平衡设计模式的使用和项目的实际需求">4.在实际开发中，如何平衡设计模式的使用和项目的实际需求？
&lt;/h2>&lt;p>在实际开发中平衡设计模式的使用和项目的实际需求，可以通过以下方法来实现：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>理解需求&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在应用任何设计模式之前，首先要确保对项目需求有深入的理解。这包括与客户沟通，了解他们的期望和业务目标。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>识别问题&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确定项目中遇到的具体问题或痛点，这些问题可能是设计模式可以解决的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>选择适当的模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>根据识别的问题选择最合适的设计模式。选择那些能够提供明确解决方案的模式，而不是仅仅因为它们看起来很酷。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免过度设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>避免为了使用设计模式而使用。如果一个简单的解决方案已经足够，就不要引入复杂的设计模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>遵循SOLID原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保设计遵循SOLID原则，这有助于创建可维护、可扩展和灵活的代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保持简单&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>遵循KISS（Keep It Simple, Stupid）原则，尽量保持代码简单直接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代开发&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>采用迭代开发的方法，逐步引入设计模式，每次迭代都关注反馈和改进。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>重构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在项目进展中不断重构代码，以适应新的需求或改进设计。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在选择设计模式时，考虑它们对性能的影响。确保不会引入不必要的性能开销。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文档和沟通&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>记录设计决策，并与团队成员沟通。确保每个人都理解为什么选择特定的设计模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原型和实验&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在实际应用之前，通过原型或实验来测试设计模式的效果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续学习和评估&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>持续学习新的设计模式和最佳实践，并定期评估现有设计的有效性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>适应变化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>软件需求经常变化，设计应该能够适应这些变化。选择那些能够灵活应对变化的设计模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>权衡利弊&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于每个设计模式，都要权衡其带来的长期利益与短期成本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用户和场景驱动&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>设计应该由用户需求和特定场景驱动，而不是由技术驱动。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过这些方法，可以确保设计模式的使用是出于解决实际问题的需要，而不是过度设计。这样可以提高项目的成功率，同时保持代码的清晰性和可维护性。&lt;/p>
&lt;h2 id="5除了c外观模式还可以用在哪些编程语言中">5.除了C++，外观模式还可以用在哪些编程语言中？
&lt;/h2>&lt;p>外观模式（Facade Pattern）是一种常用的结构型设计模式，它为一组复杂的子系统提供一个简化的统一接口。这种模式隐藏了子系统的细节，使得客户端代码可以通过一个简单的接口来访问子系统的功能，从而降低了客户端与复杂子系统之间的耦合度。&lt;/p>
&lt;p>外观模式可以应用于多种编程语言中，不限于C++。它可以在任何支持类和对象的编程语言中实现，例如Java、Python、Ruby、Rust、Swift、TypeScript等。在这些语言中，外观模式的实现方式可能会有所不同，但核心思想是一致的：提供一个高级的接口，简化对子系统的操作。&lt;/p>
&lt;p>在实际项目中，外观模式可以帮助我们管理复杂的系统架构，使得客户端代码更加简洁和易于维护。例如，在Java微服务项目中，外观模式可以用于代码分层，其中Facade作为对外暴露API接口的一层，Controller作为API的实现类，Service为核心业务服务。在Spring框架中，JdbcTemplate类就是一个典型的外观模式应用，它封装了JDBC相关的操作，简化了数据库操作的复杂性。&lt;/p>
&lt;p>外观模式的优势包括简化了客户端与子系统的交互、降低了系统各部分之间的耦合度、提高了系统的可维护性。然而，它也存在一些缺点，如可能会隐藏子系统内部的重要行为，使得客户端无法访问这些行为；如果子系统发生改变，可能需要修改外观类，这可能会影响到客户端代码。&lt;/p>
&lt;p>在应用外观模式时，应该根据项目的具体需求和上下文来决定是否使用，以及如何设计外观类。外观模式是一种强大的工具，可以帮助我们构建更加清晰和易于管理的系统架构。&lt;/p>
&lt;h2 id="6如何判断一个项目是否适合使用外观模式">6.如何判断一个项目是否适合使用外观模式？
&lt;/h2>&lt;p>判断一个项目是否适合使用外观模式，可以考虑以下几个关键因素：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>子系统的复杂性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果项目中有一个复杂的子系统，且这个子系统由多个不同的类或模块组成，这些类或模块之间存在复杂的交互，那么使用外观模式可以提供一个简化的接口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端与子系统的交互&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果客户端需要与子系统的多个组件进行交互，而这些交互可以通过一个统一的接口来简化，那么外观模式是一个合适的选择。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>需要简化的接口&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当需要为外部客户端提供一个简化的接口，同时隐藏子系统的复杂性时，可以考虑使用外观模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端与子系统的耦合&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果希望减少客户端与子系统之间的直接依赖关系，降低耦合度，外观模式可以帮助封装子系统的细节。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>子系统的稳定性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果子系统相对稳定，不经常变化，而客户端代码需要与这个稳定的子系统交互，外观模式可以提供一层保护，使得子系统的变更不会直接影响到客户端。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>系统架构的层次&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在多层架构的系统中，外观模式可以用来定义每一层的入口点，简化层与层之间的调用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果子系统的性能不是关键问题，或者外观模式引入的额外间接层不会对性能产生负面影响，那么可以考虑使用外观模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>开闭原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果希望子系统的变更不会导致客户端代码的修改，从而遵循开闭原则（对扩展开放，对修改关闭），外观模式可以作为一个中间层来实现这一点。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可维护性和可扩展性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果项目需要易于维护和扩展，外观模式可以通过提供清晰的接口来提高系统的可维护性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>团队的熟悉度&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果团队成员对外观模式比较熟悉，并且能够正确地应用它，那么使用外观模式会更加顺利。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>项目规模和预期变化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于大型项目或预期会频繁变化的项目，外观模式可以帮助管理复杂性，并为未来的变更提供灵活性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>现有代码的重构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果现有代码库中存在复杂的交互和紧密耦合的问题，外观模式可以用来重构代码，提高代码的清晰度和可维护性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>在考虑使用外观模式时，应该权衡上述因素，并结合项目的具体需求和上下文来决定。外观模式是一个强大的工具，可以帮助简化复杂系统的接口，但也应该谨慎使用，以避免引入不必要的抽象层次。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Factory Method Pattern</title><link>https://wesigj.github.io/p/design-pattern-factory-method-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-factory-method-pattern/</guid><description>&lt;h1 id="设计模式-工厂方法模式">设计模式-工厂方法模式
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>工厂方法模式是一种创建型设计模式&lt;/strong>&lt;/li>
&lt;li>&lt;strong>子类继承，重载，多态基类&lt;/strong>&lt;/li>
&lt;li>&lt;strong>具体工厂生产具体产品&lt;/strong>&lt;/li>
&lt;li>&lt;strong>看起来内容挺多的，要耐心啊！&lt;/strong>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>工厂方法模式（Factory Method Pattern）是一种创建型设计模式，用于将对象的创建过程封装在一个函数或方法中，从而将对象的创建和使用分离。这种模式允许系统在不修改已有代码的情况下引入新的产品。&lt;/p>
&lt;h2 id="1工厂方法模式简介">1.工厂方法模式简介
&lt;/h2>&lt;h3 id="11-工厂方法模式的关键特点">1.1. 工厂方法模式的关键特点
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>封装性&lt;/strong>：对象的创建过程被封装在一个函数或方法中。&lt;/li>
&lt;li>&lt;strong>扩展性&lt;/strong>：当需要添加新的产品时，只需添加相应的具体产品类和相应的具体工厂类，无需修改已有代码。&lt;/li>
&lt;li>&lt;strong>解耦&lt;/strong>：客户端代码独立于具体产品类，只与抽象产品和工厂类交互。&lt;/li>
&lt;/ol>
&lt;h3 id="12-工厂方法模式的结构">1.2. 工厂方法模式的结构
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>产品（Product）&lt;/strong>：定义了产品的接口。&lt;/li>
&lt;li>&lt;strong>具体产品（Concrete Product）&lt;/strong>：实现了产品接口的具体类。&lt;/li>
&lt;li>&lt;strong>工厂（Factory）&lt;/strong>：定义了创建产品的方法，通常是一个静态方法或抽象方法。&lt;/li>
&lt;li>&lt;strong>具体工厂（Concrete Factory）&lt;/strong>：实现了工厂接口，生成具体产品对象。&lt;/li>
&lt;/ul>
&lt;h3 id="13-c-示例代码">1.3. C++ 示例代码
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 产品接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Product&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Product&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">use&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体产品
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteProduct&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Product&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">use&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Using ConcreteProduct&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 工厂接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Factory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Factory&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">Product&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">createProduct&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体工厂
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteFactory&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Factory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Product&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">createProduct&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">ConcreteProduct&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 客户端代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Factory&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">factory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteFactory&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Product&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">product&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">createProduct&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">product&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">use&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 使用具体产品
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">product&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 释放资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 释放资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="14-注意事项">1.4. 注意事项
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>简单工厂&lt;/strong>：如果创建逻辑简单，可以使用简单工厂模式，将所有创建逻辑放在一个工厂类中。&lt;/li>
&lt;li>&lt;strong>参数化工厂&lt;/strong>：如果创建对象需要外部参数，可以在工厂方法中传递这些参数。&lt;/li>
&lt;li>&lt;strong>工厂方法模式与抽象工厂模式&lt;/strong>：工厂方法模式用于创建单一产品，而抽象工厂模式用于创建产品族。&lt;/li>
&lt;li>&lt;strong>性能考虑&lt;/strong>：工厂方法模式可能会引入额外的性能开销，尤其是在创建对象时。&lt;/li>
&lt;/ul>
&lt;p>工厂方法模式适用于当创建对象的逻辑复杂或者需要将创建逻辑与使用逻辑分离的场景。它提高了系统的灵活性和扩展性，使得在不修改现有代码的情况下引入新的产品变得更加容易。&lt;/p>
&lt;h2 id="2如何用工厂方法模式解决代码中的耦合问题">2.如何用工厂方法模式解决代码中的耦合问题？
&lt;/h2>&lt;p>工厂方法模式通过将对象的创建逻辑从使用对象的代码中分离出来，可以有效地解决代码耦合问题。以下是使用工厂方法模式解决耦合问题的步骤和示例：&lt;/p>
&lt;h3 id="21-步骤">2.1. 步骤
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义产品接口&lt;/strong>：为需要解耦的对象创建一个接口或抽象类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现具体产品&lt;/strong>：为每种具体的对象类型实现产品接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定义工厂接口&lt;/strong>：为创建产品定义一个工厂接口或抽象类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现具体工厂&lt;/strong>：为每种具体产品类型实现一个具体的工厂类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端使用工厂&lt;/strong>：客户端代码通过工厂接口请求产品，而不是直接创建具体产品。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>解耦客户端和具体实现&lt;/strong>：客户端不再依赖于具体产品类的实现，只依赖于产品接口和工厂接口。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22-示例">2.2. 示例
&lt;/h3>&lt;p>假设我们有一个应用程序，它使用不同类型的日志记录器，但我们希望客户端代码不依赖于具体的日志记录器实现。&lt;/p>
&lt;h4 id="221-定义日志记录器接口">2.2.1. 定义日志记录器接口
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Logger&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Logger&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="222-实现具体日志记录器">2.2.2. 实现具体日志记录器
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConsoleLogger&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Console: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">FileLogger&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将日志消息写入文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="223-定义工厂接口">2.2.3. 定义工厂接口
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">LoggerFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">LoggerFactory&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">Logger&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">createLogger&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="224-实现具体工厂">2.2.4. 实现具体工厂
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConsoleLoggerFactory&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">LoggerFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Logger&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">createLogger&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">ConsoleLogger&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">FileLoggerFactory&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">LoggerFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Logger&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">createLogger&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">FileLogger&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="225-客户端使用工厂">2.2.5. 客户端使用工厂
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Application&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LoggerFactory&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">loggerFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Application&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LoggerFactory&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">loggerFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setLoggerFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LoggerFactory&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">loggerFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Logger&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">loggerFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">createLogger&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 使用完毕后释放资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Application&lt;/span> &lt;span class="n">app&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 根据配置或环境设置不同的日志记录器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">loggerType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Enter logger type (Console/File): &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cin&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">loggerType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">loggerType&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;Console&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setLoggerFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ConsoleLoggerFactory&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">loggerType&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;File&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setLoggerFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">FileLoggerFactory&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Invalid logger type&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;This is a log message.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="23-解耦的优势">2.3. 解耦的优势
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>易于扩展&lt;/strong>：添加新的日志记录器类型时，只需添加新的具体日志记录器类和相应的工厂类。&lt;/li>
&lt;li>&lt;strong>提高模块化&lt;/strong>：客户端代码与日志记录器的具体实现解耦，只依赖于接口。&lt;/li>
&lt;li>&lt;strong>灵活配置&lt;/strong>：可以在运行时根据配置选择不同的日志记录器，无需修改客户端代码。&lt;/li>
&lt;/ul>
&lt;p>通过这种方式，工厂方法模式使得代码更加灵活和可维护，同时降低了各组件之间的依赖性。&lt;/p>
&lt;h2 id="3应用场景">3.应用场景
&lt;/h2>&lt;p>工厂方法模式在实际开发中有多种应用场景，以下是一些常见的例子：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>数据库连接&lt;/strong>：
创建不同类型的数据库连接（如 MySQL、PostgreSQL）时，可以使用工厂方法模式根据不同的数据库类型生成相应的数据库连接对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图形用户界面（GUI）组件&lt;/strong>：
在GUI应用程序中，创建不同类型的按钮、文本框等组件时，可以使用工厂方法模式来封装组件的创建过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>日志记录器&lt;/strong>：
根据不同的日志级别或日志输出目的地（如控制台、文件、网络）创建不同的日志记录器实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置文件解析器&lt;/strong>：
针对不同的配置文件格式（如 XML、JSON、YAML）创建相应的解析器对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支付网关集成&lt;/strong>：
在电子商务应用中，根据不同的支付服务提供商（如 PayPal、Stripe、Alipay）创建支付网关实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象-关系映射（ORM）&lt;/strong>：
在ORM框架中，根据数据库表映射创建相应的模型对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图像处理&lt;/strong>：
根据不同的图像格式（如 JPEG、PNG、GIF）创建相应的图像处理对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>协议处理器&lt;/strong>：
在网络编程中，根据不同的通信协议（如 HTTP、FTP、SMTP）创建对应的协议处理器对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>报表生成&lt;/strong>：
根据不同的报表格式（如 PDF、Excel、HTML）创建相应的报表生成器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>邮件发送&lt;/strong>：
根据邮件发送服务（如 SMTP、SendGrid、Amazon SES）创建邮件发送对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>硬件设备驱动程序&lt;/strong>：
为不同类型的硬件设备（如打印机、扫描仪）创建相应的驱动程序实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>API客户端&lt;/strong>：
为不同的API服务（如 Twitter API、Facebook API）创建客户端实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>依赖注入容器&lt;/strong>：
在依赖注入框架中，工厂方法模式用于创建依赖项的实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多态性实现&lt;/strong>：
在需要实现多态性的场景中，工厂方法可以用来根据条件生成继承体系中的特定子类实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏开发&lt;/strong>：
在游戏开发中，根据不同的敌人类型或游戏对象创建相应的对象实例。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>工厂方法模式通过将对象创建的逻辑封装起来，使得代码更加模块化和可维护，同时也提高了扩展性。当系统中存在多种类型的对象需要创建，并且这些对象的创建逻辑可能会变化时，工厂方法模式尤其有用。&lt;/p>
&lt;h2 id="4用工厂方法模式实现数据库连接类">4.用工厂方法模式实现数据库连接类
&lt;/h2>&lt;p>当然，以下是一个使用工厂方法模式的具体示例，我们将创建一个简单的数据库连接工厂，用于根据不同的数据库类型生成相应的数据库连接对象。&lt;/p>
&lt;h3 id="41-假设我们有以下数据库连接类">4.1. 假设我们有以下数据库连接类
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// MySQL数据库连接类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MySQLConnection&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">connect&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Connecting to MySQL database...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// MySQL连接逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// PostgreSQL数据库连接类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">PostgreSQLConnection&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">connect&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Connecting to PostgreSQL database...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// PostgreSQL连接逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="42-定义一个数据库连接的接口">4.2. 定义一个数据库连接的接口
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DatabaseConnection&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">DatabaseConnection&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">connect&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="43-创建一个工厂基类">4.3. 创建一个工厂基类
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DatabaseConnectionFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">DatabaseConnectionFactory&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">DatabaseConnection&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">createConnection&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="43-实现具体的工厂类">4.3. 实现具体的工厂类
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// MySQL数据库连接工厂
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MySQLConnectionFactory&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">DatabaseConnectionFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DatabaseConnection&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">createConnection&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">MySQLConnection&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// PostgreSQL数据库连接工厂
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">PostgreSQLConnectionFactory&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">DatabaseConnectionFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DatabaseConnection&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">createConnection&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nf">PostgreSQLConnection&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="44-客户端使用示例">4.4. 客户端使用示例
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 客户端代码，根据需要选择数据库类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">dbType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Enter database type (MySQL/PostgreSQL): &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cin&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">dbType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DatabaseConnectionFactory&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">dbType&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;MySQL&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">factory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MySQLConnectionFactory&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">dbType&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;PostgreSQL&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">factory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PostgreSQLConnectionFactory&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Invalid database type&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DatabaseConnection&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">dbConnection&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">createConnection&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dbConnection&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">connect&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 释放资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">dbConnection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，我们定义了一个&lt;code>DatabaseConnection&lt;/code>接口和两个具体的数据库连接类&lt;code>MySQLConnection&lt;/code>和&lt;code>PostgreSQLConnection&lt;/code>。然后，我们创建了&lt;code>DatabaseConnectionFactory&lt;/code>工厂接口和两个具体的工厂类&lt;code>MySQLConnectionFactory&lt;/code>与&lt;code>PostgreSQLConnectionFactory&lt;/code>。在&lt;code>main&lt;/code>函数中，根据用户输入选择相应的数据库类型，并使用相应的工厂来创建和连接数据库。&lt;/p>
&lt;p>这个示例展示了工厂方法模式如何帮助我们封装对象创建的复杂性，并且使得系统更容易扩展。如果需要支持新的数据库类型，我们只需添加新的数据库连接类和相应的工厂类，而无需修改现有的代码。&lt;/p>
&lt;h2 id="5工厂模式-单元测试">5.工厂模式 单元测试
&lt;/h2>&lt;p>工厂方法模式在实际项目中的单元测试通常涉及以下几个方面：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>测试工厂类创建对象的功能&lt;/strong>：验证工厂类是否能够根据给定的参数或条件正确创建出预期的对象类型。这通常涉及到检查返回的对象是否是正确的类实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试对象的正确性&lt;/strong>：确保通过工厂方法创建的对象具有正确的属性和状态。这可能包括验证对象的字段值、状态或行为是否符合预期。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试边界条件和异常处理&lt;/strong>：检查工厂方法在面对不寻常的输入或错误条件时是否能够妥善处理，例如返回&lt;code>null&lt;/code>或抛出异常。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试代码覆盖率&lt;/strong>：确保单元测试覆盖了工厂方法的所有分支和逻辑路径，以验证代码的健壮性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试解耦合性&lt;/strong>：验证工厂方法模式是否成功地将对象创建的逻辑与使用对象的逻辑分离，从而降低代码之间的耦合度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试可扩展性&lt;/strong>：通过添加新的产品类和相应的工厂类来测试系统是否能够灵活扩展，而无需修改现有代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用模拟对象&lt;/strong>：在测试中使用模拟（mock）对象来模拟依赖关系，确保测试的独立性和可重复性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编写清晰的测试用例&lt;/strong>：每个测试用例应该具有明确的目的和描述，便于理解和维护。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>执行测试并验证结果&lt;/strong>：运行测试并检查结果是否符合预期，确保所有测试都通过。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续集成&lt;/strong>：将单元测试集成到持续集成流程中，确保代码的每次提交都能自动运行测试，及时发现问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这些测试策略，可以确保工厂方法模式的实现是正确、可靠和易于维护的。单元测试不仅帮助开发者验证代码的正确性，还提高了代码质量和项目的可维护性。&lt;/p>
&lt;h2 id="6工厂方法模式和简单工厂模式有什么区别它们各自适用于什么情况">6.工厂方法模式和简单工厂模式有什么区别，它们各自适用于什么情况？
&lt;/h2>&lt;p>工厂方法模式（Factory Method Pattern）和简单工厂模式（Simple Factory Pattern）都是创建型设计模式，它们用于封装对象的创建过程。尽管它们的目的相似，但它们在结构和使用场景上有一些关键的区别：&lt;/p>
&lt;h3 id="61简单工厂模式">6.1.简单工厂模式
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>定义&lt;/strong>：简单工厂模式使用一个中心工厂类来创建所有类型的对象。这个类负责接收参数并根据参数决定创建哪种类型的对象。&lt;/li>
&lt;li>&lt;strong>结构&lt;/strong>：简单工厂模式通常包含一个工厂类和多个具体产品类。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：
&lt;ul>
&lt;li>易于理解和实现。&lt;/li>
&lt;li>客户端不需要知道具体的类是如何实现的。&lt;/li>
&lt;li>隐藏了对象创建的复杂性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：
&lt;ul>
&lt;li>工厂类集中了所有创建逻辑，违反了单一职责原则。&lt;/li>
&lt;li>每增加一个产品类别，都需要修改工厂类，违反了开闭原则。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>适用场景&lt;/strong>：
&lt;ul>
&lt;li>当创建逻辑比较简单，不需要重复编写创建代码时。&lt;/li>
&lt;li>当产品种类较少，且新增产品类别的频率较低时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="62工厂方法模式">6.2.工厂方法模式
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>定义&lt;/strong>：工厂方法模式定义了一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法让类的实例化推迟到子类。&lt;/li>
&lt;li>&lt;strong>结构&lt;/strong>：工厂方法模式包含一个抽象工厂接口、多个具体工厂类和多个具体产品类。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：
&lt;ul>
&lt;li>遵循开闭原则，增加新的产品类不需要修改现有代码。&lt;/li>
&lt;li>增加了创建逻辑的扩展性，每个具体工厂类负责创建一种产品。&lt;/li>
&lt;li>符合单一职责原则，每个工厂类只负责创建一种具体产品。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：
&lt;ul>
&lt;li>增加了系统的复杂度，需要为每个产品类创建对应的工厂类。&lt;/li>
&lt;li>增加了系统的抽象性和理解难度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>适用场景&lt;/strong>：
&lt;ul>
&lt;li>当产品类别较多，且需要根据不同的条件创建不同的产品实例时。&lt;/li>
&lt;li>当系统需要扩展性，能够灵活地引入新产品类别而不影响现有代码时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="63区别">6.3.区别
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>扩展性&lt;/strong>：工厂方法模式更容易扩展，因为它遵循开闭原则，而简单工厂模式在添加新产品时需要修改工厂类。&lt;/li>
&lt;li>&lt;strong>职责分配&lt;/strong>：工厂方法模式将创建逻辑分散到各个具体工厂类中，而简单工厂模式将所有创建逻辑集中在一个工厂类中。&lt;/li>
&lt;li>&lt;strong>抽象程度&lt;/strong>：工厂方法模式提供了更高层次的抽象，允许系统在运行时动态选择使用哪个工厂类。&lt;/li>
&lt;/ul>
&lt;p>在选择使用哪种模式时，需要根据实际项目的需求、系统的复杂度和预期的扩展性来决定。如果预计产品类别会频繁变化或增加，工厂方法模式可能是更好的选择。如果产品类别相对固定且数量较少，简单工厂模式可能更简单直接。&lt;/p>
&lt;h2 id="7在实际开发中如何决定使用工厂方法模式还是简单工厂模式">7.在实际开发中，如何决定使用工厂方法模式还是简单工厂模式？
&lt;/h2>&lt;p>在实际开发中，决定使用工厂方法模式还是简单工厂模式，可以根据以下几个关键因素进行考虑：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>扩展性需求&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果系统预计会有频繁的产品种类扩展，或者需要在未来添加更多产品类型，工厂方法模式更加合适，因为它遵循开闭原则，易于扩展。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>产品种类数量&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果系统中的产品种类较少，或者新增产品的需求较低，简单工厂模式可能更加简单和直接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建逻辑复杂度&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果对象的创建逻辑相对简单，或者创建过程中不需要太多子类特有的逻辑，简单工厂模式可能更合适。&lt;/li>
&lt;li>如果对象的创建逻辑较为复杂，或者不同的产品类型需要不同的创建逻辑，工厂方法模式允许将这些逻辑分散到各个具体工厂类中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>系统耦合度&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果希望降低系统各部分之间的耦合度，工厂方法模式通过定义抽象工厂接口，使得客户端代码与具体实现解耦。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码维护性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果系统的可维护性是关键考虑因素，工厂方法模式通常提供更好的维护性，因为它允许在不修改现有代码的基础上引入新的产品类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果性能是一个关键因素，并且对象创建不是性能瓶颈，可以选择简单工厂模式，因为它可能更轻量级。&lt;/li>
&lt;li>如果对象创建过程可能影响性能，工厂方法模式允许对创建过程进行优化，而不影响其他工厂类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设计原则遵循&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果希望严格遵循设计原则，如单一职责原则和开闭原则，工厂方法模式是更好的选择。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>团队熟悉度&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>考虑团队对设计模式的熟悉程度和偏好。如果团队对工厂方法模式更熟悉，选择工厂方法模式可能更有利于项目的顺利进行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>项目规模&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于大型项目或企业级应用，工厂方法模式可能更合适，因为它提供了更好的扩展性和灵活性。&lt;/li>
&lt;li>对于小型或简单的项目，简单工厂模式可能足够用，且实现起来更快捷。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>现有代码基础&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果现有系统已经采用了工厂方法模式，新增功能时继续使用工厂方法模式可以保持代码风格的一致性。&lt;/li>
&lt;li>如果现有系统较小，且没有使用设计模式，引入简单工厂模式可能更简单。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>综合考虑上述因素，可以做出更合适的选择。在一些情况下，两种模式可以结合使用，例如，使用简单工厂模式来处理创建逻辑相对简单的对象，而使用工厂方法模式来处理需要高度扩展性的对象。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Flyweight Pattern</title><link>https://wesigj.github.io/p/design-pattern-flyweight-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-flyweight-pattern/</guid><description>&lt;h1 id="设计模式-享元模式-flyweight-pattern">设计模式-享元模式-Flyweight Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>享元模式（Flyweight Pattern）是一种结构型设计模式&lt;/strong>&lt;/li>
&lt;li>&lt;strong>它通过共享对象来减少创建大量相似对象时的内存消耗&lt;/strong>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1c中享元模式">1.C++中，享元模式
&lt;/h2>&lt;p>在C++中，享元模式（Flyweight Pattern）是一种用于优化内存使用和提高性能的结构型设计模式。它通过共享对象来有效支持大量细粒度的对象，从而减少内存消耗。享元模式特别适用于需要大量相似对象的情况，这些对象之间共享一些公共状态或数据。&lt;/p>
&lt;h3 id="11关键概念">1.1.关键概念
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>享元（Flyweight）&lt;/strong>：享元模式中的对象，这些对象可以共享某些数据以减少内存占用。&lt;/li>
&lt;li>&lt;strong>享元工厂（Flyweight Factory）&lt;/strong>：负责管理和维护享元对象的共享。&lt;/li>
&lt;li>&lt;strong>客户端（Client）&lt;/strong>：使用享元对象，通常将对象的外部状态传递给享元对象。&lt;/li>
&lt;/ol>
&lt;h3 id="12实现步骤">1.2.实现步骤
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>定义享元接口&lt;/strong>：创建一个接口或抽象类，定义享元对象的公共接口。&lt;/li>
&lt;li>&lt;strong>创建具体享元类&lt;/strong>：实现享元接口，并存储内部状态。&lt;/li>
&lt;li>&lt;strong>创建享元工厂&lt;/strong>：负责创建和管理享元对象，确保相同内部状态的对象只被创建一次。&lt;/li>
&lt;li>&lt;strong>客户端使用享元&lt;/strong>：通过享元工厂获取享元对象，并传递外部状态以完成特定任务。&lt;/li>
&lt;/ol>
&lt;h3 id="13示例代码">1.3.示例代码
&lt;/h3>&lt;p>以下是一个简单的C++代码示例，展示了如何使用享元模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;map&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象享元接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">IFlyweight&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">IFlyweight&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">operation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">extrinsicState&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体享元类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteFlyweight&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">IFlyweight&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">intrinsicState&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 内部状态
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteFlyweight&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">intrinsicState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">operation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">extrinsicState&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Concrete Flyweight: Internal State = &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">intrinsicState&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, Extrinsic State = &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">extrinsicState&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 享元工厂
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">FlyweightFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">IFlyweight&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">flyweights&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">IFlyweight&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">getFlyweight&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">flyweights&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flyweights&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConcreteFlyweight&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">flyweights&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FlyweightFactory&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">extrinsicStates&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;state1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;state2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;state2&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">state&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">extrinsicStates&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">flyweight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getFlyweight&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sharedState&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flyweight&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">operation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="14应用场景">1.4.应用场景
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>大量对象的共享&lt;/strong>：当系统中需要创建大量相似的对象时，使用享元模式可以有效地减少对象数量，从而降低内存使用和提高性能。&lt;/li>
&lt;li>&lt;strong>对象的共享和重用&lt;/strong>：当对象具有大量共享状态并且外部状态不同的情况时，享元模式非常有用。&lt;/li>
&lt;li>&lt;strong>大量相似对象的场景&lt;/strong>：例如，文本编辑器中的字符、图形用户界面中的图标、游戏中的敌人等。&lt;/li>
&lt;li>&lt;strong>对象创建成本高的场景&lt;/strong>：例如，数据库连接池、线程池等。&lt;/li>
&lt;li>&lt;strong>需要优化内存使用的场景&lt;/strong>：例如，缓存系统中的对象、图像处理系统中的图像对象等。&lt;/li>
&lt;/ul>
&lt;h3 id="15优点">1.5.优点
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>节省内存&lt;/strong>：通过共享相同的对象实例，减少了内存的消耗。&lt;/li>
&lt;li>&lt;strong>提高性能&lt;/strong>：减少了对象的创建和管理开销，提高了系统性能。&lt;/li>
&lt;/ul>
&lt;h3 id="16缺点">1.6.缺点
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>实现复杂&lt;/strong>：需要维护共享对象的管理机制，增加了系统的复杂性。&lt;/li>
&lt;li>&lt;strong>线程安全&lt;/strong>：在多线程环境下，享元模式的实现需要考虑线程安全问题，以避免数据的不一致性。&lt;/li>
&lt;/ul>
&lt;p>通过合理地使用享元模式，可以有效地降低内存使用，提高系统性能，特别是在处理大量具有相似内部状态的对象时。然而，在实际应用中，需要权衡享元模式带来的优点和引入的复杂性，以确保在合适的场景下使用享元模式，从而发挥其最大优势。&lt;/p>
&lt;h2 id="2享元模式应用场景">2.享元模式应用场景
&lt;/h2>&lt;p>享元模式在实际项目中的应用场景非常广泛，以下是一些常见的例子：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>文本编辑器&lt;/strong>：
在文本编辑器中，字符是频繁使用的对象。由于许多字符可能会重复出现，使用享元模式可以共享这些字符的相同属性（如字体和大小），从而减少内存消耗。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图形用户界面&lt;/strong>：
在GUI开发中，许多控件（如按钮、标签等）可能具有相同的外观和行为。享元模式允许共享这些控件的公共属性，减少创建控件时的资源消耗。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏开发&lt;/strong>：
游戏中的大量对象（如敌人、子弹、道具等）可能具有相似的属性或行为。通过享元模式，可以共享这些对象的公共资源，如纹理和模型数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据库连接池&lt;/strong>：
数据库连接是一种宝贵的资源，享元模式可以用于实现连接池，复用已经创建的连接对象，减少创建和销毁连接的开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缓存系统&lt;/strong>：
在缓存系统中，享元模式可以用来共享缓存对象，减少内存占用，提高缓存性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络编程&lt;/strong>：
在网络编程中，可以使用享元模式管理连接池或线程池，以实现资源的复用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Java中的String对象&lt;/strong>：
Java中的字符串常量池就是享元模式的一个例子。字符串常量池中的字符串对象被多个引用共享，避免了相同字符串的重复创建。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图像处理&lt;/strong>：
在图像处理软件中，享元模式可以用来共享图像的共同属性，如颜色空间和分辨率，减少内存占用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在C++中实现享元模式时，可以通过以下步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义享元接口&lt;/strong>：
创建一个接口或抽象类，定义享元对象的公共接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现具体享元类&lt;/strong>：
实现享元接口，并存储享元对象的内部状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建享元工厂&lt;/strong>：
实现一个工厂类，负责创建和管理享元对象，确保相同内部状态的对象只被创建一次。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>处理外部状态&lt;/strong>：
在客户端代码中，传递外部状态给享元对象，以完成特定任务。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这种方式，享元模式可以有效地减少内存消耗，提高系统性能。在实际应用中，享元模式需要仔细设计，以确保内部状态和外部状态的正确分离和管理。&lt;/p>
&lt;h2 id="3如何确保在多线程环境中享元模式的正确性和线程安全">3.如何确保在多线程环境中，享元模式的正确性和线程安全？
&lt;/h2>&lt;p>在多线程环境中使用享元模式时，确保线程安全是一个重要的考虑因素。以下是一些策略和实践，可以帮助确保享元模式的正确性和线程安全：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用线程安全的集合&lt;/strong>：
当享元工厂使用集合来存储和管理享元对象时，应选择线程安全的集合类，如 &lt;code>std::mutex&lt;/code> 保护的 &lt;code>std::map&lt;/code> 或 &lt;code>std::unordered_map&lt;/code>，或者使用 &lt;code>std::shared_timed_mutex&lt;/code> 来允许多个线程同时读取，但只有一个线程写入。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同步访问享元对象&lt;/strong>：
如果享元对象的状态可以被多个线程修改，需要确保这些修改是同步的。可以使用互斥锁（如 &lt;code>std::mutex&lt;/code>）来保护对享元对象状态的访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不可变对象&lt;/strong>：
设计享元对象为不可变对象，这样它们的状态在创建后就不会改变，从而避免了线程安全问题。不可变对象可以在没有同步的情况下被多个线程安全地共享。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>最小化锁的使用&lt;/strong>：
尽量减少锁的使用，以避免性能瓶颈。例如，可以使用读写锁（如 &lt;code>std::shared_mutex&lt;/code>）来允许多个线程同时读取享元对象，但写入时需要独占访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程局部存储&lt;/strong>：
对于外部状态，可以使用线程局部存储（如 &lt;code>thread_local&lt;/code> 关键字）来为每个线程存储独立的外部状态，这样每个线程都有自己的状态副本，不需要同步。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原子操作&lt;/strong>：
对于简单的状态修改，可以使用原子操作（如 &lt;code>std::atomic&lt;/code> 类型）来保证操作的原子性和线程安全。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免共享可变状态&lt;/strong>：
尽可能设计享元模式以避免共享可变状态。如果必须共享，确保所有对共享状态的访问都是线程安全的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试和验证&lt;/strong>：
在多线程环境中对享元模式进行充分的测试和验证，确保没有死锁、竞态条件或其他线程安全问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文档和代码审查&lt;/strong>：
在代码中明确文档化线程安全策略，并进行代码审查，确保所有团队成员都理解并遵循这些策略。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述措施，可以在多线程环境中有效地使用享元模式，同时确保线程安全和性能。在实际应用中，需要根据具体的应用场景和需求来选择合适的策略。&lt;/p>
&lt;h2 id="4在c中享元模式的实现有哪些常见的问题和挑战">4.在C++中，享元模式的实现有哪些常见的问题和挑战？
&lt;/h2>&lt;p>在C++中实现享元模式时，可能会遇到一些常见的问题和挑战：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>区分内部状态和外部状态&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>享元模式要求将对象的内部状态（可共享）与外部状态（不可共享）明确区分。正确地识别和设计这两部分是实现享元模式的关键。如果区分不当，可能会导致享元对象无法正确共享或使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元工厂的实现&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>享元工厂负责管理享元对象的创建和共享。实现一个高效的享元工厂，确保享元对象可以被正确地共享和重用，是一个挑战。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程安全&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在多线程环境中，享元工厂需要确保线程安全，避免在共享享元对象时出现竞态条件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存管理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>享元对象的内存管理需要仔细处理，以避免内存泄漏。在C++中，通常需要考虑对象的生命周期和正确的销毁时机。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元对象的不可变性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为了确保享元对象可以安全共享，享元对象的状态应该是不可变的。任何需要变化的状态都应该作为外部状态处理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>过度共享&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>过度共享可能会导致系统复杂度增加，难以维护。需要根据实际情况判断哪些对象适合共享，哪些不适合。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元模式与单例模式的区别&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>单例模式确保一个类只有一个实例，而享元模式通过共享多个对象来减少对象的数量。在实际应用中，需要根据需求选择合适的模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元模式的适用性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>享元模式适用于对象数量庞大且内部状态大部分可以共享的场景。如果对象的创建成本不高，或者对象数量不多，享元模式可能不会带来明显的好处。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元模式的性能优化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些情况下，享元模式可能需要与缓存、对象池等技术结合使用，以进一步提高性能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元模式的实现复杂性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>实现享元模式可能会增加代码的复杂性。需要确保代码的清晰性和可维护性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>在实际开发中，应该根据项目的具体需求和上下文来决定是否使用享元模式，并仔细设计内部状态和外部状态的分离，以及享元工厂的管理策略。通过合理的设计和实现，享元模式可以有效地减少内存消耗，提高系统性能。&lt;/p>
&lt;h2 id="5享元模式在内存管理上有哪些最佳实践">5.享元模式在内存管理上有哪些最佳实践？
&lt;/h2>&lt;p>在C++中实现享元模式时，为了确保内存管理和性能优化的最佳实践，以下是一些关键点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>明确内部状态和外部状态&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>内部状态（Intrinsic State）是享元对象共享的状态，通常是不变的。例如，一个字体对象的内部状态可能是字体类型和大小。外部状态（Extrinsic State）是与特定上下文相关的，不能共享，例如文本的位置或颜色。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元工厂的管理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>享元工厂（Flyweight Factory）负责创建和管理享元对象，确保相同的内部状态只创建一次享元对象。这通常涉及到一个存储已创建享元对象的集合，如使用&lt;code>std::map&lt;/code>或&lt;code>std::unordered_map&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免内存泄漏&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在享元模式中，享元对象通常由享元工厂管理，因此需要注意对象的生命周期，避免内存泄漏。使用智能指针（如&lt;code>std::shared_ptr&lt;/code>）可以帮助管理对象的生命周期。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程安全&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在多线程环境中，享元工厂的访问需要是线程安全的。可以使用互斥锁（如&lt;code>std::mutex&lt;/code>）来保护对享元工厂内部集合的访问。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不可变性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使享元对象的内部状态不可变可以提高线程安全性，并简化内存管理。这意味着一旦享元对象被创建，它的内部状态就不能改变。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元对象的共享&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保享元对象在不同上下文中可以被共享，同时保持外部状态的独立性。这通常通过将外部状态作为方法参数传递来实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元模式与单例模式结合&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些情况下，可以将享元工厂实现为单例模式，确保整个应用程序中只有一个享元工厂实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能优化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>享元模式的主要目标是优化性能和内存使用。在实现时，应评估共享带来的性能提升是否值得引入的复杂性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码清晰性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>尽管享元模式可以优化内存使用，但不应牺牲代码的清晰性和可维护性。确保享元模式的实现不会导致系统难以理解和维护。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文档和注释&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>由于享元模式可能增加系统的复杂性，因此需要在代码中提供充分的文档和注释，以帮助其他开发者理解享元模式的实现和使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过遵循这些最佳实践，可以在C++项目中有效地使用享元模式，以提高性能和内存使用效率，同时保持代码的可维护性。&lt;/p>
&lt;h2 id="6除了内存优化享元模式在提高系统性能方面还有哪些优势">6.除了内存优化，享元模式在提高系统性能方面还有哪些优势？
&lt;/h2>&lt;p>享元模式（Flyweight Pattern）是一种结构型设计模式，它通过共享对象来减少系统中对象的数量，从而降低内存占用和提高系统性能。这种模式特别适用于处理大量相似对象的情况，例如文本编辑器中的字符渲染、图形界面中的图形元素绘制等场景。享元模式的关键在于将对象的状态分为内部状态（Intrinsic State）和外部状态（Extrinsic State）。内部状态是对象共享的部分，而外部状态则是对象特定的、不可共享的部分。&lt;/p>
&lt;p>除了内存优化，享元模式在提高系统性能方面的优势包括：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>提高资源利用率&lt;/strong>：通过共享对象，减少了创建和销毁对象的开销，提高了系统资源的利用效率。&lt;/li>
&lt;li>&lt;strong>减少垃圾回收压力&lt;/strong>：由于减少了对象的创建，相应的也减少了内存分配和释放操作，从而缓解了垃圾回收器的压力，提高了系统的吞吐量。&lt;/li>
&lt;li>&lt;strong>降低对象间的耦合度&lt;/strong>：享元模式通过分离内部状态和外部状态，使得对象之间的耦合度降低，因为对象不需要关心其他对象的外部状态。&lt;/li>
&lt;li>&lt;strong>线程安全&lt;/strong>：共享的对象可以在多个线程中安全地共享并发访问，不会有线程安全问题。&lt;/li>
&lt;li>&lt;strong>提高系统的可扩展性&lt;/strong>：享元模式使得添加新的共享对象变得更加容易，有利于系统的扩展。&lt;/li>
&lt;li>&lt;strong>增强代码的可维护性&lt;/strong>：享元模式通过共享技术减少了对象的数量，使得代码更加简洁，易于维护。&lt;/li>
&lt;/ol>
&lt;p>然而，享元模式也带来了一些缺点，如增加系统设计的复杂性，需要分离出内部状态和外部状态，这可能会使得设计和实现更加复杂。此外，维护享元池也会增加开销，并且可能增加运行时间，因为需要在客户端和享元对象之间传递外部状态。&lt;/p>
&lt;p>在实际应用中，享元模式可以用于多种场景，如字符串常量池、数据库连接池、图形渲染中的贴图共享等。它通过享元工厂来管理对象的创建和共享，从而实现了对相似对象的高效处理。&lt;/p>
&lt;p>总结来说，享元模式通过共享技术有效地支持大量细粒度对象的复用，适用于对象状态可以外部化，并且剥离出共享部分和特有部分的场景。它能够显著减少内存消耗，提高系统性能和资源利用率，但同时也需要注意对内部状态和外部状态的管理，以及可能引入的线程安全问题。&lt;/p>
&lt;h2 id="7在图形用户界面设计中享元模式是如何帮助减少内存消耗的">7.在图形用户界面设计中，享元模式是如何帮助减少内存消耗的？
&lt;/h2>&lt;p>在图形用户界面设计中，享元模式通过共享对象来减少内存消耗，从而提高系统性能。具体来说，享元模式可以将图形元素的内部状态（如图像数据、图标表示等）作为共享状态，这些状态在多个实例之间共享，而每个元素的外部状态（如位置和用户特定的属性）则由客户端代码维护并传递给享元对象。这样，当界面中需要大量重复使用相同图形元素时，就不需要为每个元素创建独立的实例，从而大大减少了内存的使用。&lt;/p>
&lt;p>享元模式的工作原理包括以下几个关键步骤：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>识别共享状态和非共享状态&lt;/strong>：将对象的内部状态（共享状态）与外部状态（非共享状态）分离。&lt;/li>
&lt;li>&lt;strong>享元工厂的管理&lt;/strong>：享元工厂负责创建和管理享元对象，确保相似对象被共享，避免重复创建。&lt;/li>
&lt;li>&lt;strong>客户端使用享元对象&lt;/strong>：客户端通过享元工厂获取享元对象，并在需要时设置其外部状态。&lt;/li>
&lt;/ol>
&lt;p>在图形用户界面设计中，享元模式的优势包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>减少内存消耗&lt;/strong>：通过共享对象实例，减少了系统中对象的数量，从而降低了内存消耗。&lt;/li>
&lt;li>&lt;strong>提高性能&lt;/strong>：避免了频繁的对象创建和销毁操作，提高了系统的运行性能。&lt;/li>
&lt;li>&lt;strong>简化系统设计&lt;/strong>：享元模式有助于将对象的共享部分和变化部分分离开来，使系统设计更加清晰和灵活。&lt;/li>
&lt;/ul>
&lt;p>此外，享元模式还可以与其他设计模式如工厂模式、单例模式等协同工作，以实现更复杂的功能和更优的性能。例如，在UIKit中，&lt;code>UIColor&lt;/code>、&lt;code>UIFont&lt;/code>和&lt;code>UITableViewCell&lt;/code>都是使用享元模式的类，它们通过共享来减少内存使用，提高性能。在游戏开发中，享元模式可以用于管理游戏实体，如子弹、粒子或纹理，其中共享属性如图像或行为在实例间共享，而位置、速度和其他状态信息则是特定于每个实例的。&lt;/p>
&lt;p>总结来说，享元模式在图形用户界面设计中的应用可以显著减少内存消耗和提高系统性能，特别是在处理大量相似图形元素时。通过合理地管理内部状态和外部状态，享元模式为图形界面设计提供了一种有效的内存优化策略。&lt;/p>
&lt;h2 id="8享元模式在数据库连接池中是如何具体实现的">8.享元模式在数据库连接池中是如何具体实现的？
&lt;/h2>&lt;p>享元模式在数据库连接池中的应用是一个典型的例子，它通过共享技术有效地支持大量细粒度的对象，从而减少创建对象的数量和提高系统性能。在数据库连接池中，享元模式的实现通常涉及以下几个关键步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义连接接口&lt;/strong>：首先定义一个连接接口（如 &lt;code>Connection&lt;/code>），它包含连接的基本操作，如提交（&lt;code>commit&lt;/code>）、回滚（&lt;code>rollback&lt;/code>）和关闭（&lt;code>close&lt;/code>）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现具体连接&lt;/strong>：创建一个具体连接类（如 &lt;code>DefaultConnection&lt;/code>），实现连接接口。在关闭连接时，会将连接对象回收到连接池中，以便再次使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定义数据源接口&lt;/strong>：定义一个数据源接口（如 &lt;code>DataSource&lt;/code>），它负责提供获取连接的方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现池化的数据源&lt;/strong>：创建一个有池化功能的实现类（如 &lt;code>PooledDatasource&lt;/code>），它包含活跃连接池列表和空闲连接池列表。当获取连接时，首先检查空闲连接池是否有可用连接，如果有，则直接提供给用户；如果没有，则创建新的连接并放入活跃连接池。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>连接回收&lt;/strong>：当连接不再使用时，通过 &lt;code>close&lt;/code> 方法将连接从活跃连接池移除，并放入空闲连接池，以便后续再次使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据源工厂&lt;/strong>：定义一个数据源工厂（如 &lt;code>DatasourceFactory&lt;/code>），它负责创建和管理数据源实例，确保连接池的正确初始化和配置。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这种方式，数据库连接池可以显著减少创建和销毁数据库连接的开销，提高资源利用率，并减少系统的整体内存消耗。这种模式在高并发场景下尤为重要，因为它可以避免频繁地创建和销毁连接，从而提高系统的性能和稳定性。&lt;/p>
&lt;h2 id="9在享元模式中如何确保连接池中的连接对象是线程安全的">9.在享元模式中，如何确保连接池中的连接对象是线程安全的？
&lt;/h2>&lt;p>在数据库连接池中，享元模式的线程安全性是一个关键考虑因素。以下是一些确保线程安全的方法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>线程安全的享元工厂&lt;/strong>：享元工厂负责创建和管理连接对象，需要确保在多线程环境下，工厂的创建和获取连接对象的操作是线程安全的。可以通过使用同步机制（例如 &lt;code>synchronized&lt;/code> 关键字）或者并发集合（例如 &lt;code>ConcurrentHashMap&lt;/code>）来实现线程安全的享元工厂。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用不可变对象&lt;/strong>：如果连接对象是不可变的，那么就不需要担心线程安全问题，因为不可变对象的内部状态在创建后不会改变，自然不存在并发修改的问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>连接对象的状态管理&lt;/strong>：连接对象的状态（如是否被某个线程使用）需要通过线程安全的方式进行管理。可以通过原子变量（如 &lt;code>AtomicBoolean&lt;/code>）来标识连接的状态，确保状态的改变是原子操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>等待/通知机制&lt;/strong>：当连接池中的连接都被占用时，请求连接的线程可能需要等待。可以使用 &lt;code>Object&lt;/code> 类的 &lt;code>wait()&lt;/code> 和 &lt;code>notify()&lt;/code> 或者 &lt;code>Condition&lt;/code> 接口来实现线程间的等待/通知机制，确保线程在合适的时机被唤醒。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>合理配置连接池参数&lt;/strong>：数据库连接池通常提供了大量的参数可以配置，例如最大连接数、最小空闲连接数等。合理配置这些参数，可以避免线程因争夺连接而产生过多的竞争，从而减少线程安全问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用现有的线程安全连接池实现&lt;/strong>：许多现有的数据库连接池实现（如 HikariCP、Apache DBCP、C3P0 等）已经考虑了线程安全问题，直接使用这些成熟的连接池实现可以避免自己处理线程安全问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述措施，可以在数据库连接池中实现享元模式的线程安全，确保在高并发环境下连接池的稳定性和性能。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Interpreter Pattern</title><link>https://wesigj.github.io/p/design-pattern-interpreter-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-interpreter-pattern/</guid><description>&lt;h1 id="设计模式-解释器模式-interpreter-pattern">设计模式-解释器模式-Interpreter Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>解释器模式（Interpreter Pattern）是一种行为设计模式&lt;/li>
&lt;li>它主要用于定义如何评估语言的语法或表达式，是一种用于解释执行语言的模式&lt;/li>
&lt;li>这种模式涉及到创建一个表达式接口，该接口能够解释一个特定的上下文&lt;/li>
&lt;li>解释器模式通常用于解析和执行语言的语法规则，如计算表达式、解析文本文件等&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1解释器模式interpreter-pattern">1.解释器模式（Interpreter Pattern）
&lt;/h2>&lt;p>解释器模式（Interpreter Pattern）是一种行为设计模式，它主要用于定义如何评估语言的语法或表达式，是一种用于解释执行语言的模式。这种模式涉及到创建一个表达式接口，该接口能够解释一个特定的上下文。解释器模式通常用于解析和执行语言的语法规则，如计算表达式、解析文本文件等。&lt;/p>
&lt;h3 id="11组成要素">1.1.组成要素
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>抽象表达式（AbstractExpression）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>定义解释器的接口，通常包含一个 &lt;code>interpret()&lt;/code> 方法，用于解释或执行表达式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>终结符表达式（TerminalExpression）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>实现抽象表达式接口，代表语法中的终结符。终结符是最简单的表达式，没有子表达式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>非终结符表达式（NonterminalExpression）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>也实现抽象表达式接口，代表语法中的非终结符。非终结符可以包含子表达式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>上下文（Context）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通常包含解释器之外的环境信息，这些信息对于解释器是必要的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端（Client）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>构建或配置具体的表达式，并使用解释器来解释或执行表达式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="12适用场景">1.2.适用场景
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>需要解释一种语言&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当你需要解释一种语言（如简单的编程语言、查询语言等）时，可以使用解释器模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>语法或表达式树的需求&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当你需要处理复杂的语法或表达式树时，解释器模式可以提供一种结构化的方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>易于改变的语法规则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当语法规则经常变化，且你希望在不修改现有代码的情况下轻松添加新的语法规则时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="13优点">1.3.优点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>易于扩展&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>新的解释表达式可以很容易地加入到系统中，无需修改现有代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分离语法和语义&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>可以将语法分析和语义解释分离，使得系统更加模块化。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>易于实现简单语法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于简单的语法，实现起来相对简单直观。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="14缺点">1.4.缺点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>性能问题&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于复杂的文法，解释器模式可能导致性能问题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>难以维护&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当语法规则非常复杂时，解释器模式可能导致系统难以维护。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>难以优化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>优化解释器模式的性能可能比较困难。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="15示例代码c">1.5.示例代码（C++）
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;map&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">interpret&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 终结符表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">TerminalExpression&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">symbol&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TerminalExpression&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">symbol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">symbol&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">symbol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">interpret&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">symbol&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 非终结符表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">NonterminalExpression&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">expr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NonterminalExpression&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">expr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">expr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">interpret&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">expr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">interpret&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 客户端代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">expr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TerminalExpression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Interpretation: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">expr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">interpret&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>Expression&lt;/code> 是抽象表达式接口，&lt;code>TerminalExpression&lt;/code> 是终结符表达式，它直接解释上下文中的值。&lt;code>NonterminalExpression&lt;/code> 是非终结符表达式，它可以包含其他表达式。客户端代码创建了一个表达式并解释了上下文中的一个值。&lt;/p>
&lt;p>解释器模式在实际应用中可以用于构建表达式求值器、语法解析器、解释执行特定领域的语言等。&lt;/p>
&lt;h2 id="2解释器模式优缺点">2.解释器模式优缺点
&lt;/h2>&lt;p>解释器模式（Interpreter Pattern）的优缺点如下：&lt;/p>
&lt;h3 id="21优点">2.1.优点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>易于扩展&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>新的操作和文法可以很容易地添加到解释器中，而不需要修改已有的代码，这符合开闭原则。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分离性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将文法规则的定义与文法的解释逻辑分离，使得文法规则的变化或扩展不会影响到解释器的实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可定制性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>用户可以定制自己的文法规则，并且可以创建自己的解释器来解释特定的语言。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>易于实现简单文法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于简单的文法，实现起来相对简单直观。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高复用性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>可以将重复的解释逻辑封装在解释器中，提高代码的复用性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>易于维护和修改&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>由于文法规则和解释逻辑的分离，使得维护和修改变得更加容易。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="22缺点">2.2.缺点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>性能问题&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>解释器模式通常使用大量的循环和递归调用来解释和执行语句，这可能导致性能问题，特别是在复杂或者大量的文法规则时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>会引起类膨胀&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>每条规则至少需要定义一个类，当文法规则很多时，会导致系统中存在大量的类，这会增加系统的复杂性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可应用场景有限&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>解释器模式通常只适用于问题可以清晰定义文法规则的情况，对于不适合定义文法的问题，使用解释器模式可能并不合适。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>难以处理复杂的文法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当文法非常复杂时，使用解释器模式可能会导致系统难以管理和维护。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>调试困难&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>解释器模式的逻辑可能非常复杂，尤其是当涉及到递归和大量的条件判断时，这使得调试变得困难。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可能导致重复代码&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些情况下，为了实现特定的文法规则，可能会在不同的表达式类中编写相似的代码，导致代码重复。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>难以优化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>由于解释器模式的动态解释特性，对于性能的优化可能比较困难，尤其是当需要对解释执行的结果进行优化时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>总的来说，解释器模式在处理语言或表达式解析这类问题时非常有用，但需要权衡其可能带来的性能和复杂性问题。在实际应用中，如果问题域适合使用解释器模式，并且能够接受其潜在的缺点，那么它是一个强大的工具。&lt;/p>
&lt;h2 id="3解释器模式在实际开发中有哪些常见的应用场景">3.解释器模式在实际开发中有哪些常见的应用场景？
&lt;/h2>&lt;p>解释器模式是一种行为设计模式，它适用于以下类型的编程问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>需要解释一种语言&lt;/strong>：当你需要解释一种语言（如简单的编程语言、查询语言等）时，可以使用解释器模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>语法或表达式树的需求&lt;/strong>：当你需要处理复杂的语法或表达式树时，解释器模式可以提供一种结构化的方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>易于改变的语法规则&lt;/strong>：当你希望在不修改现有代码的情况下轻松添加新的语法规则时。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>日志处理&lt;/strong>：在处理日志时，如果有很多服务会产生大量的日志，并且需要对日志进行解析和生成报表，可以使用解释器模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>表达式求值器&lt;/strong>：在处理复杂的数学表达式或逻辑表达式时，解释器模式非常有用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置文件解析&lt;/strong>：当应用程序需要从配置文件中读取参数和设置时，解释器模式可以用来解析配置文件的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编译器设计&lt;/strong>：解释器模式在编译器设计中非常常见，用于将源代码转换为机器代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据库查询语言&lt;/strong>：在数据库系统中，解释器模式用于解释和执行查询语言，如 SQL。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>正则表达式&lt;/strong>：解释器模式可以用于解析和执行正则表达式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板引擎&lt;/strong>：在Web开发中，模板引擎可能会使用解释器模式来解释模板中的表达式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自然语言处理&lt;/strong>：在聊天机器人或虚拟助手中，解释器模式可以用于理解和处理用户的自然语言输入。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>领域特定语言（DSL）&lt;/strong>：在特定领域中，如金融交易系统，可能会开发自己的DSL来描述交易策略，解释器模式可以用来实现这些DSL。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在实际开发中，使用解释器模式时需要考虑其优缺点。它提供了良好的扩展性和灵活性，但可能会导致性能问题、系统复杂度增加以及难以维护。因此，它通常适用于语法简单、执行效率不是关键问题、以及问题重复出现且可以用简单语言表达的场景。&lt;/p>
&lt;p>在实现解释器模式时，通常会构建一个抽象表达式接口，定义终结符和非终结符表达式类，以及一个上下文环境类，客户端代码则负责构建表达式并调用解释器进行解释。&lt;/p>
&lt;h2 id="4如何优化解释器模式以提高其性能">4.如何优化解释器模式以提高其性能？
&lt;/h2>&lt;p>为了优化解释器模式以提高其性能，可以采取以下几种策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>缓存计算结果&lt;/strong>：对于重复使用的表达式节点，可以通过缓存其计算结果来避免重复计算，这样可以显著提高解释器的执行效率 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用编译器技术&lt;/strong>：将解释器的解析和执行过程分为两个阶段，首先将源代码解析为中间表示形式（如字节码或机器码），然后通过编译器技术对中间表示进行优化和执行，这种方式可以将解释器转化为即时编译器，从而提高性能 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优化抽象语法树（AST）&lt;/strong>：通过优化AST的结构和遍历算法，减少不必要的计算和内存消耗。例如，可以使用尾递归优化、剪枝策略等技术，简化和优化AST的构建和遍历过程 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免重复解析&lt;/strong>：如果需要多次处理相同的输入数据，可以考虑预解析所有可能的输入数据并将结果保存起来，这样在后续处理过程中，无需再次解析输入数据，只需查找预解析的结果即可 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>并行解析&lt;/strong>：如果解释器需要处理大量输入数据，可以考虑将解析过程并行化，以利用多核处理器的计算能力 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>延迟解析&lt;/strong>：在某些情况下，输入数据的某些部分可能并不需要立即解析。例如，当解释器用于处理配置文件时，可以只解析当前需要的配置项，而将其他配置项的解析推迟到实际需要时 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优化解析算法&lt;/strong>：使用更高效的算法来解析输入数据，以减少解析过程中的时间开销。例如，可以使用词法分析器和语法分析器生成器（如Flex和Bison）来构建解析器，这些工具可以生成高效的解析代码，从而提高解析性能 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>部分解析缓存&lt;/strong>：在某些情况下，输入数据可能包含许多重复的子结构。为了避免重复解析这些子结构，可以将它们的解析结果存储在缓存中。当遇到相同的子结构时，直接从缓存中获取解析结果，从而提高解析速度 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>表达式求值缓存&lt;/strong>：在解释器模式中，不同的表达式对象可能需要执行相似的计算过程。为了避免重复进行这些计算，可以在表达式对象中添加一个缓存层，用于存储计算结果。当需要执行相同的计算时，可以直接从缓存中获取结果，从而提高表达式求值的性能 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这些优化策略，可以在保持解释器模式带来的好处的同时，减少其可能引入的性能问题。在实际应用中，需要根据具体情况灵活选择和调整这些策略。&lt;/p>
&lt;h2 id="5使用编译器技术将解释器转化为即时编译器有哪些潜在的优势和挑战">5.使用编译器技术将解释器转化为即时编译器有哪些潜在的优势和挑战？
&lt;/h2>&lt;p>使用编译器技术将解释器转化为即时编译器（JIT，Just-In-Time compilation）的潜在优势和挑战如下：&lt;/p>
&lt;h3 id="51优势">5.1.优势
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>性能提升&lt;/strong>：即时编译器在运行时将热点代码编译成优化的机器码，可以显著提高程序的执行速度，尤其是在循环和频繁调用的方法上 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优化的代码&lt;/strong>：JIT编译器可以根据程序的实际运行情况来进行优化，如方法内联、逃逸分析、循环展开等，这些优化可以减少内存消耗和提高执行效率 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态优化&lt;/strong>：即时编译器可以在程序运行过程中根据收集到的统计信息进行动态优化，适应程序的行为变化，这是静态编译器无法做到的 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源利用&lt;/strong>：JIT编译器可以选择性地编译热点代码，避免了对不常执行的代码进行编译，从而节省了编译资源和内存空间 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>跨平台性&lt;/strong>：即时编译器保留了Java的跨平台特性，同时提供了接近本地编译语言的性能 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="52挑战">5.2.挑战
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>启动延迟&lt;/strong>：即时编译器需要在程序运行时进行编译，这可能会导致程序启动速度变慢，尤其是在代码量较大时 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存消耗&lt;/strong>：即时编译器生成的机器码需要存储在内存中，这可能会增加内存的消耗，尤其是在代码缓存（codeCache）较小的环境下 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编译器复杂性&lt;/strong>：实现一个高效的即时编译器需要复杂的编译技术，包括中间表示（IR）、优化算法和代码生成等，这增加了编译器的复杂性 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>稳定性问题&lt;/strong>：由于即时编译器在运行时进行编译，如果编译过程中出现问题，可能会影响程序的稳定性 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>调试难度&lt;/strong>：即时编译器生成的机器码可能会使得调试变得更加困难，因为源代码和执行的机器码之间没有直接的映射关系 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源竞争&lt;/strong>：在高并发环境下，即时编译器可能会与应用程序的其他部分竞争CPU资源，这可能会影响整体性能 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>总的来说，即时编译器通过在运行时优化代码，可以显著提高程序的性能，但同时也带来了一些挑战，如启动延迟、内存消耗和编译器复杂性等。开发者需要根据具体的应用场景和性能要求来权衡是否使用即时编译器技术。&lt;/p>
&lt;h2 id="6如何实现缓存计算结果以提高解释器模式的性能">6.如何实现缓存计算结果以提高解释器模式的性能？
&lt;/h2>&lt;p>在解释器模式中实现缓存计算结果以提高性能，通常涉及到以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>确定可缓存的操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>识别出解释器模式中重复执行且开销较大的操作，这些操作的计算结果可以在一段时间内被复用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用缓存机制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>设计一个缓存机制，可以是一个简单的哈希表，也可以是一个更复杂的缓存库，用于存储计算结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现缓存逻辑&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在解释器的 &lt;code>interpret()&lt;/code> 方法中，添加逻辑来检查所需结果是否已经在缓存中。&lt;/li>
&lt;li>如果结果在缓存中，直接返回缓存的结果，而不执行实际的计算。&lt;/li>
&lt;li>如果结果不在缓存中，执行计算，然后将结果存储在缓存中，再返回结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>考虑缓存失效策略&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确定缓存数据的有效期，以及何时应该更新或删除缓存中的数据。&lt;/li>
&lt;li>实现缓存失效策略，比如最近最少使用（LRU）算法，以确保缓存数据的有效性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程安全&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果在多线程环境中使用缓存，确保缓存的访问是线程安全的，避免并发问题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>监控和调优&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>监控缓存命中率和性能，根据实际使用情况调整缓存大小和失效策略。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="61示例代码c">6.1.示例代码（C++）
&lt;/h3>&lt;p>以下是一个简单的示例，演示了如何在解释器模式中实现缓存计算结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unordered_map&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">interpret&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">TerminalExpression&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TerminalExpression&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">interpret&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Calculating terminal expression...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 复杂表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ComplexExpression&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">operation&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ComplexExpression&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">operation&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">operation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">operation&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">interpret&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Calculating complex expression...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">leftResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">interpret&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">rightResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">interpret&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">operation&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;+&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">leftResult&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">rightResult&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">operation&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">leftResult&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">rightResult&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 缓存装饰器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">CachedExpression&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Expression&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">expr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unordered_map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CachedExpression&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Expression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">expr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">expr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">interpret&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;CachedExpression&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Using cached result...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">expr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">interpret&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">terminal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TerminalExpression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">complexExpr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ComplexExpression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">terminal&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TerminalExpression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="sc">&amp;#39;+&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">cachedExpr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">CachedExpression&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">complexExpr&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第一次计算，会执行并缓存结果
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;First interpretation: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">cachedExpr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">interpret&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 第二次计算，会使用缓存的结果
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Second interpretation: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">cachedExpr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">interpret&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>CachedExpression&lt;/code> 是一个装饰器，它包装了实际的表达式，并实现了缓存逻辑。当 &lt;code>interpret()&lt;/code> 方法被调用时，它会检查缓存中是否存在结果，如果存在，则直接返回缓存的结果；如果不存在，则执行计算，并将结果存储在缓存中。&lt;/p>
&lt;p>通过这种方式，可以显著减少重复计算，提高解释器模式的性能。&lt;/p>
&lt;h2 id="7在多线程环境下如何确保缓存的线程安全">7.在多线程环境下，如何确保缓存的线程安全？
&lt;/h2>&lt;p>在多线程环境下，确保缓存的线程安全通常涉及以下几个策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用同步机制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>可以通过在缓存访问代码块中添加同步锁（如 &lt;code>synchronized&lt;/code> 关键字）来确保同一时间只有一个线程可以修改缓存。这种方式简单但可能会影响性能，因为它限制了并发访问。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用并发数据结构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>利用 &lt;code>java.util.concurrent&lt;/code> 包中提供的线程安全的数据结构，如 &lt;code>ConcurrentHashMap&lt;/code>，可以减少锁的需要，提供更好的并发性能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用原子操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于简单的缓存操作，可以使用原子类（如 &lt;code>AtomicInteger&lt;/code>），这些类提供了无锁的线程安全操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用锁分段技术&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>锁分段是一种减少锁竞争的技术，通过将数据结构分成多个段，每段使用一个锁，从而允许多个线程同时操作不同段的数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用无锁编程技术&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>利用 &lt;code>Compare-and-Swap&lt;/code>（CAS）等原子操作来实现无锁的数据结构，这通常比传统的锁机制有更高的并发性能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用现代缓存框架&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>现代缓存框架如 Caffeine 已经内置了线程安全的支持。Caffeine 使用细粒度的锁定机制来保护共享资源，确保并发访问的正确性和一致性。它还提供了丰富的配置选项，如自动刷新、过期策略等，这些都是在保证线程安全的前提下进行的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免缓存污染&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保缓存中的数据不会被不正确的并发操作污染。例如，使用 &lt;code>volatile&lt;/code> 关键字或者锁来确保缓存的可见性和有序性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存屏障&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些情况下，可能需要使用内存屏障来确保操作的顺序性和内存的可见性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少缓存的共享&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>尽可能减少多个线程对同一缓存数据的共享，可以通过将缓存数据复制到线程私有的存储中来避免共享。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>监控和调优&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用缓存框架提供的监控工具来观察缓存的性能和线程安全问题，根据实际情况进行调优。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过上述策略，可以在多线程环境中有效地确保缓存的线程安全，同时保持良好的性能。在实际应用中，可能需要根据具体的业务场景和性能要求来选择和组合这些策略。&lt;/p>
&lt;h2 id="8在优化抽象语法树ast时有哪些常见的优化技术">8.在优化抽象语法树（AST）时，有哪些常见的优化技术？
&lt;/h2>&lt;p>在优化抽象语法树（AST）时，以下是一些常见的优化技术：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>节点匹配优化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>改进AST节点匹配算法，确保在比较两个AST时能够更准确地识别出相同的节点，减少不必要的编辑操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编辑脚本简化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过合并相似的编辑操作（如连续的插入或删除）来简化生成的编辑脚本，从而减少编辑操作的数量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>启发式算法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用启发式算法来优化节点的移动和更新操作，减少不必要的节点操作，提高AST编辑脚本的质量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>超参数优化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>根据特定的AST特性和差异，调整AST比较算法中的超参数，如相似度阈值、节点大小限制等，以提高差异计算的准确性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>算法配置优化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过全局或局部的超参数优化，找到最佳的算法配置，以适应不同的编程语言或AST元模型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据驱动的方法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用数据驱动的方法，如DAT（Diff Auto Tuning），来自动调整AST比较算法的参数，以优化编辑脚本的长度和质量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>统计验证&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过统计验证和交叉验证来评估AST优化技术的有效性，确保优化方法在不同场景下都能保持一致的性能提升。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>算法比较&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>比较不同的AST比较算法，选择或组合最有效的算法来处理特定的AST结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能评估&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对AST优化技术进行性能评估，包括执行时间、内存消耗和编辑脚本的质量，以找到最佳的优化策略。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自动化工具&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>开发自动化工具来支持AST优化过程，包括自动调整参数、自动评估优化效果和自动应用优化策略。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>这些优化技术可以帮助提高AST处理的性能，减少不必要的计算，提高AST编辑脚本的质量和可读性。在实际应用中，可能需要根据具体的AST结构和差异计算需求来选择合适的优化策略。&lt;/p>
&lt;h2 id="9能否提供一些具体的ast优化案例以便我更好地理解这些技术是如何应用的">9.能否提供一些具体的AST优化案例，以便我更好地理解这些技术是如何应用的？
&lt;/h2>&lt;p>在优化抽象语法树（AST）时，以下是一些具体的优化技术：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>常量折叠&lt;/strong>：在编译时计算常量表达式的值，而不是在运行时计算。这可以减少运行时的计算负担，并可能消除不必要的计算。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>死代码消除&lt;/strong>：移除那些不会被执行或者对程序输出没有影响的代码部分。这可以通过分析AST来识别未使用的变量和代码路径。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>循环优化&lt;/strong>：对循环结构进行优化，例如循环展开、循环融合、循环拆分等，以减少循环开销和提高缓存利用率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>表达式简化&lt;/strong>：通过简化复杂的表达式来减少运行时的计算量。例如，将复杂的算术表达式分解为简单的步骤。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存访问优化&lt;/strong>：优化数据结构的布局，以减少内存访问延迟和提高数据的局部性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>指令重排&lt;/strong>：在不影响程序语义的前提下，重新排列指令的顺序，以提高指令流水线的效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码内联&lt;/strong>：将函数调用的代码直接插入到调用点，以减少函数调用的开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>条件编译&lt;/strong>：在编译时根据条件删除或添加代码段，以适应不同的编译环境或配置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>消除冗余代码&lt;/strong>：通过分析AST来识别并删除重复的代码块，减少代码的冗余。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优化数据类型&lt;/strong>：在AST中识别并优化数据类型，例如使用更小的数据类型来减少内存使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>控制流分析&lt;/strong>：通过分析AST中的控制流，识别并优化条件判断、循环和分支结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码生成优化&lt;/strong>：在代码生成阶段，根据目标平台的特点优化生成的机器码。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>这些优化技术可以单独使用，也可以组合使用，以实现最佳的性能提升。在实际应用中，需要根据具体的程序特性和运行环境来选择最合适的优化策略。&lt;/p>
&lt;h2 id="10在进行ast优化时如何确定哪些优化技术是必要的">10.在进行AST优化时，如何确定哪些优化技术是必要的？
&lt;/h2>&lt;p>在进行AST优化时，确定哪些优化技术是必要的，通常需要考虑以下几个方面：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>代码复杂度&lt;/strong>：如果代码中包含复杂的表达式或深层嵌套的结构，可能需要应用优化技术如常量折叠、表达式简化或循环优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能瓶颈&lt;/strong>：通过性能分析工具识别出程序的性能瓶颈，针对这些瓶颈应用优化技术，如循环展开、指令重排或内存访问优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>运行时特性&lt;/strong>：考虑代码的运行时特性，如热点代码识别，对频繁执行的代码段进行优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>目标平台&lt;/strong>：不同的目标平台可能对某些优化技术有更好的支持，根据目标平台的特点选择合适的优化技术。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码可读性&lt;/strong>：在不牺牲代码可读性的前提下进行优化，确保优化后的代码仍然易于理解和维护。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>开发和维护成本&lt;/strong>：权衡优化带来的性能提升和所需的开发及维护成本，选择性价比最高的优化技术。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>特定场景需求&lt;/strong>：根据特定的应用场景，如前端框架的模板优化、数据库查询优化等，选择适合的优化技术。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>社区和工具支持&lt;/strong>：利用现有的工具和社区资源，如Babel插件、代码分析工具等，来辅助确定和实施优化。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过综合考虑上述因素，可以更有针对性地选择和应用AST优化技术，以提高程序的性能和可维护性。在实际开发中，可能需要多次迭代和测试，以找到最佳的优化策略。&lt;/p>
&lt;h2 id="11在进行ast优化时如何确定哪些优化技术最适合我的项目需求">11.在进行AST优化时，如何确定哪些优化技术最适合我的项目需求？
&lt;/h2>&lt;p>在进行AST优化时，确定哪些优化技术最适合项目需求，可以通过以下几个步骤进行：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>性能分析&lt;/strong>：首先，使用性能分析工具来识别代码中的瓶颈和热点。这将帮助你了解哪些部分的代码最需要优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码复杂度评估&lt;/strong>：分析代码的复杂度，确定是否存在复杂的表达式或深层嵌套的结构，这些可能是优化的目标。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>项目需求分析&lt;/strong>：根据项目的具体需求，确定哪些优化技术能够带来最大的性能提升。例如，如果项目需要快速响应，那么循环优化可能是重点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>目标平台特性&lt;/strong>：考虑目标平台的特性，选择能够在该平台上发挥最大效能的优化技术。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>开发和维护成本&lt;/strong>：评估不同优化技术的开发和维护成本，选择性价比最高的技术。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>社区和工具支持&lt;/strong>：利用现有的工具和社区资源，如Babel插件、代码分析工具等，来辅助确定和实施优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试和验证&lt;/strong>：对选定的优化技术进行测试和验证，确保它们能够达到预期的效果，并且不会引入新的问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续迭代&lt;/strong>：优化是一个持续的过程，需要不断地评估和调整优化策略，以适应项目的发展和变化。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述步骤，你可以更有针对性地选择和应用AST优化技术，以提高程序的性能和可维护性。在实际开发中，可能需要多次迭代和测试，以找到最佳的优化策略。&lt;/p>
&lt;h2 id="12能否提供一些关于如何分析ast以识别优化机会的指导">12.能否提供一些关于如何分析AST以识别优化机会的指导？
&lt;/h2>&lt;p>在进行AST优化时，确定哪些优化技术最适合项目需求，可以通过以下几个步骤进行：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>性能分析&lt;/strong>：首先，使用性能分析工具来识别代码中的瓶颈和热点。这将帮助你了解哪些部分的代码最需要优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码复杂度评估&lt;/strong>：分析代码的复杂度，确定是否存在复杂的表达式或深层嵌套的结构，这些可能是优化的目标。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>项目需求分析&lt;/strong>：根据项目的具体需求，确定哪些优化技术能够带来最大的性能提升。例如，如果项目需要快速响应，那么循环优化可能是重点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>目标平台特性&lt;/strong>：考虑目标平台的特性，选择能够在该平台上发挥最大效能的优化技术。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>开发和维护成本&lt;/strong>：评估不同优化技术的开发和维护成本，选择性价比最高的技术。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>社区和工具支持&lt;/strong>：利用现有的工具和社区资源，如Babel插件、代码分析工具等，来辅助确定和实施优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试和验证&lt;/strong>：对选定的优化技术进行测试和验证，确保它们能够达到预期的效果，并且不会引入新的问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续迭代&lt;/strong>：优化是一个持续的过程，需要不断地评估和调整优化策略，以适应项目的发展和变化。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述步骤，你可以更有针对性地选择和应用AST优化技术，以提高程序的性能和可维护性。在实际开发中，可能需要多次迭代和测试，以找到最佳的优化策略。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Iterator Pattern</title><link>https://wesigj.github.io/p/design-pattern-iterator-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-iterator-pattern/</guid><description>&lt;h1 id="设计模式-迭代器模式-iterator-pattern">设计模式-迭代器模式-Iterator Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>迭代器模式（Iterator Pattern）是一种行为型设计模式&lt;/li>
&lt;li>它提供一种方法来访问聚合对象中各个元素，同时不暴露其内部的细节&lt;/li>
&lt;li>迭代器模式的目的是将访问数据的逻辑与数据结构本身分离，从而可以在不同的数据结构上使用相同的访问逻辑&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1迭代器模式iterator-pattern">1.迭代器模式（Iterator Pattern）
&lt;/h2>&lt;p>迭代器模式（Iterator Pattern）是一种行为型设计模式，它提供一种方法来访问聚合对象中各个元素，同时不暴露其内部的细节。迭代器模式的目的是将访问数据的逻辑与数据结构本身分离，从而可以在不同的数据结构上使用相同的访问逻辑。&lt;/p>
&lt;p>在C++中实现迭代器模式通常涉及到以下几个组件：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>迭代器（Iterator）&lt;/strong>：定义访问和遍历元素的接口。&lt;/li>
&lt;li>&lt;strong>具体迭代器（Concrete Iterator）&lt;/strong>：实现迭代器接口的具体类，记录遍历过程中的当前位置。&lt;/li>
&lt;li>&lt;strong>容器（Container）&lt;/strong>：定义创建相应迭代器对象的接口。&lt;/li>
&lt;li>&lt;strong>具体容器（Concrete Container）&lt;/strong>：实现创建相应迭代器的接口，存储数据元素。&lt;/li>
&lt;/ol>
&lt;p>下面是一个简单的迭代器模式的C++实现示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 迭代器接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Iterator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Iterator&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">hasNext&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体迭代器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteIterator&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Iterator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteIterator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">hasNext&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">hasNext&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">out_of_range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No more elements&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 容器接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Container&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Container&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">createIterator&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体容器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteContainer&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Container&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteContainer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">createIterator&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteIterator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteContainer&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Iterator&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">iterator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">createIterator&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">iterator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">hasNext&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">iterator&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>ConcreteIterator&lt;/code> 是具体迭代器，它实现了 &lt;code>Iterator&lt;/code> 接口，并记录了遍历过程中的当前位置。&lt;code>ConcreteContainer&lt;/code> 是具体容器，它实现了 &lt;code>Container&lt;/code> 接口，并创建了一个 &lt;code>ConcreteIterator&lt;/code> 实例来遍历其内部的数据。&lt;/p>
&lt;p>&lt;code>main&lt;/code> 函数中创建了一个 &lt;code>ConcreteContainer&lt;/code> 实例，并使用它来创建一个迭代器，然后通过迭代器遍历容器中的所有元素。&lt;/p>
&lt;p>请注意，这个例子中使用了动态内存分配（&lt;code>new&lt;/code> 关键字）来创建迭代器，因此在结束时需要手动释放内存（&lt;code>delete&lt;/code> 关键字）。在实际的C++项目中，你可能会使用智能指针来自动管理内存，或者使用C++11及以上版本的范围基迭代器来简化代码。&lt;/p>
&lt;h2 id="2迭代器模式优缺点">2.迭代器模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>单一职责原则。 通过将体积庞大的遍历算法代码抽取为独立的类， 你可对客户端代码和集合进行整理。&lt;/li>
&lt;li>开闭原则。 你可实现新型的集合和迭代器并将其传递给现有代码， 无需修改现有代码。&lt;/li>
&lt;li>你可以并行遍历同一集合， 因为每个迭代器对象都包含其自身的遍历状态。&lt;/li>
&lt;li>相似的， 你可以暂停遍历并在需要时继续。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>如果你的程序只与简单的集合进行交互， 应用该模式可能会矫枉过正。&lt;/li>
&lt;li>对于某些特殊集合， 使用迭代器可能比直接遍历的效率低。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>迭代器模式（Iterator Pattern）是一种常用的设计模式，它在软件开发中用于顺序访问一个聚合对象中的各个元素，而不需要暴露其内部的表现。以下是迭代器模式的一些优缺点：&lt;/p>
&lt;h3 id="21优点">2.1.优点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>访问聚合对象内容而无需了解其内部结构&lt;/strong>：迭代器提供了一种统一的接口来访问不同的数据结构，使得客户端代码可以通用地遍历各种类型的数据集合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持多种遍历&lt;/strong>：可以实现多种类型的迭代器，例如正向迭代器、反向迭代器等，以支持不同的遍历需求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>增加新的聚合类型和迭代器类型&lt;/strong>：可以独立地增加新的聚合类和迭代器类，而不需要修改现有的代码，这符合开闭原则。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少系统的耦合度&lt;/strong>：迭代器模式将聚合对象和客户端代码解耦，客户端代码不需要知道数据结构的细节，只需要通过迭代器来访问数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持多种遍历算法&lt;/strong>：可以设计多种迭代器来实现不同的遍历算法，使得算法独立于数据结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高代码的可复用性&lt;/strong>：迭代器模式使得遍历算法和数据结构分离，提高了代码的复用性。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22缺点">2.2.缺点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>增加系统的复杂性&lt;/strong>：对于简单的数据结构，使用迭代器模式可能会增加系统的复杂性，因为需要额外实现迭代器类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代器的开销&lt;/strong>：迭代器的实现可能会引入额外的内存和时间开销，尤其是在迭代器需要存储遍历状态的情况下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可能不支持所有操作&lt;/strong>：某些数据结构可能不支持所有类型的迭代器，例如，某些数据结构可能不支持反向迭代器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代器的同步问题&lt;/strong>：在多线程环境中，迭代器可能会遇到同步问题，需要额外的机制来确保线程安全。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代器失效问题&lt;/strong>：在迭代过程中，如果聚合对象的结构发生变化（如添加或删除元素），可能会导致迭代器失效，需要额外的机制来处理这种情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代器的通用性限制&lt;/strong>：迭代器模式通常适用于线性结构，对于树形结构或图形结构，可能需要特殊的迭代器实现。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>总的来说，迭代器模式是一种强大的设计模式，它提供了一种统一的方式来遍历不同的数据结构。然而，它也有其局限性，特别是在处理复杂数据结构或需要高效遍历的情况下。在决定使用迭代器模式时，应该权衡其优缺点，以确保它适合特定的应用场景。&lt;/p>
&lt;h2 id="3迭代器模式在实际开发中有哪些常见的应用场景">3.迭代器模式在实际开发中有哪些常见的应用场景？
&lt;/h2>&lt;p>迭代器模式在软件开发中有着广泛的应用，特别是在需要遍历或访问聚合对象元素时。以下是一些常见的应用场景：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>集合框架&lt;/strong>：在许多编程语言的标准库中，集合框架（如 Java 的 &lt;code>java.util&lt;/code> 包或 C++ 的 STL）广泛使用了迭代器模式，以提供统一的接口来遍历集合中的元素。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据访问&lt;/strong>：在数据库应用中，迭代器可以用来遍历查询结果集，而不需要关心数据是如何存储和检索的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文件系统遍历&lt;/strong>：在文件管理软件中，迭代器可以用来遍历文件系统中的目录和文件，提供一种统一的方式来访问文件和目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>树结构遍历&lt;/strong>：在需要遍历树结构（如 DOM 树、语法树等）时，迭代器模式可以用来提供前序、中序、后序等不同的遍历方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图形用户界面&lt;/strong>：在图形用户界面（GUI）开发中，迭代器可以用来遍历界面组件，如窗口、按钮、列表项等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络爬虫&lt;/strong>：在网络爬虫设计中，迭代器可以用来遍历网页中的链接或元素，实现对网页内容的访问和提取。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏开发&lt;/strong>：在游戏开发中，迭代器可以用来遍历游戏世界中的所有对象，如角色、道具、敌人等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据流处理&lt;/strong>：在数据流处理系统中，迭代器可以用来遍历数据流中的记录或事件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缓存系统&lt;/strong>：在缓存系统中，迭代器可以用来遍历缓存中的条目，实现对缓存内容的访问和更新。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>算法实现&lt;/strong>：在实现某些算法（如排序、搜索等）时，迭代器可以用来提供对数据集合的访问，而不需要关心数据的具体存储结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多维数组遍历&lt;/strong>：在处理多维数组或矩阵时，迭代器可以用来简化元素的访问和遍历。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>复合数据结构&lt;/strong>：在处理复合数据结构（如链表、队列、栈等）时，迭代器可以用来提供统一的遍历接口。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>迭代器模式的应用场景非常广泛，它的核心价值在于提供了一种抽象和解耦的方式，使得客户端代码可以独立于数据结构的具体实现，从而提高了代码的灵活性和可维护性。&lt;/p>
&lt;h2 id="4在实际开发中如何确保迭代器模式的正确使用和性能优化">4.在实际开发中，如何确保迭代器模式的正确使用和性能优化？
&lt;/h2>&lt;p>在实际开发中，确保迭代器模式的正确使用和性能优化，可以遵循以下建议：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>理解迭代器模式的适用场景&lt;/strong>：使用迭代器模式来访问集合对象的内容而无需暴露其内部结构，为不同类型的集合结构提供统一的遍历接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>正确实现迭代器和容器&lt;/strong>：确保迭代器实现了必要的方法，如 &lt;code>hasNext()&lt;/code>, &lt;code>next()&lt;/code>, &lt;code>remove()&lt;/code> 等，并确保容器能够创建适当的迭代器实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免在迭代过程中修改容器&lt;/strong>：在迭代过程中直接修改容器（如添加或删除元素）可能会导致迭代器失效。如果需要修改，应该重新获取迭代器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用适合的迭代器类型&lt;/strong>：根据需要选择正向迭代器、反向迭代器或同时支持两者。对于复杂的数据结构，可能需要实现特殊的迭代器来支持特定的遍历策略。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能优化&lt;/strong>：尽量减少不必要的方法调用，如在循环中只调用一次 &lt;code>hasNext()&lt;/code>。考虑使用缓存来存储已经访问过的元素，以避免重复计算。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>处理异常和错误&lt;/strong>：妥善处理可能的并发修改异常和其他错误，确保迭代器能够在容器内容变化时正确响应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>利用现有的迭代器&lt;/strong>：在可能的情况下，利用语言标准库提供的迭代器，如 Java 的 &lt;code>java.util.Iterator&lt;/code> 或 C++ 的 STL 迭代器，这些迭代器已经经过优化，能够提供良好的性能和稳定性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码重构和设计模式结合&lt;/strong>：在需要时，可以使用设计模式如策略模式来实现不同的迭代策略，或者使用装饰者模式来增强迭代器的功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试和验证&lt;/strong>：确保通过测试来验证迭代器的正确性和性能，特别是在多线程环境下的线程安全性和性能表现。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过遵循这些最佳实践，可以确保迭代器模式在实际开发中的有效使用，并优化其性能。&lt;/p>
&lt;h2 id="5在c中如何使用迭代器来遍历stl容器中的元素">5.在C++中，如何使用迭代器来遍历STL容器中的元素？
&lt;/h2>&lt;p>在C++中，标准模板库（STL）提供了多种容器，如 &lt;code>vector&lt;/code>、&lt;code>list&lt;/code>、&lt;code>map&lt;/code> 等，每种容器都支持迭代器来遍历其元素。STL迭代器遵循迭代器模式，提供了一种访问容器元素的统一方式。&lt;/p>
&lt;p>以下是使用迭代器遍历STL容器元素的一些常见方法：&lt;/p>
&lt;h3 id="1使用传统的迭代器">1.使用传统的迭代器
&lt;/h3>&lt;p>对于序列容器（如 &lt;code>vector&lt;/code>、&lt;code>deque&lt;/code>、&lt;code>list&lt;/code>）和关联容器（如 &lt;code>set&lt;/code>、&lt;code>map&lt;/code>），你可以使用以下方式遍历：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用迭代器遍历
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2使用常量迭代器">2.使用常量迭代器
&lt;/h3>&lt;p>如果你不需要修改容器中的元素，可以使用常量迭代器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用常量迭代器遍历
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">const_iterator&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3使用基于范围的for循环c11及以上">3.使用基于范围的for循环（C++11及以上）
&lt;/h3>&lt;p>C++11引入了基于范围的for循环，它使得遍历容器更加简洁：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 基于范围的for循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nl">num&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4使用反向迭代器">4.使用反向迭代器
&lt;/h3>&lt;p>STL容器也支持反向迭代器，用于从后向前遍历容器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用反向迭代器遍历
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">reverse_iterator&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rbegin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rend&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="5使用c11的迭代器">5.使用C++11的迭代器
&lt;/h3>&lt;p>C++11还引入了自动类型推导，使得迭代器的使用更加方便：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用auto关键字简化迭代器的声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些方法提供了灵活的方式来遍历STL容器中的元素，选择哪种方法取决于你的具体需求和C++版本。&lt;/p>
&lt;h2 id="6选代器模式在多线程环境下使用时需要注意哪些问题">6.选代器模式在多线程环境下使用时需要注意哪些问题？
&lt;/h2>&lt;p>在多线程环境下使用迭代器模式时，需要注意以下几个问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>线程安全&lt;/strong>：迭代器通常不是线程安全的。如果在迭代过程中，其他线程修改了集合，可能会导致迭代器抛出&lt;code>ConcurrentModificationException&lt;/code>。为了避免这种情况，可以使用线程安全的集合类，如&lt;code>CopyOnWriteArrayList&lt;/code>，或者在迭代期间对集合加锁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免共享迭代器&lt;/strong>：不要在多个线程之间共享同一个迭代器实例。每个线程应该使用独立的迭代器实例来遍历集合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用迭代器的&lt;code>remove&lt;/code>方法&lt;/strong>：如果需要在迭代过程中删除元素，应该使用迭代器提供的&lt;code>remove&lt;/code>方法，而不是直接调用集合的&lt;code>remove&lt;/code>方法，这样可以避免&lt;code>ConcurrentModificationException&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代器失效问题&lt;/strong>：在迭代过程中，如果集合结构发生变化（例如，添加或删除元素），可能会导致迭代器失效。需要确保在迭代期间不会修改集合，或者使用支持修改的迭代器实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：在多线程环境中，对集合的同步访问可能会影响性能。需要权衡线程安全和性能之间的关系，选择合适的并发控制机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>并发容器&lt;/strong>：Java 5及以上版本提供了并发容器，如&lt;code>ConcurrentHashMap&lt;/code>和&lt;code>CopyOnWriteArrayList&lt;/code>，它们内部实现了更好的并发控制机制，可以在多线程环境中安全地使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代器的&lt;code>fail-fast&lt;/code>机制&lt;/strong>：许多Java集合的迭代器使用&lt;code>fail-fast&lt;/code>机制，这意味着如果检测到集合在迭代过程中被修改，迭代器会立即抛出异常。这是为了防止不确定的行为和潜在的错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>克隆集合&lt;/strong>：作为一种替代方法，可以在迭代之前克隆集合的副本，然后在副本上进行迭代。这样可以避免在迭代期间对原始集合的修改，但可能会引入显著的性能开销。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在实际开发中，应该根据具体的应用场景和性能要求来选择合适的迭代器和并发控制策略。&lt;/p>
&lt;h2 id="7选代器模式在多线程环境下使用示例-cpp">7.选代器模式在多线程环境下使用示例 cpp
&lt;/h2>&lt;p>在C++中，迭代器模式的多线程使用示例需要考虑线程安全问题。以下是一个简单的示例，展示如何在多线程环境下安全地使用迭代器来遍历一个线程安全的容器。&lt;/p>
&lt;p>首先，我们需要一个线程安全的容器。C++标准库中的&lt;code>std::vector&lt;/code>不是线程安全的，所以我们需要自己实现一个线程安全的容器，或者使用互斥锁来保护对容器的访问。这里，我们使用&lt;code>std::mutex&lt;/code>来保护一个&lt;code>std::vector&lt;/code>的访问。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iterator&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ThreadSafeVector&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">mutable&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">begin&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">print_elements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ThreadSafeVector&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ThreadSafeVector&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 启动多个线程来打印向量内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">print_elements&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">print_elements&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 启动一个线程来修改向量内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">modifier&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">modifier&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>ThreadSafeVector&lt;/code>类封装了一个&lt;code>std::vector&lt;/code>和一个互斥锁&lt;code>std::mutex&lt;/code>。任何对向量的访问（通过&lt;code>begin&lt;/code>和&lt;code>end&lt;/code>方法）都需要获取互斥锁，以确保线程安全。&lt;/p>
&lt;p>&lt;code>print_elements&lt;/code>函数接受一个&lt;code>ThreadSafeVector&lt;/code>的引用，并使用迭代器遍历并打印容器中的所有元素。&lt;/p>
&lt;p>在&lt;code>main&lt;/code>函数中，我们创建了三个线程：两个线程调用&lt;code>print_elements&lt;/code>函数来打印向量的内容，另一个线程作为修改器，向向量中添加元素。由于我们使用了互斥锁，所以即使在多线程环境下，迭代器的使用也是安全的。&lt;/p>
&lt;p>请注意，这个示例仅用于演示目的。在实际应用中，可能需要更复杂的线程同步机制，以确保高性能和正确的线程间通信。此外，C++标准库中的并发数据结构（如&lt;code>std::shared_mutex&lt;/code>和&lt;code>std::unique_lock&lt;/code>）可以提供更细粒度的锁和更好的性能。&lt;/p>
&lt;h2 id="8在多线程环境下如何确保迭代器模式的线程安全">8.在多线程环境下，如何确保迭代器模式的线程安全？
&lt;/h2>&lt;p>在多线程环境下确保迭代器模式的线程安全，可以采取以下几种策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用互斥锁（Mutex）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在容器的每个操作方法中使用互斥锁来同步访问。&lt;/li>
&lt;li>确保在迭代器的&lt;code>next()&lt;/code>、&lt;code>hasNext()&lt;/code>等方法中也使用相同的互斥锁。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用读写锁（Read-Write Lock）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当多个线程需要同时读取数据时，可以使用读写锁来允许多个读操作并行，但在写操作执行时互斥。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>复制数据&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在迭代开始前复制容器的数据，迭代器遍历的是数据的副本，而原始数据可以被修改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用不可变集合&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>创建容器的不可变副本供迭代器遍历，这样原始容器可以自由修改而不影响迭代器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用并发集合&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用专门为并发设计的集合类，如Java中的&lt;code>ConcurrentHashMap&lt;/code>或C++中的某些线程安全集合。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代器失效策略&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>实现“快速失败”（fail-fast）的迭代器，当检测到并发修改时抛出异常。&lt;/li>
&lt;li>需要在文档中明确迭代器的这一行为，提醒用户在迭代过程中不要修改容器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免在迭代过程中修改容器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>设计迭代器时，禁止在迭代过程中通过迭代器修改容器，或者确保修改操作是线程安全的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用条件变量&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当迭代器需要等待容器的修改完成时，可以使用条件变量来同步线程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用原子操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于简单的数据结构，可以使用原子操作来保证迭代过程中的数据一致性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用无锁编程技术&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些情况下，可以使用无锁编程技术来避免使用互斥锁，但这通常更复杂且容易出错。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>以下是一个简单的C++示例，展示如何使用互斥锁来确保迭代器模式的线程安全：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iterator&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ThreadSafeContainer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">mutable&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="nc">Iterator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">hasNext&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">hasNext&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">runtime_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No more elements&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Iterator&lt;/span> &lt;span class="nf">getIterator&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ThreadSafeContainer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 线程添加元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 线程遍历元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getIterator&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">hasNext&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>ThreadSafeContainer&lt;/code> 类使用一个互斥锁来保护对内部数据的访问。迭代器在构造时复制了容器的数据，并持有一个互斥锁的引用，以确保在迭代过程中数据不会被修改。这样可以确保在多线程环境下迭代器的线程安全。&lt;/p>
&lt;h2 id="9除了使用互斥锁还有哪些方法可以保证迭代器模式的线程安全">9.除了使用互斥锁，还有哪些方法可以保证迭代器模式的线程安全？
&lt;/h2>&lt;p>除了使用互斥锁，以下是一些其他方法来保证迭代器模式的线程安全：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>不可变集合&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>创建容器的不可变副本供迭代器遍历。由于副本是不变的，原始容器可以自由修改而不影响迭代器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>并发集合&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用专门为并发设计的集合类，这些集合通常内部实现了优化的锁策略或其他同步机制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>锁分离&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对容器的不同部分使用不同的锁，这样可以在多个线程之间提供更高的并行度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>读写锁&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用读写锁允许多个读线程同时访问容器，但写线程在修改容器时会阻塞所有其他线程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>乐观锁&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用乐观锁（如CAS操作）来实现无锁的并发控制，这通常适用于写操作较少的场景。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>顺序控制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过软件事务内存（STM）或其他顺序控制技术来确保在迭代过程中对容器的修改不会影响迭代器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原子操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于简单的数据结构，可以使用原子操作来保证迭代过程中的数据一致性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>条件变量&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当迭代器需要等待容器的修改完成时，可以使用条件变量来同步线程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>屏障（Barriers）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用屏障来同步多个线程，确保它们在某个点上达到一致的状态。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>无锁编程技术&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些情况下，可以使用无锁编程技术来避免使用互斥锁，但这通常更复杂且容易出错。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>版本控制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对容器的每个版本进行编号，迭代器记住它开始迭代时的版本号，检查在迭代过程中版本号是否改变。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>阻塞队列&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于生产者-消费者场景，可以使用阻塞队列等并发数据结构，它们通常内部实现了线程安全的机制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分区锁&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将容器分成多个区段，每个区段使用单独的锁，这样可以在多个区段之间提供并行性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>软件事务内存（STM）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用STM来管理事务，确保在迭代和修改容器时的一致性和隔离性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>选择哪种方法取决于具体的应用场景、性能要求和并发级别。在设计线程安全的迭代器时，应该权衡不同方法的复杂性、性能开销和易用性。&lt;/p>
&lt;h2 id="10在c中如何使用stdshared_mutex来实现线程安全的迭代器操作">10.在C++中，如何使用std：shared_mutex来实现线程安全的迭代器操作？
&lt;/h2>&lt;p>在C++中，&lt;code>std::shared_mutex&lt;/code>是一种提供共享所有权（shared ownership）的互斥量，它允许多个线程同时获取共享锁（shared lock），进行读操作，或者独占锁（unique lock），进行写操作。这使得&lt;code>std::shared_mutex&lt;/code>非常适合读多写少的场景。&lt;/p>
&lt;p>以下是使用&lt;code>std::shared_mutex&lt;/code>来实现线程安全的迭代器操作的示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;shared_mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;thread&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ThreadSafeVector&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_mutex&lt;/span> &lt;span class="n">shared_mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 写操作：添加元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shared_mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 读操作：迭代器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Iterator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data_ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data_ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">data_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data_ptr&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取共享锁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data_ptr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getMutex&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Iterator&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 释放共享锁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">hasNext&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">data_ptr&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">hasNext&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">runtime_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No more elements&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">data_ptr&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取迭代器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Iterator&lt;/span> &lt;span class="nf">getIterator&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取互斥量，用于迭代器的构造
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_mutex&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">getMutex&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">shared_mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ThreadSafeVector&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 启动多个线程来添加元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">writer1&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">writer2&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 启动一个线程来迭代元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="kr">thread&lt;/span> &lt;span class="n">reader&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ThreadSafeVector&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Iterator&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getIterator&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">hasNext&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">writer1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">writer2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>ThreadSafeVector&lt;/code>类使用&lt;code>std::shared_mutex&lt;/code>来保护对内部数据&lt;code>std::vector&amp;lt;int&amp;gt;&lt;/code>的访问。写操作（&lt;code>add&lt;/code>方法）需要获取独占锁，而迭代器的构造函数需要获取共享锁。&lt;/p>
&lt;p>迭代器类&lt;code>Iterator&lt;/code>在构造时获取共享锁，并在析构时释放锁。这样可以确保在迭代过程中，多个线程可以同时读取容器，而写操作则需要等待所有读操作完成。&lt;/p>
&lt;p>请注意，这个示例仅用于演示目的。在实际应用中，可能需要更复杂的线程同步机制，以确保高性能和正确的线程间通信。此外，&lt;code>std::shared_mutex&lt;/code>在C++17中引入，因此需要C++17支持的编译器。&lt;/p>
&lt;h2 id="11stdshared_mutex在多线程环境下的性能如何有没有可能成为瓶颈">11.std::shared_mutex在多线程环境下的性能如何，有没有可能成为瓶颈？
&lt;/h2>&lt;p>&lt;code>std::shared_mutex&lt;/code> 在多线程环境下的性能表现取决于具体的使用场景。它提供了读写锁机制，允许多个线程同时进行读操作，而写操作则需要独占访问。这种机制在读取操作远多于写入操作的场景中特别有用，因为它可以减少线程间的等待时间，提高并发性能。&lt;/p>
&lt;p>根据搜索结果中的性能对比测试 ，当存在多个只读线程和一个写线程的情况下，&lt;code>std::shared_mutex&lt;/code> 比 &lt;code>std::mutex&lt;/code> 快一倍。这是因为 &lt;code>std::shared_mutex&lt;/code> 允许多个线程同时获取共享锁进行读操作，而 &lt;code>std::mutex&lt;/code> 则在任何时候只允许一个线程获取锁。因此，在高并发读取的场景下，&lt;code>std::shared_mutex&lt;/code> 可以显著提高性能。&lt;/p>
&lt;p>然而，&lt;code>std::shared_mutex&lt;/code> 也可能成为性能瓶颈，尤其是在写操作频繁的场景中。因为写操作需要获取独占锁，这会阻塞所有其他读写操作，直到写操作完成。此外，&lt;code>std::shared_mutex&lt;/code> 的内部实现可能比 &lt;code>std::mutex&lt;/code> 更复杂，这也可能影响其性能。&lt;/p>
&lt;p>在实际使用中，应该根据应用的具体需求来选择是否使用 &lt;code>std::shared_mutex&lt;/code>。如果读操作远多于写操作，并且希望提高读取的并发性能，那么 &lt;code>std::shared_mutex&lt;/code> 是一个很好的选择。如果写操作比较频繁，或者对实时性要求较高，可能需要考虑其他同步机制，或者对 &lt;code>std::shared_mutex&lt;/code> 的使用进行精细的控制，以避免成为性能瓶颈。&lt;/p>
&lt;p>总的来说，&lt;code>std::shared_mutex&lt;/code> 是一个强大的工具，但它的性能优势需要在适当的场景下才能发挥出来。在设计多线程程序时，应该根据实际的工作负载和性能要求来选择最合适的同步策略。&lt;/p>
&lt;h2 id="12除了-stdshared_mutex还有哪些同步机制可以提高多线程程序的性能">12.除了 std::shared_mutex，还有哪些同步机制可以提高多线程程序的性能？
&lt;/h2>&lt;p>在C++中，除了使用&lt;code>std::shared_mutex&lt;/code>来提高多线程程序的性能外，还有多种同步机制可以使用。以下是一些其他的同步机制：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>互斥锁（Mutex）&lt;/strong>：互斥锁是最常用的同步机制，它确保在任何时刻只有一个线程可以访问受保护的资源。&lt;code>std::mutex&lt;/code>是C++11引入的，它比传统的Windows互斥对象或POSIX互斥锁有更好的性能，尤其是在高并发环境下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>条件变量（Condition Variables）&lt;/strong>：条件变量用于线程间的协调，允许线程在某些条件成立之前挂起（等待），直到其他线程改变这些条件并通知等待中的线程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原子操作（Atomic Operations）&lt;/strong>：原子操作提供了一种无锁的同步机制，适用于简单的数据操作，如对基本数据类型的操作。&lt;code>std::atomic&lt;/code>是C++11引入的，它通过保证操作的原子性来避免数据竞争。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>信号量（Semaphore）&lt;/strong>：信号量用于控制对有限资源的访问，它允许一定数量的线程同时访问资源。信号量可以用于实现线程池、限制并发线程的数量等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自旋锁（Spinlock）&lt;/strong>：自旋锁是一种忙等待的锁机制，适用于锁持有时间非常短的情况。自旋锁通过循环检查锁的状态来实现，避免了线程的上下文切换，但可能会增加CPU的负担。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>读写锁（Read-Write Lock）&lt;/strong>：读写锁允许多个读线程同时访问资源，但写线程在修改资源时需要独占访问。这在读取操作远多于写入操作的场景中可以提高性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>无锁编程&lt;/strong>：无锁编程是一种避免使用常规锁机制的并发编程方法，它依赖于原子操作和复杂的算法来保证数据的一致性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异步操作&lt;/strong>：基于&lt;code>std::future&lt;/code>和&lt;code>std::promise&lt;/code>的异步编程模型，允许线程在不阻塞的情况下并行执行任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>C++20 新增同步机制&lt;/strong>：C++20引入了更多的同步机制，如&lt;code>std::latch&lt;/code>、&lt;code>std::barrier&lt;/code>和&lt;code>std::semaphore&lt;/code>，这些新的同步工具为解决并发编程问题提供了更多角度和方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存顺序（Memory Order）&lt;/strong>：在C++11中引入的原子操作中，可以通过指定不同的内存顺序来优化性能，减少不必要的内存屏障，从而提高并发程序的性能。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>选择哪种同步机制取决于具体的应用场景、性能要求和并发级别。在设计多线程程序时，应该根据实际的工作负载和性能要求来选择最合适的同步策略。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Mediator Pattern</title><link>https://wesigj.github.io/p/design-pattern-mediator-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-mediator-pattern/</guid><description>&lt;h1 id="设计模式-中介者模式-mediator-pattern">设计模式-中介者模式-Mediator Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>中介者模式（Mediator Pattern）是一种行为型设计模式&lt;/li>
&lt;li>它通过引入一个中介者对象来封装一系列的对象交互，使得对象之间不需要显式地相互引用，从而使得其耦合松散，而且可以独立地改变它们之间的交互&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1中介者模式mediator-pattern">1.中介者模式（Mediator Pattern）
&lt;/h2>&lt;p>中介者模式（Mediator Pattern）是一种行为型设计模式，它通过引入一个中介者对象来封装一系列的对象交互，使得对象之间不需要显式地相互引用，从而使得其耦合松散，而且可以独立地改变它们之间的交互。这种模式在C++中的实现通常涉及以下几个关键组件：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>抽象中介者（Mediator）&lt;/strong>：定义了一个接口，该接口提供了同事对象注册和转发同事对象信息的方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>具体中介者（ConcreteMediator）&lt;/strong>：实现中介者接口，协调各个同事角色之间的交互关系。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>抽象同事类（Colleague）&lt;/strong>：定义同事类的接口，保存中介者对象的引用，并提供同事对象交互的抽象方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>具体同事类（Concrete Colleague）&lt;/strong>：实现抽象同事类，当需要与其他同事对象通信时，通过中介者进行。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在C++中实现中介者模式的一个简单示例如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象中介者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Mediator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">Send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Colleague&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">colleague&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体中介者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteMediator&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Mediator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Colleague&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">colleagues&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">Register&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Colleague&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">colleague&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">colleagues&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">colleague&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Colleague&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">colleague&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">c&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">colleagues&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">colleague&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象同事类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Colleague&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Mediator&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">mediator&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Colleague&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Mediator&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">mediator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体同事类A
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ColleagueA&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Colleague&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ColleagueA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Mediator&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">Colleague&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mediator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ColleagueA received: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体同事类B
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ColleagueB&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Colleague&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ColleagueB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Mediator&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">Colleague&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mediator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ColleagueB received: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Mediator&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mediator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteMediator&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ColleagueA&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mediator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ColleagueB&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mediator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mediator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Register&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mediator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Register&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hi ColleagueB!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello ColleagueA!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>ConcreteMediator&lt;/code> 管理着所有同事对象，并负责在它们之间转发消息。&lt;code>ColleagueA&lt;/code> 和 &lt;code>ColleagueB&lt;/code> 是具体的同事类，它们通过中介者来发送和接收消息。这种方式使得同事类之间的耦合度降低，增加了代码的可维护性和可扩展性。&lt;/p>
&lt;p>中介者模式的优点包括降低系统的耦合度、提高模块间的独立性以及提高了系统的可扩展性。然而，它也可能导致中介者对象变得复杂且难以维护，特别是当系统中的同事类数量很多时。因此，在设计时需要权衡中介者模式的利弊。&lt;/p>
&lt;h2 id="2中介者模式优缺点">2.中介者模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>单一职责原则。 你可以将多个组件间的交流抽取到同一位置， 使其更易于理解和维护。&lt;/li>
&lt;li>开闭原则。 你无需修改实际组件就能增加新的中介者。&lt;/li>
&lt;li>你可以减轻应用中多个组件间的耦合情况。&lt;/li>
&lt;li>你可以更方便地复用各个组件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>一段时间后， 中介者可能会演化成为上帝对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>中介者模式（Mediator Pattern）的优缺点如下：&lt;/p>
&lt;h3 id="21优点">2.1.优点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>降低耦合度&lt;/strong>：中介者模式可以减少类之间的直接通信，使得各个类之间的耦合度降低，只需要与中介者通信即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高模块化&lt;/strong>：通过使用中介者模式，可以将对象间的交互逻辑从对象本身抽离出来，使得系统更加模块化，易于理解和维护。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>易于扩展&lt;/strong>：新的组件可以很容易地加入到系统中，只需与中介者通信即可，无需修改其他组件的代码，符合开闭原则。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>集中控制&lt;/strong>：中介者可以控制组件之间的交互逻辑，使得交互逻辑集中管理，便于控制和优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少子类数量&lt;/strong>：中介者模式可以减少系统中的子类数量，因为交互逻辑被集中管理，不需要为每个组件创建子类来处理交互。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可维护性&lt;/strong>：当需要修改组件之间的交互逻辑时，只需修改中介者即可，不需要修改组件本身，提高了系统的可维护性。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22缺点">2.2.缺点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>中介者复杂性&lt;/strong>：随着系统的发展，中介者可能会变得越来越复杂，因为它需要处理所有组件之间的交互逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能问题&lt;/strong>：如果中介者变得过于复杂，可能会成为系统的性能瓶颈，因为所有的交互都需要通过中介者来完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单一中介者风险&lt;/strong>：如果整个系统的组件都通过一个中介者来通信，那么这个中介者可能会成为系统的单点故障点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可测试性&lt;/strong>：由于组件之间的交互被中介者封装，可能会使得组件的独立测试变得困难，需要为中介者编写额外的测试代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>过度使用&lt;/strong>：在一些简单的系统中，或者组件之间的交互本身就不多的情况下，使用中介者模式可能会过度设计，增加不必要的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中介者职责过重&lt;/strong>：如果中介者承担了过多的职责，可能会导致其变得庞大且难以维护，形成“上帝对象”（God Object）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在使用中介者模式时，需要权衡这些优缺点，确保它适合解决系统面临的具体问题，并且不会引入新的问题。&lt;/p>
&lt;h2 id="3中介者模式在实际项目中有哪些常见的应用场景">3.中介者模式在实际项目中有哪些常见的应用场景？
&lt;/h2>&lt;p>中介者模式在实际项目中的应用场景非常广泛，以下是一些常见的例子：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>聊天室系统&lt;/strong>：在聊天室系统中，用户之间的消息传递通过中介者模式来管理，这样可以避免用户之间的直接通信，简化了用户类之间的耦合，并使得通信策略的修改更加方便。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图形用户界面（GUI）&lt;/strong>：在GUI开发中，中介者模式常用于管理组件之间的交互，例如按钮、文本框和其他控件之间的通信。中介者可以是某个窗体或控制器，它负责协调各个组件的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络游戏&lt;/strong>：在网络游戏中，中介者模式可以用来管理玩家之间的交互，例如聊天、交易等。服务器作为中介者，处理玩家之间的请求和响应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>企业信息系统&lt;/strong>：在企业信息系统中，中介者模式可以用来协调不同业务模块之间的通信，例如订单处理、库存管理和客户服务等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>硬件设备协调&lt;/strong>：在智能家居或工业控制系统中，中介者模式可以用来协调各种设备之间的交互，例如灯光、温度控制、安全系统等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>网络协议栈&lt;/strong>：在网络通信中，中介者模式可以用来管理不同层次之间的数据传输和协议转换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>框架和库&lt;/strong>：在某些框架和库的设计中，中介者模式可以用来提供组件之间的通信机制，例如MVC模式中的控制器（C）就充当了中介者的角色。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码示例&lt;/strong>：在C++中实现中介者模式通常涉及定义一个中介者接口和多个同事类，中介者负责协调同事类之间的交互。具体的中介者类实现了中介者接口，并包含了同事类之间的协调逻辑。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>中介者模式的优点包括减少了组件之间的耦合，使得组件可以独立地变化和重用，同时也简化了组件之间的通信逻辑。然而，过度使用中介者模式可能会导致中介者本身变得复杂且难以维护，因此需要在设计时权衡其利弊。&lt;/p>
&lt;h2 id="4如何判断一个系统是否适合使用中介者模式">4.如何判断一个系统是否适合使用中介者模式？
&lt;/h2>&lt;p>判断一个系统是否适合使用中介者模式，可以考虑以下几个关键点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>组件之间的耦合度高&lt;/strong>：如果系统中的多个组件相互依赖，形成了复杂的网状结构，这通常意味着它们之间存在过多的直接交互。使用中介者模式可以减少这种直接依赖，降低耦合度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>需要集中控制&lt;/strong>：当你需要对组件之间的交互进行集中控制和协调时，中介者模式非常有用。中介者可以控制消息的流向，以及何时、如何响应特定的事件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>通信逻辑复杂&lt;/strong>：如果组件之间的通信逻辑非常复杂，或者经常变化，将这些逻辑集中到中介者中可以简化组件的设计，使得组件不需要了解其他组件的内部实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>系统需要良好的可扩展性&lt;/strong>：如果你希望系统能够容易地扩展新功能，中介者模式可以帮助你通过引入新的中介者或修改现有中介者来实现，而不需要对现有组件进行大量修改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>存在多对多的交互&lt;/strong>：在系统中，如果多个组件之间存在多对多的交互关系，这种复杂的交互关系难以管理和维护，使用中介者模式可以简化这些关系。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>需要重用组件&lt;/strong>：如果你希望在不同的上下文中重用组件，而这些组件在不同的环境中需要与其他不同的组件交互，中介者模式可以提供一种灵活的方式来适应不同的交互需求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>需要解耦组件&lt;/strong>：如果你需要解耦组件之间的交互，以便单独开发和测试，中介者模式可以将交互逻辑从组件中分离出来，使得组件更加独立。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>存在跨组件的业务逻辑&lt;/strong>：有时候，某些业务逻辑跨越了多个组件，这些逻辑不适合放在任何一个组件内部。这时，中介者可以作为一个合适的地点来实现这些跨组件的业务逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>需要统一的接口&lt;/strong>：当需要为一组组件提供统一的交互接口时，中介者模式可以定义一个中介者接口，组件通过这个接口与中介者交互，而不是直接与其他组件交互。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>系统重构&lt;/strong>：在系统重构过程中，如果发现组件之间的交互导致了代码的重复或难以维护，引入中介者模式可以帮助清理这些交互，提高系统的可维护性。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>总的来说，如果你的系统存在上述情况之一或多个，那么使用中介者模式可能会带来好处。然而，也要注意不要过度使用中介者模式，因为一个过于复杂的中介者可能会成为系统中的瓶颈，导致新的维护问题。&lt;/p>
&lt;h2 id="5中介者模式在设计时有哪些常见的问题和挑战">5.中介者模式在设计时有哪些常见的问题和挑战？
&lt;/h2>&lt;p>在设计中介者模式时，可能会遇到以下常见问题和挑战：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>中介者职责过重&lt;/strong>：随着系统的扩展，中介者可能会包含过多的逻辑，导致它变得复杂和难以管理。这可能违反单一职责原则，使得中介者本身成为系统中的瓶颈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>难以维护和扩展&lt;/strong>：中介者模式可能会导致中介者类变得庞大，难以维护。当需要添加新的行为或功能时，可能需要对中介者进行大量的修改，这增加了系统的脆弱性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能问题&lt;/strong>：中介者模式可能会引入额外的间接层，这可能会影响系统的性能。在高性能要求的场景中，这可能是一个考虑因素。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>过度使用&lt;/strong>：在一些简单的系统中，或者组件之间的交互本身就不多的情况下，使用中介者模式可能会过度设计，增加不必要的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中介者与同事类的耦合&lt;/strong>：虽然中介者模式旨在减少耦合，但中介者与同事类之间仍然存在一定的耦合。中介者需要知道所有同事类的引用，这可能会限制中介者的通用性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同事类之间的通信&lt;/strong>：在某些情况下，同事类之间可能需要直接通信，而不是通过中介者。这种直接通信可能会绕过中介者，从而破坏了中介者模式的设计原则。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中介者模式与其他模式的冲突&lt;/strong>：在某些情况下，中介者模式可能与其他设计模式（如观察者模式）存在冲突。需要仔细考虑如何在系统中整合不同的模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中介者模式的适用性&lt;/strong>：在一些场景下，使用其他模式（如命令模式、策略模式）可能比中介者模式更合适。需要根据具体的业务需求和系统结构来选择合适的设计模式。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>为了解决这些问题和挑战，可以采取以下措施：&lt;/p>
&lt;ul>
&lt;li>确保中介者保持简洁，只包含必要的逻辑。&lt;/li>
&lt;li>将中介者的责任划分为更小的单元，可能通过引入多个中介者来实现。&lt;/li>
&lt;li>优化中介者的设计，确保它不会成为性能瓶颈。&lt;/li>
&lt;li>仔细评估是否需要使用中介者模式，避免在不适当的情况下使用。&lt;/li>
&lt;li>设计中介者和同事类的接口，确保它们之间的耦合最小化。&lt;/li>
&lt;li>明确同事类之间的通信规则，确保所有通信都通过中介者进行。&lt;/li>
&lt;li>在设计初期就考虑可能的扩展和维护需求，使系统更易于未来的修改。&lt;/li>
&lt;/ul>
&lt;p>通过这些方法，可以在设计中介者模式时避免常见的问题和挑战，从而创建一个更加健壮和可维护的系统。&lt;/p>
&lt;h2 id="6中介者模式示例-cpp">6.中介者模式示例 cpp
&lt;/h2>&lt;p>下面是一个使用C++实现的中介者模式示例。这个例子模拟了一个简单的聊天系统，其中&lt;code>ChatMediator&lt;/code>是中介者，&lt;code>User&lt;/code>是同事类。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;list&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象中介者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ChatMediator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">sendMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">removeUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体中介者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ChatRoom&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ChatMediator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">sendMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">u&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">u&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">receive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">removeUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象同事类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ChatMediator&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">mediator&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">User&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ChatMediator&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">mediator&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mediator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mediator&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">receive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体同事类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">UserImpl&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UserImpl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ChatMediator&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">mediator&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mediator&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mediator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">sendMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">receive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; received: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">msg&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ChatRoom&lt;/span> &lt;span class="n">chatRoom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UserImpl&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">user1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserImpl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chatRoom&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UserImpl&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">user2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserImpl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chatRoom&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">chatRoom&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">chatRoom&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hi Bob, how are you?&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hi Alice, I&amp;#39;m good!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">chatRoom&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">removeUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">user1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">user2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>ChatMediator&lt;/code>是一个抽象类，定义了发送消息的方法。&lt;code>ChatRoom&lt;/code>是&lt;code>ChatMediator&lt;/code>的具体实现，它管理一个用户列表，并负责将消息从一个用户转发给其他用户。&lt;/p>
&lt;p>&lt;code>User&lt;/code>是一个抽象类，定义了发送和接收消息的接口。&lt;code>UserImpl&lt;/code>是&lt;code>User&lt;/code>的具体实现，它通过中介者发送消息，并接收来自其他用户的消息。&lt;/p>
&lt;p>在&lt;code>main&lt;/code>函数中，我们创建了一个&lt;code>ChatRoom&lt;/code>实例和两个&lt;code>UserImpl&lt;/code>实例，并将用户添加到聊天室中。然后，每个用户通过中介者发送消息。最后，我们移除了一个用户。&lt;/p>
&lt;p>这个例子展示了中介者模式如何帮助减少类之间的耦合，使得系统的各部分更加模块化和易于维护。&lt;/p>
&lt;h2 id="7在c中有哪些工具或库可以帮助我更好地实现和测试设计模式">7.在C++中，有哪些工具或库可以帮助我更好地实现和测试设计模式？
&lt;/h2>&lt;p>在C++中，实现和测试设计模式时，有几个工具和库可以帮助你更高效地进行开发和测试：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Visual Studio&lt;/strong>：如果你使用的是Visual Studio，它提供了对C++单元测试的支持，包括Microsoft 单元测试框架、Google Test、Boost.Test和CTest。这些框架都可以帮助你在实现设计模式时编写和运行单元测试。Visual Studio还支持测试适配器，可以将单元测试与“测试资源管理器”窗口集成，方便管理和查看测试结果 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Google Test&lt;/strong>：Google Test是一个由Google开发的C++单元测试框架，它提供了丰富的断言和测试组织机制，可以帮助你编写可读性好、易于维护的测试代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Boost.Test&lt;/strong>：Boost.Test是Boost库的一部分，它是一个跨平台的测试框架，提供了丰富的测试工具和测试组织方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>CMock&lt;/strong>：CMock是一个轻量级的C/C++单元测试框架，它特别适合用于模拟对象和依赖注入，有助于在测试设计模式时进行解耦。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Loki&lt;/strong>：Loki是一个C++库，它提供了对一些设计模式的实现，如单例模式、工厂模式等。使用Loki库可以帮助你更容易地实现这些设计模式，并且它使用了大量的模板技巧，可以提高你的代码复用性 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>gmock&lt;/strong>：gmock是一个由Google开发的C++模拟框架，它可以与Google Test一起使用，为测试提供模拟对象和依赖注入功能，有助于在测试设计模式时进行解耦和模拟复杂的行为 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>C++标准库&lt;/strong>：C++标准库提供了许多有用的组件，如智能指针、容器和算法，它们可以帮助你实现设计模式时减少代码的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>版本控制系统&lt;/strong>：如Git，可以帮助你管理代码变更，特别是在多人协作和代码重构时。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>集成开发环境（IDE）&lt;/strong>：如CLion、Eclipse CDT等，它们提供了代码提示、静态分析和调试工具，有助于提高代码质量和开发效率。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>使用这些工具和库，你可以更容易地实现和测试设计模式，确保代码的质量和可维护性。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Memento Pattern</title><link>https://wesigj.github.io/p/design-pattern-memento-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-memento-pattern/</guid><description>&lt;h1 id="设计模式-备忘录模式-memento-pattern">设计模式-备忘录模式-Memento Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>备忘录模式（Memento Pattern）是一种行为型设计模式&lt;/li>
&lt;li>它允许在不破坏对象封装性的前提下，捕获并保存一个对象的内部状态，以便在需要时可以恢复到之前的状态&lt;/li>
&lt;li>这种模式通常用于实现撤销（Undo）和重做（Redo）功能&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1备忘录模式memento-pattern">1.备忘录模式（Memento Pattern）
&lt;/h2>&lt;p>备忘录模式（Memento Pattern）是一种行为型设计模式，它允许在不破坏对象封装性的前提下，捕获并保存一个对象的内部状态，以便在需要时可以恢复到之前的状态。这种模式通常用于实现撤销（Undo）和重做（Redo）功能。&lt;/p>
&lt;p>在C++中实现备忘录模式，通常涉及三个主要角色：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>备忘录（Memento）&lt;/strong>：负责存储发起人对象的内部状态，并保护这些状态不被外界直接访问。&lt;/li>
&lt;li>&lt;strong>发起人（Originator）&lt;/strong>：创建一个备忘录，用以记录当前时刻它的内部状态，并能够使用备忘录恢复内部状态。&lt;/li>
&lt;li>&lt;strong>管理者（Caretaker）&lt;/strong>：负责保存备忘录，但不会对备忘录的内容进行操作或检查。&lt;/li>
&lt;/ol>
&lt;p>一个简单的C++实现示例如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 备忘录类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Memento&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 只有Originator可以访问
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">friend&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Originator&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Memento&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">getState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 发起人类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Originator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">getState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Memento&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">createMemento&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Memento&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">restore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Memento&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">memento&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memento&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 管理者类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Caretaker&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Memento&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">mementos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">addMemento&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Memento&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">memento&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mementos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">memento&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Memento&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">getMemento&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">mementos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">mementos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Originator&lt;/span> &lt;span class="n">originator&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">originator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;State 1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Current State: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">originator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Caretaker&lt;/span> &lt;span class="n">caretaker&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 保存状态
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Memento&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">memento&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">originator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">createMemento&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">caretaker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addMemento&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">memento&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 改变状态
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">originator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;State 2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;New State: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">originator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 恢复状态
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">originator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">restore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">caretaker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getMemento&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Restored State: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">originator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>Originator&lt;/code>对象的状态可以通过&lt;code>Caretaker&lt;/code>对象保存和恢复。&lt;code>Memento&lt;/code>对象存储了&lt;code>Originator&lt;/code>的状态，并且只能被&lt;code>Originator&lt;/code>访问和修改。&lt;/p>
&lt;p>备忘录模式的优点包括提供了一种可以恢复状态的机制，实现了内部状态的封装，并且简化了发起人类的设计。然而，它的缺点是可能会消耗较多的资源，尤其是当保存的内部状态信息过多或者特别频繁时。&lt;/p>
&lt;p>在实际应用中，备忘录模式可以用于实现游戏存档、软件设置恢复、文本编辑器的撤销和重做功能等场景。开发者可以根据具体需求选择合适的设计模式，以提高代码的可维护性和可扩展性。&lt;/p>
&lt;h2 id="2备忘录模式优缺点">2.备忘录模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>你可以在不破坏对象封装情况的前提下创建对象状态快照。&lt;/li>
&lt;li>你可以通过让负责人维护原发器状态历史记录来简化原发器代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>如果客户端过于频繁地创建备忘录， 程序将消耗大量内存。&lt;/li>
&lt;li>负责人必须完整跟踪原发器的生命周期， 这样才能销毁弃用的备忘录。&lt;/li>
&lt;li>绝大部分动态编程语言 （例如 PHP、 Python 和 JavaScript） 不能确保备忘录中的状态不被修改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>备忘录模式（Memento Pattern）是一种行为型设计模式，它允许在不破坏对象封装性的前提下，捕获并保存一个对象的内部状态，以便在需要时可以恢复到之前的状态。以下是备忘录模式的优缺点：&lt;/p>
&lt;h3 id="21优点">2.1.优点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>撤销功能的实现&lt;/strong>：备忘录模式提供了一种简单而有效的撤销和恢复机制，使得用户可以轻松地回退到对象的某个历史状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>封装性的保护&lt;/strong>：通过备忘录模式，对象的内部状态可以被外部保存和恢复，而不需要暴露对象的内部细节，这有助于保护对象的封装性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态的完整性&lt;/strong>：备忘录模式可以保存对象的完整状态，而不仅仅是部分状态，这有助于在需要时恢复对象的完整状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>解耦性&lt;/strong>：备忘录模式可以将状态的保存和恢复逻辑从业务逻辑中分离出来，使得业务逻辑更加清晰，同时也便于状态管理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>灵活性&lt;/strong>：可以灵活地选择保存哪些状态，以及何时保存和恢复状态，这为应用程序提供了更多的灵活性。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22缺点">2.2.缺点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>资源消耗&lt;/strong>：如果频繁地保存状态，或者保存的状态信息较多，可能会占用较多的内存资源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>复杂性增加&lt;/strong>：引入备忘录模式可能会增加系统的复杂性，需要额外的类和对象来管理状态的保存和恢复。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>管理难度&lt;/strong>：随着备忘录对象数量的增加，管理和维护这些对象可能会变得复杂，尤其是需要考虑如何有效地存储和检索这些对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可能的滥用&lt;/strong>：如果不当使用备忘录模式，可能会导致系统中存在大量的状态快照，这可能会对性能产生负面影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程安全问题&lt;/strong>：在多线程环境中，如果多个线程同时操作同一个对象的状态，可能会引入线程安全问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态泄露&lt;/strong>：如果备忘录对象没有被正确管理，可能会导致状态信息泄露，或者在不适当的时候被修改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>恢复的局限性&lt;/strong>：备忘录模式通常只能实现线性的撤销和恢复，即只能按照保存状态的顺序进行撤销和恢复，这在某些复杂的应用场景中可能不够灵活。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在使用备忘录模式时，应该权衡这些优缺点，并根据具体的应用场景和需求来决定是否采用这种模式。&lt;/p>
&lt;h2 id="3备忘录模式在实际开发中有哪些常见的应用场景">3.备忘录模式在实际开发中有哪些常见的应用场景？
&lt;/h2>&lt;p>备忘录模式在实际开发中有多种应用场景，以下是一些常见的例子：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>文本编辑器中的撤销/重做功能&lt;/strong>：在文本编辑器中，每次用户进行编辑操作时，系统可以创建一个包含当前文档状态的备忘录对象。如果用户想要撤销操作，系统可以使用最近的备忘录对象恢复到之前的状态。这种场景下，文档编辑器是发起人（Originator），编辑操作产生的状态快照是备忘录（Memento），而管理这些快照的历史列表则是管理者（Caretaker）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏存档和回档&lt;/strong>：在游戏开发中，备忘录模式可以用来保存玩家的游戏状态，包括角色位置、生命值、拥有的物品等。这样，玩家可以随时加载之前的存档，继续游戏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据库事务管理&lt;/strong>：在数据库系统中，可以利用备忘录模式来实现事务的回滚和恢复。每次事务开始前，系统可以创建一个包含数据库当前状态的快照。如果事务失败或用户取消操作，系统可以使用这个快照恢复数据库到事务开始前的状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>软件版本控制&lt;/strong>：在版本控制系统（如Git）中，每次提交可以看作是一个备忘录，记录了代码在特定时刻的状态。开发者可以根据需要回退到任何历史提交，或者在不同分支之间切换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图形界面的撤销操作&lt;/strong>：在图形设计软件或图像编辑软件中，用户的操作（如移动图层、改变颜色等）可以被记录下来，形成一系列的备忘录。用户可以通过撤销功能回到之前的编辑状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置管理&lt;/strong>：在系统配置管理中，每次配置更改都可以创建一个备忘录，以便在出现问题时能够快速恢复到更改之前的状态。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>备忘录模式的优点包括提供了一种可以恢复状态的机制，实现了内部状态的封装，并且简化了发起人类的设计。然而，它的缺点是可能会消耗较多的资源，尤其是当保存的内部状态信息过多或者特别频繁时。&lt;/p>
&lt;p>在设计备忘录模式时，需要考虑如何有效地管理备忘录对象的生命周期，以避免内存泄漏，并且确保系统的资源消耗在可接受的范围内。同时，还需要确保备忘录对象的封装性，避免暴露发起人对象的内部实现细节。&lt;/p>
&lt;h2 id="4如何优化备忘录模式以减少资源消耗">4.如何优化备忘录模式以减少资源消耗？
&lt;/h2>&lt;p>要优化备忘录模式以减少资源消耗，可以考虑以下几种策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>只备份必要的状态信息&lt;/strong>：而不是备份整个对象的状态。这样可以减少存储空间的需求。例如，在文本编辑器中，可以只存储文本的增量更改，而不是整个文档的副本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用原型模式&lt;/strong>：结合使用原型模式可以避免为每个状态创建全新的备忘录对象。如果对象的状态大部分是相同的，可以通过克隆来复制大部分状态，然后只记录变化的部分。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>增量备份&lt;/strong>：而不是每次都进行全量备份。增量备份只记录自上次备份以来发生变化的部分，这样可以大大减少所需的存储空间和时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>限制备忘录的数量&lt;/strong>：例如，只保存最近的一定数量的备忘录对象，或者在达到最大数量时覆盖旧的备忘录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用更高效的数据结构&lt;/strong>：例如，使用链表而不是数组来存储备忘录对象，这样可以减少内存的占用和提高访问效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>压缩技术&lt;/strong>：对备忘录对象进行压缩存储，当需要恢复时再进行解压。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>合理设置备忘录的过期时间&lt;/strong>：对于某些应用场景，可以为备忘录设置一个过期时间，过期后自动删除，以节省空间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>考虑使用数据库事务&lt;/strong>：对于需要持久化状态的场景，可以使用数据库事务来管理状态的保存和恢复，这样可以利用数据库的优化和存储机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>事件溯源&lt;/strong>：对于需要详细历史记录的系统，事件溯源模式可以记录所有状态变化，允许重放和撤销操作，而不是保存每个状态的快照。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这些方法，可以在保持备忘录模式优点的同时，减少对系统资源的消耗。&lt;/p>
&lt;h2 id="5备忘录模式在多线程环境下如何保证线程安全">5.备忘录模式在多线程环境下如何保证线程安全？
&lt;/h2>&lt;p>在多线程环境下，确保备忘录模式的线程安全是一个重要的考虑因素。以下是一些策略来实现线程安全的备忘录模式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用同步机制&lt;/strong>：在备忘录的创建和恢复过程中，可以使用互斥锁（如&lt;code>std::mutex&lt;/code>）来确保只有一个线程可以修改或访问备忘录的状态。这样可以防止多个线程同时对同一个备忘录对象进行操作，从而避免竞态条件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程局部存储&lt;/strong>：可以使用线程局部存储（Thread-Local Storage，TLS）来存储备忘录对象，这样每个线程都有自己的备忘录副本，从而避免了线程间的直接交互和数据竞争。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不可变备忘录对象&lt;/strong>：设计备忘录对象为不可变对象，一旦创建就不允许修改。这样，即使多个线程访问同一个备忘录对象，也不会引起线程安全问题，因为状态不可变。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用原子操作&lt;/strong>：对于简单的状态信息，可以使用原子操作来确保状态的保存和恢复是原子性的，从而避免在多线程环境下的同步问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>限制备忘录的共享&lt;/strong>：尽量减少备忘录对象在多个线程之间的共享。如果必须共享，确保访问控制得当，例如通过读写锁（&lt;code>std::shared_mutex&lt;/code>）来允许多个线程同时读取，但写入时需要独占访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态的快照和恢复&lt;/strong>：在多线程环境中，当需要保存或恢复状态时，确保状态的快照和恢复操作是原子的，或者在操作期间禁止其他线程的访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免状态泄露&lt;/strong>：在多线程环境中，确保备忘录模式的使用不会导致一个线程的状态被另一个线程错误地访问或修改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源管理&lt;/strong>：合理管理备忘录对象的生命周期，确保在不再需要时及时释放资源，避免内存泄漏。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述策略，可以在多线程环境中有效地使用备忘录模式，同时确保线程安全和数据一致性。在实际应用中，应根据具体的应用场景和性能要求来选择合适的同步策略。&lt;/p>
&lt;h2 id="6在多线程环境下如何避免备忘录模式中的死锁问题">6.在多线程环境下，如何避免备忘录模式中的死锁问题？
&lt;/h2>&lt;p>在多线程环境下，避免备忘录模式中的死锁问题可以采取以下措施：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>锁顺序&lt;/strong>：确保所有线程在获取多个锁时都按照相同的顺序进行，这样可以避免循环等待条件，这是死锁的四个必要条件之一 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>锁超时&lt;/strong>：在尝试获取锁时使用超时机制，如果在指定的时间内无法获取锁，则释放已持有的锁并重试，这有助于避免死锁 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>最小化锁持有时间&lt;/strong>：尽量减少持有锁的时间，例如，在持有锁的代码块中只执行必要的操作，这样可以减少锁竞争的机会 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免在持有锁时调用外部代码&lt;/strong>：因为外部代码可能会尝试获取其他锁，这可能导致死锁 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用更高级的同步机制&lt;/strong>：例如，使用&lt;code>std::atomic&lt;/code>操作来避免锁的使用，或者使用条件变量和信号量等，这些机制可以提供更细粒度的控制 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>死锁检测和恢复&lt;/strong>：实现死锁检测算法，如资源分配图或等待图，定期检查是否存在死锁，并采取恢复措施，如终止线程或资源抢占 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用不可变备忘录&lt;/strong>：如果备忘录对象是不可变的，那么它们不需要同步，因为它们的状态在创建后不会改变，这可以减少锁的需求 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用线程局部存储&lt;/strong>：对于备忘录对象，可以使用线程局部存储来确保每个线程都有其自己的副本，从而避免线程间的共享和竞争 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这些策略，可以在多线程环境中有效地使用备忘录模式，同时避免死锁问题。&lt;/p>
&lt;h2 id="7如何实现备忘录模式的增量备份以减少存储空间的占用">7.如何实现备忘录模式的增量备份，以减少存储空间的占用？
&lt;/h2>&lt;p>要实现备忘录模式的增量备份以减少存储空间的占用，可以采取以下策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>只备份变化的状态&lt;/strong>：而不是每次备份整个对象的状态。这样可以减少存储空间的需求。例如，如果是一个文档编辑器，只需记录自上次备份以来更改的部分，而不是整个文档的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用差异算法&lt;/strong>：在备份时，可以使用差异算法来确定自上次备份以来数据的变化，并仅存储这些差异。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分层存储&lt;/strong>：结合使用全量备份和增量备份。全量备份可以在较长的时间间隔内进行一次，而增量备份则频繁进行，只记录自上次备份以来的变化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据压缩&lt;/strong>：对备份的数据进行压缩，以减少存储空间的占用。可以选择无损压缩算法来确保数据可以完全恢复。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>去重技术&lt;/strong>：如果系统中存在大量重复数据，可以使用数据去重技术来减少存储空间的占用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>时间戳和版本控制&lt;/strong>：为每个备份添加时间戳，并实现版本控制，这样可以根据需要恢复到特定的版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>智能备份策略&lt;/strong>：根据数据的重要性和访问频率来决定备份的频率和详细程度，对于不常访问的数据可以使用更粗粒度的备份策略。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>归档旧状态&lt;/strong>：对于不再需要频繁访问的历史状态，可以将其归档到成本更低的存储介质上。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述方法，可以有效地减少备忘录模式在实现状态备份和恢复功能时对存储空间的占用。这些策略的选择和实施应根据具体的应用场景和系统要求来决定。&lt;/p>
&lt;h2 id="8在实施备忘录模式的增量备份时有哪些常见的技术挑战">8.在实施备忘录模式的增量备份时，有哪些常见的技术挑战？
&lt;/h2>&lt;p>在实施备忘录模式的增量备份时，可能会遇到以下技术挑战：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>确定增量数据&lt;/strong>：需要准确识别自上次备份以来发生变化的数据，这可能涉及到复杂的状态跟踪和变更检测机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>处理大量数据&lt;/strong>：对于大型对象或系统，增量备份可能会产生大量的数据，需要有效的数据压缩和存储策略来优化性能和存储空间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保持数据一致性&lt;/strong>：在备份过程中，需要确保数据的一致性，避免在备份过程中数据发生变化导致备份信息不准确。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>管理备份历史&lt;/strong>：随着时间的推移，备份历史会不断增长，需要有效的策略来管理这些历史记录，包括存储、检索和删除旧的备份。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>并发控制&lt;/strong>：在多线程或多用户环境中，需要确保备份过程不会受到并发修改的影响，可能需要使用锁或其他同步机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>恢复机制&lt;/strong>：实现一个可靠的恢复机制，以便可以从增量备份中恢复到任意状态，这可能涉及到合并多个增量备份以及与全量备份的结合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源消耗&lt;/strong>：备份过程可能会占用大量的系统资源，如CPU、内存和I/O，需要优化备份算法以减少对系统性能的影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>错误处理&lt;/strong>：在备份和恢复过程中，需要有健壮的错误处理机制，以应对可能出现的故障和异常情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全性&lt;/strong>：备份数据可能包含敏感信息，需要确保备份数据的安全性，防止未授权访问和数据泄露。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>跨平台和环境的兼容性&lt;/strong>：在不同的系统和平台之间进行备份和恢复时，需要确保备份数据的兼容性和一致性。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>为了应对这些挑战，开发者可能需要结合多种技术和策略，如使用事件驱动的方法来捕捉变更、采用高效的数据序列化和压缩算法、实现智能的备份历史管理策略等。同时，也需要对系统进行充分的测试，以确保备份和恢复功能的可靠性和有效性。&lt;/p>
&lt;h2 id="9如何优化备忘录模式的增量备份算法以减少资源消耗">9.如何优化备忘录模式的增量备份算法以减少资源消耗？
&lt;/h2>&lt;p>在实施备忘录模式的增量备份时，要减少资源消耗，可以采取以下优化策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>增量备份而非全量备份&lt;/strong>：仅备份自上次备份以来发生变化的数据，而不是每次都备份整个对象的状态。这大大减少了需要备份的数据量，从而显著提升了备份的速度，并减少了存储资源的消耗。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据压缩&lt;/strong>：对备份的数据进行压缩，以减少存储空间的占用。可以选择无损压缩算法来确保数据可以完全恢复，同时减少存储和传输数据所需的资源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>智能缓冲区管理&lt;/strong>：使用缓冲区来暂存需要插入或更新的数据，等待缓冲区的数据量较多时，再进行批量插入或批量更新，这样可以提高效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免频繁的状态保存&lt;/strong>：设计一个合理的触发备份的策略，例如，只有当对象状态发生显著变化时才创建新的备忘录，而不是对每次微小变化都进行备份。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用哈希摘要&lt;/strong>：在备份之前，对数据进行哈希摘要，只有当哈希值发生变化时才进行备份，这样可以避免不必要的备份操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>利用多线程或异步处理&lt;/strong>：在备份过程中，利用多线程或异步处理来并行处理数据，这样可以提高备份的速度，减少等待时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>备份数据去重&lt;/strong>：在备份前对数据进行去重处理，确保备份集中没有重复的数据块，这样可以减少存储空间的占用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定期清理旧的备忘录&lt;/strong>：定期清理不再需要的备忘录对象，释放资源，避免无谓的资源占用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>选择合适的备份工具和技术&lt;/strong>：根据具体的应用场景和需求，选择最合适的备份工具和技术，以确保备份的效率和资源的合理利用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述策略，可以在保证数据安全的同时，有效地减少备忘录模式在实现增量备份时对资源的消耗。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Observer Pattern</title><link>https://wesigj.github.io/p/design-pattern-observer-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-observer-pattern/</guid><description>&lt;h1 id="设计模式-观察者模式-observer-pattern">设计模式-观察者模式-Observer Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>观察者模式（Observer Pattern）是一种行为型设计模式&lt;/li>
&lt;li>它定义了对象之间的一对多依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都会得到通知并自动更新&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1观察者模式observer-pattern">1.观察者模式（Observer Pattern）
&lt;/h2>&lt;p>观察者模式（Observer Pattern）是一种行为型设计模式，它定义了对象之间的一对多依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。这种模式通常用于实现分布式事件处理系统。&lt;/p>
&lt;p>在C++中实现观察者模式，通常需要定义观察者（Observer）和被观察者（Subject）的接口。以下是观察者模式的一个简单实现示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;list&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 观察者基类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Observer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 被观察者基类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Subject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Subject&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">attach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">observer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">observers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">detach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">observer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">observers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">observer&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">observers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">observer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">observers&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体观察者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteObserver&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Observer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Observer: Subject&amp;#39;s state changed to &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">state&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体被观察者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteSubject&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Subject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">newState&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newState&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">notify&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteSubject&lt;/span> &lt;span class="n">subject&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteObserver&lt;/span> &lt;span class="n">observerA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteObserver&lt;/span> &lt;span class="n">observerB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">subject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">attach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">observerA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">subject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">attach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">observerB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">subject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 通知所有观察者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">subject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">detach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">observerA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">subject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 通知所有观察者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>Subject&lt;/code> 类维护了一个观察者列表，并提供了 &lt;code>attach&lt;/code> 和 &lt;code>detach&lt;/code> 方法来添加或移除观察者。当被观察者的状态发生变化时，通过 &lt;code>notify&lt;/code> 方法通知所有观察者。&lt;/p>
&lt;p>&lt;code>ConcreteSubject&lt;/code> 是具体的被观察者，它继承自 &lt;code>Subject&lt;/code> 类，并实现了 &lt;code>setState&lt;/code> 方法来改变状态，并通知观察者。&lt;/p>
&lt;p>&lt;code>Observer&lt;/code> 是观察者的基类，它定义了一个 &lt;code>update&lt;/code> 方法，该方法将被所有具体观察者实现。&lt;/p>
&lt;p>&lt;code>ConcreteObserver&lt;/code> 是具体的观察者，它实现了 &lt;code>update&lt;/code> 方法，以响应被观察者状态的变化。&lt;/p>
&lt;p>在 &lt;code>main&lt;/code> 函数中，我们创建了一个 &lt;code>ConcreteSubject&lt;/code> 对象和两个 &lt;code>ConcreteObserver&lt;/code> 对象，并将观察者附加到被观察者上。然后，我们改变了被观察者的状态，这导致所有观察者都得到了通知。之后，我们从被观察者中移除了一个观察者，并再次改变了状态，以演示观察者列表的更新。&lt;/p>
&lt;p>观察者模式的优点包括实现了观察者和被观察者之间的解耦，增加了程序的可扩展性，并且可以动态地添加或移除观察者。缺点是如果观察者非常多，通知的开销可能会很大，而且如果被观察者的状态变化非常频繁，可能会导致性能问题。&lt;/p>
&lt;h2 id="2观察者模式优缺点">2.观察者模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>开闭原则。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。&lt;/li>
&lt;li>你可以在运行时建立对象之间的联系。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>订阅者的通知顺序是随机的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>观察者模式（Observer Pattern）的优缺点如下：&lt;/p>
&lt;h3 id="21优点">2.1.优点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>解耦&lt;/strong>：观察者模式能够将被观察者（Subject）和观察者（Observer）解耦，使得被观察者的改变不会直接影响到观察者，两者之间的依赖关系降低。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>扩展性&lt;/strong>：新的观察者可以在不修改被观察者代码的情况下被添加到系统中，提高了系统的可扩展性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>灵活性&lt;/strong>：观察者模式允许观察者对象对被观察者的状态变化做出反应，这使得系统可以灵活地响应状态变化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>广播通信&lt;/strong>：观察者模式支持广播通信，即被观察者可以同时通知多个观察者对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可定制响应&lt;/strong>：不同的观察者可以对相同的事件做出不同的响应，增加了系统的灵活性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>松散关联&lt;/strong>：观察者和被观察者之间的松散关联关系使得在系统中添加新的观察者或被观察者变得容易，而不需要修改现有的代码。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22缺点">2.2.缺点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>循环依赖&lt;/strong>：在实现观察者模式时，如果不当心，可能会导致循环依赖的问题，特别是当观察者和被观察者相互持有对方的引用时。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存泄漏&lt;/strong>：如果观察者和被观察者之间的引用关系没有正确管理，可能会导致内存泄漏。例如，如果被观察者持有观察者的强引用，而观察者又没有正确地从被观察者列表中移除自己，可能会导致无法释放内存。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能开销&lt;/strong>：当有大量的观察者时，通知所有观察者可能会带来性能开销，尤其是在被观察者状态变化频繁的情况下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>顺序依赖&lt;/strong>：在某些情况下，观察者的更新顺序可能会影响系统的正确性，这需要在设计时仔细考虑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>过度使用&lt;/strong>：在一些简单的场景中，过度使用观察者模式可能会增加不必要的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>错误处理&lt;/strong>：在观察者模式中，如果一个观察者在更新时发生错误，可能会影响到其他观察者的更新，这需要在设计时考虑错误处理机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>通知的一致性&lt;/strong>：确保所有观察者都能接收到通知，并且按照预期的顺序接收通知，可能是一个挑战。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在使用观察者模式时，应该权衡这些优缺点，并根据具体的应用场景和需求来决定是否采用这种模式。&lt;/p>
&lt;h2 id="3观察者模式在实际开发中有哪些常见的应用场景">3.观察者模式在实际开发中有哪些常见的应用场景？
&lt;/h2>&lt;p>观察者模式在实际开发中有许多应用场景，它主要用于实现事件处理和通知机制。以下是一些典型的应用实例：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>事件处理系统&lt;/strong>：在图形用户界面（GUI）编程中，观察者模式用于处理用户的行为，如点击、滚动、按键等事件。当用户执行这些操作时，系统会通知所有注册的观察者（如按钮、文本框等）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏开发&lt;/strong>：在游戏开发中，观察者模式可以用来实现游戏状态的监听和响应。例如，当玩家的分数发生变化时，游戏可以通知得分牌、排行榜等观察者对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模型-视图-控制器（MVC）框架&lt;/strong>：在MVC架构中，观察者模式用于实现视图（View）和控制器（Controller）对模型（Model）的依赖关系。当模型数据发生变化时，自动更新视图。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>软件架构中的发布-订阅系统&lt;/strong>：在大型软件系统中，观察者模式可以实现跨组件的通信。组件可以注册为观察者，订阅感兴趣的事件，当事件发生时，系统会通知所有订阅者。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据绑定&lt;/strong>：在现代编程框架中，观察者模式用于实现数据绑定。当数据模型发生变化时，自动更新界面元素，如输入框、列表等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>通知系统&lt;/strong>：在需要实现通知和消息传递的系统中，观察者模式可以用来通知用户或系统组件关于状态变化的信息，如电子邮件客户端中的新邮件通知。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>股票价格监控&lt;/strong>：在金融应用中，观察者模式可以用来监控股票价格的变化。当股票价格达到特定阈值时，系统可以通知投资者或执行自动交易。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缓存系统&lt;/strong>：在缓存系统中，观察者模式可以用来监听数据的变更，当数据更新时，缓存可以同步更新或失效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实时协作编辑&lt;/strong>：在多人协作编辑文档的应用程序中，观察者模式可以用来同步不同用户对文档的更改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>硬件驱动程序&lt;/strong>：在操作系统中，观察者模式可以用来监听硬件状态的变化，如电池电量、网络连接状态等，并在状态变化时通知应用程序。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>观察者模式的优点在于它提供了一种松耦合的方式来实现组件之间的通信，使得系统更加灵活和可维护。然而，它也可能导致系统复杂度增加，特别是在有大量观察者和事件时，管理和维护这些关系可能会变得复杂。&lt;/p>
&lt;h2 id="3在实现观察者模式时如何确保被观察者和观察者之间的通信是线程安全的">3.在实现观察者模式时，如何确保被观察者和观察者之间的通信是线程安全的？
&lt;/h2>&lt;p>在实现观察者模式时，确保线程安全是至关重要的，特别是在多线程环境中。以下是一些确保线程安全的策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用同步方法&lt;/strong>：在被观察者（Subject）中，添加、删除观察者（Observer）和通知观察者的方法可以使用&lt;code>synchronized&lt;/code>关键字或在C++中使用互斥锁（如&lt;code>std::mutex&lt;/code>）来同步，确保同一时间只有一个线程可以执行这些操作。这种方法简单易行，但在高并发环境下可能会成为性能瓶颈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用读写锁&lt;/strong>：如果读操作远多于写操作，可以使用读写锁（如C++中的&lt;code>std::shared_mutex&lt;/code>）来允许多个线程同时读取观察者列表，但在修改观察者列表时需要独占访问。这样可以在读多写少的场景下提高性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用线程安全容器&lt;/strong>：一些编程语言提供了线程安全的容器，如Java的&lt;code>ConcurrentHashMap&lt;/code>或C++的&lt;code>std::vector&lt;/code>（通过适当的同步机制）。使用这些容器来存储观察者列表可以减少自己管理同步的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免在通知过程中修改观察者列表&lt;/strong>：在通知观察者的过程中，避免添加或删除观察者，因为这可能会导致死锁或不一致的状态。可以在通知之前创建观察者列表的副本，然后对副本进行迭代。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用条件变量&lt;/strong>：在某些情况下，可以使用条件变量（如C++中的&lt;code>std::condition_variable&lt;/code>）来协调观察者和被观察者之间的线程。例如，当被观察者状态发生变化时，可以使用条件变量来通知等待的观察者。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用不可变对象&lt;/strong>：如果可能，使观察者传递的状态不可变，这样即使在多线程环境中，也不需要额外的同步措施来保护状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用锁分离技术&lt;/strong>：对于复杂的数据结构，可以使用锁分离技术，为数据结构的不同部分使用不同的锁，以减少锁竞争。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用原子操作&lt;/strong>：对于简单的状态更新，可以使用原子操作来确保操作的原子性，而不需要使用重量级的锁。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>每种方法都有其适用场景和潜在的性能影响。在实际应用中，应根据具体的并发需求和性能目标来选择合适的线程安全策略。&lt;/p>
&lt;h2 id="4在实现观察者模式时如何确保被观察者和观察者之间的通信是线程安全的">4.在实现观察者模式时，如何确保被观察者和观察者之间的通信是线程安全的？
&lt;/h2>&lt;p>在实现观察者模式时，确保线程安全是至关重要的，特别是在多线程环境中。以下是一些确保线程安全的策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用同步方法&lt;/strong>：在被观察者（Subject）中，添加、删除观察者（Observer）和通知观察者的方法可以使用&lt;code>synchronized&lt;/code>关键字或在C++中使用互斥锁（如&lt;code>std::mutex&lt;/code>）来同步，确保同一时间只有一个线程可以执行这些操作。这种方法简单易行，但在高并发环境下可能会成为性能瓶颈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用读写锁&lt;/strong>：如果读操作远多于写操作，可以使用读写锁（如C++中的&lt;code>std::shared_mutex&lt;/code>）来允许多个线程同时读取观察者列表，但在修改观察者列表时需要独占访问。这样可以在读多写少的场景下提高性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用线程安全容器&lt;/strong>：一些编程语言提供了线程安全的容器，如Java的&lt;code>ConcurrentHashMap&lt;/code>或C++的&lt;code>std::vector&lt;/code>（通过适当的同步机制）。使用这些容器来存储观察者列表可以减少自己管理同步的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免在通知过程中修改观察者列表&lt;/strong>：在通知观察者的过程中，避免添加或删除观察者，因为这可能会导致死锁或不一致的状态。可以在通知之前创建观察者列表的副本，然后对副本进行迭代。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用条件变量&lt;/strong>：在某些情况下，可以使用条件变量（如C++中的&lt;code>std::condition_variable&lt;/code>）来协调观察者和被观察者之间的线程。例如，当被观察者状态发生变化时，可以使用条件变量来通知等待的观察者。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用不可变对象&lt;/strong>：如果可能，使观察者传递的状态不可变，这样即使在多线程环境中，也不需要额外的同步措施来保护状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用锁分离技术&lt;/strong>：对于复杂的数据结构，可以使用锁分离技术，为数据结构的不同部分使用不同的锁，以减少锁竞争。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用原子操作&lt;/strong>：对于简单的状态更新，可以使用原子操作来确保操作的原子性，而不需要使用重量级的锁。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>每种方法都有其适用场景和潜在的性能影响。在实际应用中，应根据具体的并发需求和性能目标来选择合适的线程安全策略。&lt;/p>
&lt;h2 id="5在多线程环境下如何避免观察者模式中的死锁问题">5.在多线程环境下，如何避免观察者模式中的死锁问题？
&lt;/h2>&lt;p>在多线程环境下实现观察者模式时，要避免死锁问题，可以采取以下措施：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>锁顺序&lt;/strong>：确保所有线程在获取多个锁时都按照相同的顺序进行，这样可以避免循环等待条件，这是死锁的四个必要条件之一 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>锁超时&lt;/strong>：在尝试获取锁时使用超时机制，如果在指定的时间内无法获取锁，则释放已持有的锁并重试，这有助于避免死锁 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>最小化锁持有时间&lt;/strong>：尽量减少持有锁的时间，例如，在持有锁的代码块中只执行必要的操作，这样可以减少锁竞争的机会 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免在持有锁时调用外部代码&lt;/strong>：因为外部代码可能会尝试获取其他锁，这可能导致死锁 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用不可变备忘录&lt;/strong>：如果备忘录对象是不可变的，那么它们不需要同步，因为它们的状态在创建后不会改变，这可以减少锁的需求 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用线程局部存储&lt;/strong>：对于备忘录对象，可以使用线程局部存储来确保每个线程都有其自己的副本，从而避免线程间的共享和竞争 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用条件变量&lt;/strong>：在某些情况下，可以使用条件变量（如C++中的&lt;code>std::condition_variable&lt;/code>）来协调观察者和被观察者之间的线程 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免死锁的策略&lt;/strong>：包括一次性分配所有资源、可剥夺资源、资源有序分配法等，这些策略可以破坏死锁产生的四个必要条件中的一个或多个 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用死锁检测和解除机制&lt;/strong>：在系统中实现死锁检测算法，如资源分配图或等待图，定期检查是否存在死锁，并采取恢复措施，如终止线程或资源抢占 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免嵌套锁&lt;/strong>：尽量避免在持有一个锁的情况下去请求另一个锁，因为这种情况很容易导致死锁 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述措施，可以在多线程环境中有效地使用观察者模式，同时避免死锁问题，从而提高系统的稳定性和可维护性。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Prototype Pattern</title><link>https://wesigj.github.io/p/design-pattern-prototype-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-prototype-pattern/</guid><description>&lt;h1 id="设计模式-原型模式-prototype-pattern">设计模式-原型模式 Prototype Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>原型模式（Prototype Pattern）是一种创建型设计模式&lt;/li>
&lt;li>它允许你通过复制现有的对象来创建新的实例，而不是通过新建的方式来构造&lt;/li>
&lt;li>这种模式特别适用于那些创建过程复杂、资源消耗大或者创建后需要快速复制的场景&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1原型模式-prototype-pattern">1.原型模式 Prototype Pattern
&lt;/h2>&lt;p>原型模式（Prototype Pattern）是一种创建型设计模式，它允许你通过复制现有的对象来创建新的实例，而不是通过新建的方式来构造。这种模式特别适用于那些创建过程复杂、资源消耗大或者创建后需要快速复制的场景。&lt;/p>
&lt;h3 id="11原型模式的主要角色包括">1.1.原型模式的主要角色包括
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>原型接口（Prototype Interface）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>声明一个克隆自己的操作，通常是一个&lt;code>Clone&lt;/code>方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>具体原型类（Concrete Prototype）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>实现原型接口，提供具体的&lt;code>Clone&lt;/code>方法来返回对象的副本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端（Client）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>创建和操作具体原型对象，通过调用&lt;code>Clone&lt;/code>方法来复制对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="12c实现示例">1.2.C++实现示例
&lt;/h3>&lt;p>首先，定义原型接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Prototype.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Prototype&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Prototype&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="n">Prototype&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">Clone&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着，创建具体的原型类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ConcretePrototype.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Prototype.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcretePrototype&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Prototype&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcretePrototype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcretePrototype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">ConcretePrototype&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Prototype&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">Clone&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcretePrototype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，客户端代码使用原型模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ConcretePrototype.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcretePrototype&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">original&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcretePrototype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Original Object&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 复制对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">ConcretePrototype&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">copy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Clone&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用复制的对象...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 清理原始对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">copy&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 清理复制的对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13原型模式的应用场景">1.3.原型模式的应用场景
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>创建成本高&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当对象的构造成本很高时，使用原型模式可以通过复制现有对象来降低创建成本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建过程复杂&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果创建对象的过程非常复杂，涉及多个步骤或者依赖多个外部条件，使用原型模式可以简化创建过程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象的初始状态是固定的&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当需要创建的对象具有固定的初始状态，并且后续需要在此基础上进行修改时，原型模式可以快速提供初始状态。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象状态容易改变&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果对象的状态容易改变，并且需要保存和恢复状态，原型模式可以方便地保存对象的状态快照。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现对象的动态加载和卸载&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在需要根据需求动态加载和卸载对象的场景下，原型模式可以快速复制对象，实现对象的动态管理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现对象的版本控制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当对象有多个版本，并且需要在不同版本之间切换时，原型模式可以方便地复制和维护不同版本的实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="14注意事项">1.4.注意事项
&lt;/h3>&lt;ul>
&lt;li>原型模式要求所有克隆的对象都是可复制的，这可能会限制对象所包含的成员类型（如不能包含指针或引用类型的成员）。&lt;/li>
&lt;li>深拷贝和浅拷贝：默认情况下，C++的拷贝构造函数执行的是浅拷贝。如果对象包含指针等需要特殊处理的成员，可能需要实现深拷贝逻辑。&lt;/li>
&lt;li>使用原型模式可能会增加内存的消耗，因为需要存储多个对象副本。&lt;/li>
&lt;/ul>
&lt;h2 id="2原型模式优缺点">2.原型模式优缺点
&lt;/h2>&lt;h3 id="21优点">2.1.优点
&lt;/h3>&lt;ul>
&lt;li>你可以克隆对象， 而无需与它们所属的具体类相耦合。&lt;/li>
&lt;li>你可以克隆预生成原型， 避免反复运行初始化代码。&lt;/li>
&lt;li>你可以更方便地生成复杂对象。&lt;/li>
&lt;li>你可以用继承以外的方式来处理复杂对象的不同配置。&lt;/li>
&lt;/ul>
&lt;h3 id="22缺点">2.2.缺点
&lt;/h3>&lt;ul>
&lt;li>克隆包含循环引用的复杂对象可能会非常麻烦。&lt;/li>
&lt;/ul>
&lt;h2 id="3原型模式在实际开发中有哪些常见的应用场景">3.原型模式在实际开发中有哪些常见的应用场景？
&lt;/h2>&lt;p>原型模式（Prototype Pattern）在实际开发中有许多应用场景，尤其适用于需要快速复制或克隆对象的情况。以下是一些常见的应用实例：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>配置信息的复制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在应用程序中，如果存在多个配置实例，它们之间只有少量差异，可以使用原型模式快速复制一个基础配置，然后进行少量修改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>UI元素的复制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在图形界面开发中，如果需要创建多个相似的控件或组件，可以使用原型模式复制一个已有的控件，然后进行个性化调整。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象的快速加载&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当对象的创建过程非常耗时或占用大量资源时，可以使用原型模式预先创建好对象，然后通过复制来快速提供对象实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据备份&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在需要对数据进行备份的场景中，可以使用原型模式来复制对象，快速生成数据的副本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏开发中的角色克隆&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在游戏开发中，如果存在多个相似的角色或敌人，可以使用原型模式来复制一个基础角色，然后根据需要进行调整。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Web开发中的页面元素复制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在Web开发中，如果需要在页面上复制多个相似的DOM元素，可以使用原型模式的思想来实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>报表工具中的数据系列复制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在报表工具中，如果用户需要复制一个数据系列并对其进行修改，可以使用原型模式快速复制数据系列。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>办公软件中的文档模板&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在办公软件中，如果提供了多种文档模板，用户可以复制一个模板来创建新文档，然后进行个性化编辑。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据库中的记录复制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在数据库应用中，如果需要复制具有相似属性的记录，可以使用原型模式快速复制记录。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现对象的版本控制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在需要对对象进行版本控制的场景中，可以使用原型模式来复制对象的不同版本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现对象的深克隆&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当对象需要进行深克隆，即完全复制包括对象内部所有引用对象的副本时，可以使用原型模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现对象的池模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在对象池模式中，可以使用原型模式来快速复制对象，实现对象的复用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现软件的插件架构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在插件架构中，可以使用原型模式来复制插件实例，以支持多个插件的相同行为。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现算法的参数设置&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在算法实现中，如果算法参数对象较为复杂，可以使用原型模式复制参数对象，方便算法的多次调用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>使用原型模式可以提高对象创建的效率，降低系统的资源消耗，并有助于实现对象的快速复制和灵活管理。然而，需要注意的是，原型模式可能会增加内存消耗，并且在处理包含引用类型成员的对象时需要特别小心，以避免浅拷贝导致的问题。&lt;/p>
&lt;h2 id="4在实际开发中如何决定何时使用原型模式而不是其他模式比如单例模式">4.在实际开发中，如何决定何时使用原型模式而不是其他模式，比如单例模式？
&lt;/h2>&lt;p>在实际开发中，选择使用原型模式（Prototype Pattern）而不是其他模式，如单例模式（Singleton Pattern），取决于具体的应用场景和设计需求。以下是一些考虑因素，可以帮助你决定何时使用原型模式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>对象创建的复杂性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果对象的创建过程非常复杂或资源消耗大，原型模式可以通过复制现有对象来简化创建过程。单例模式则用于确保一个类只有一个实例，并提供一个全局访问点。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象的可变性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果对象的状态或属性需要频繁变化，并且这些变化不会影响到其他对象，原型模式可以提供灵活性，允许快速复制并修改对象。而单例模式通常用于提供不变且唯一的实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象的多样性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当需要创建多个相似但又不完全相同的对象时，原型模式可以通过复制一个基础对象并进行小的调整来实现。单例模式不适用于需要多个实例的情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果对象创建的性能是关键考虑因素，原型模式可以提供快速的对象创建。单例模式在首次创建实例时可能需要一些初始化工作，但之后提供全局访问点的速度很快。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象的共享性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>单例模式的核心是提供一个全局访问点，确保所有访问都使用相同的实例。如果需要的对象是可变的，并且需要在不同地方共享相同的状态，单例模式可能更合适。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象的独立性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果需要的对象是独立的，并且不需要与其他对象共享状态，原型模式可以提供这种独立性。单例模式则强调共享同一实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象的配置&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果对象需要根据不同的配置创建多个变体，原型模式可以方便地复制一个基础配置并进行调整。单例模式通常不适用于需要多个配置实例的情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象的生命周期&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>单例模式的对象通常在应用程序的整个生命周期内都存在。如果对象的生命周期需要更加灵活，例如需要根据需求创建和销毁，原型模式可能更合适。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程安全&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>单例模式需要考虑线程安全问题，确保在多线程环境中只创建一个实例。原型模式在复制对象时也需要考虑线程安全，尤其是在对象包含可变共享资源时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设计意图&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>考虑设计模式的设计意图。单例模式的意图是控制实例数量，而原型模式的意图是通过复制来创建新实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可扩展性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果系统未来可能需要支持更多类型的实例，原型模式提供了更好的可扩展性，允许通过继承和组合来创建新的对象类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源管理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果对象包含需要特殊管理的资源，如文件句柄或数据库连接，单例模式可以确保这些资源被适当地管理和重用。原型模式则需要确保复制的对象不会共享这些资源，除非这是预期的行为。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>在决定使用原型模式还是单例模式时，需要根据实际的需求和上下文来权衡。通常，如果需要快速复制对象并且对象的创建成本较高，或者需要创建多个相似但不完全相同的对象，原型模式是一个更好的选择。如果目标是控制实例的数量并提供一个全局访问点，单例模式可能更合适。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Proxy Pattern</title><link>https://wesigj.github.io/p/design-pattern-proxy-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-proxy-pattern/</guid><description>&lt;h1 id="设计模式-代理模式-proxy-pattern">设计模式-代理模式-Proxy Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>代理模式（Proxy Pattern）是一种结构型设计模式&lt;/strong>&lt;/li>
&lt;li>&lt;strong>核心思想是通过引入一个代理对象来间接访问实际对象，从而在不改变实际对象代码的前提下，增加额外的功能操作，如访问控制、延迟初始化、日志记录等&lt;/strong>&lt;/li>
&lt;li>&lt;strong>代理模式使得客户端代码可以透明地与代理对象进行交互，而无需直接与实际对象通信。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>了解该模式,看前4章节就够了，其他科普为主&lt;/strong>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1代理模式proxy-pattern">1.代理模式（Proxy Pattern）
&lt;/h2>&lt;p>代理模式（Proxy Pattern）是一种结构型设计模式，其核心思想是通过引入一个代理对象来间接访问实际对象，从而在不改变实际对象代码的前提下，增加额外的功能操作，如访问控制、延迟初始化、日志记录等。代理模式使得客户端代码可以透明地与代理对象进行交互，而无需直接与实际对象通信。&lt;/p>
&lt;p>代理模式通常分为几种类型：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>静态代理&lt;/strong>：在代码编译时就已经确定代理类和目标类的关系。代理类通常会实现与目标类相同的接口，并在内部持有目标类的引用，从而在调用目标对象的方法前后进行额外的操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态代理&lt;/strong>：在程序运行时，通过反射机制动态创建代理类。在Java中，可以使用&lt;code>java.lang.reflect.Proxy&lt;/code>类和&lt;code>java.lang.reflect.InvocationHandler&lt;/code>接口来实现动态代理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>虚拟代理&lt;/strong>：当有一个操作需要创建一个资源消耗较大的对象时，可以先使用一个较小的代理对象来代表真实对象。真实对象只有在需要时才会被实际创建。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保护代理&lt;/strong>：控制对原始对象的访问权限，根据不同的访问权限提供不同的访问策略。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>智能引用代理&lt;/strong>：在访问对象时执行额外的动作，如引用计数、加载持久对象到内存等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>远程代理&lt;/strong>：为位于不同地址空间的对象提供局部代表，隐藏对象存在于不同地址空间的事实。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>代理模式的应用场景包括：&lt;/p>
&lt;ul>
&lt;li>当需要对目标对象的访问进行控制时。&lt;/li>
&lt;li>当需要为远程对象提供局部代表时。&lt;/li>
&lt;li>当需要对目标对象的创建进行延迟时。&lt;/li>
&lt;li>当需要给目标对象添加额外的功能操作时。&lt;/li>
&lt;/ul>
&lt;p>代理模式的优点包括：&lt;/p>
&lt;ul>
&lt;li>能够在不修改目标对象的前提下，通过引入代理对象来扩展功能。&lt;/li>
&lt;li>能够控制对目标对象的访问，增加额外的安全或者日志记录等操作。&lt;/li>
&lt;li>能够隐藏对象的实现细节，提供远程访问或者延迟初始化等功能。&lt;/li>
&lt;/ul>
&lt;p>代理模式的缺点包括：&lt;/p>
&lt;ul>
&lt;li>可能会引入额外的复杂性，因为需要维护代理对象和目标对象之间的通信。&lt;/li>
&lt;li>对于简单的操作，可能会增加不必要的性能开销。&lt;/li>
&lt;/ul>
&lt;p>在使用代理模式时，需要根据实际需求选择合适的代理类型，并设计好代理对象和目标对象之间的交互方式。&lt;/p>
&lt;h2 id="2c中-代理模式">2.C++中 代理模式
&lt;/h2>&lt;p>在C++中实现代理模式，可以通过创建一个代理类来代表实际对象（也称为主题）。代理类会包含实际对象的引用或指针，并在调用实际对象的方法前后添加额外的功能。以下是代理模式在C++中的一个简单示例：&lt;/p>
&lt;p>首先，定义一个接口（通常是一个抽象类或纯虚函数类），这样代理类和实际对象都可以继承这个接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ISubject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">Request&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 纯虚函数，定义接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">ISubject&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 虚析构函数，确保派生类对象能够正确销毁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来，创建实际对象的类，它实现了上述接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">RealSubject&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ISubject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">Request&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;RealSubject: Handling request.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，创建代理类，它也实现了同样的接口，并包含对实际对象的引用或指针：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Proxy&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ISubject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RealSubject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">realSubject&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">active&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 用于控制代理是否应该代理真实对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Proxy&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">realSubject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">active&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">false&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Request&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">active&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Proxy: The real subject is not available.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ActivateRealSubject&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">active&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">realSubject&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">realSubject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">ActivateRealSubject&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Proxy: Activating real subject.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">realSubject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RealSubject&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Proxy&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">realSubject&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 清理资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，客户端代码可以通过代理类来访问实际对象：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Proxy&lt;/span> &lt;span class="n">proxy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 此时会激活实际对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 后续调用可以继续通过代理来访问实际对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>Proxy&lt;/code> 类在第一次接收到请求时会创建一个 &lt;code>RealSubject&lt;/code> 对象。之后的请求都会直接委托给这个已经创建的 &lt;code>RealSubject&lt;/code> 对象。这就是一个简单的虚拟代理模式的实现，它延迟了实际对象的创建。&lt;/p>
&lt;p>代理模式可以扩展到其他类型，如远程代理、保护代理等，具体实现会根据需要添加的额外功能而有所不同。在C++中，代理模式的实现通常涉及到指针或引用的使用，以及可能的动态内存管理。&lt;/p>
&lt;h2 id="3代理模式的优缺点">3.代理模式的优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>你可以在客户端毫无察觉的情况下控制服务对象。&lt;/li>
&lt;li>如果客户端对服务对象的生命周期没有特殊要求， 你可以对生命周期进行管理。&lt;/li>
&lt;li>即使服务对象还未准备好或不存在， 代理也可以正常工作。&lt;/li>
&lt;li>开闭原则。 你可以在不对服务或客户端做出修改的情况下创建新代理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>代码可能会变得复杂， 因为需要新建许多类。&lt;/li>
&lt;li>服务响应可能会延迟。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="4代理模式在实际开发中有哪些常见的应用场景">4.代理模式在实际开发中有哪些常见的应用场景？
&lt;/h2>&lt;p>代理模式在实际开发中有多种应用场景，以下是一些常见的例子：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>远程代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在分布式系统中，远程代理用于为远程对象提供本地接口，使得客户端可以像访问本地对象一样访问远程对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>虚拟代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在需要延迟加载资源的场景中，如加载大型图像或文档，可以先使用一个较小的代理对象，直到需要完整内容时才加载真实对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保护代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>控制对原始对象的访问权限，例如在系统中实现权限检查，确保只有具备相应权限的用户才能访问特定的对象或方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>智能引用代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在对象访问时执行额外操作，如引用计数、日志记录、事务管理等。这在资源管理、性能监控和调试中非常有用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缓存代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为对象的访问结果提供缓存，避免重复计算或重复访问数据库，提高系统性能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>日志代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在调用对象方法前后添加日志记录，用于监控或者调试，帮助开发者追踪系统的执行流程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同步代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在多线程环境中，确保对象的方法在同一时间内只能由一个线程执行，防止数据竞争和不一致性问题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>防火墙代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在网络安全中，防火墙代理可以控制对某些资源的访问，提供安全检查和过滤。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>延迟初始化代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>延迟对象的初始化直到真正需要时才进行，优化启动时间，提高系统响应速度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单例代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保一个类只有一个实例，并提供一个全局访问点，同时可以在访问实例时添加额外的逻辑。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程安全代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在多线程环境中，确保对象的线程安全性，例如通过代理对象来控制对共享资源的同步访问。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>限流代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>控制对某些资源的访问频率，例如API调用的限流，防止系统过载。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>装饰代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在不修改原有对象的基础上，通过代理添加额外的功能，类似于装饰器模式，但更侧重于控制访问。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>认证代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在访问需要认证的服务时，代理可以处理认证过程，如OAuth、JWT等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据访问对象（DAO）代理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在数据访问层中，代理可以处理数据库连接的获取和释放，以及事务的管理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>代理模式的关键在于它能够在不改变原有对象的基础上，通过引入代理对象来扩展功能，同时保持了客户端代码的透明性。在设计模式的选择上，代理模式提供了一种灵活且强大的解决方案。&lt;/p>
&lt;h2 id="5在分布式系统中远程代理模式是如何工作的">5.在分布式系统中，远程代理模式是如何工作的？
&lt;/h2>&lt;p>在分布式系统中，远程代理模式允许客户端通过一个本地代理对象间接访问远程服务器上的对象。这种方式隐藏了对象存在于不同地址空间的事实，使得客户端可以像访问本地对象一样透明地访问远程对象。远程代理在客户端和远程对象之间起到一个中间层的作用，它可以处理网络通信的细节，如连接的建立、数据的传输和断开连接等。&lt;/p>
&lt;p>远程代理的工作原理通常包括以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>客户端向本地代理对象发送请求。&lt;/li>
&lt;li>本地代理对象将请求转发到远程服务器上的真实对象。&lt;/li>
&lt;li>远程服务器上的真实对象执行请求并返回结果。&lt;/li>
&lt;li>本地代理对象将结果返回给客户端。&lt;/li>
&lt;/ol>
&lt;p>远程代理模式的优点包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>简化客户端代码&lt;/strong>：客户端不需要知道远程对象的具体位置和访问细节。&lt;/li>
&lt;li>&lt;strong>提高性能&lt;/strong>：代理可以缓存远程对象的信息，减少网络通信的次数。&lt;/li>
&lt;li>&lt;strong>增强安全性&lt;/strong>：代理可以添加安全控制，如认证和加密，以保护远程访问。&lt;/li>
&lt;li>&lt;strong>灵活性&lt;/strong>：可以在不改变客户端代码的情况下更换或更新远程对象的实现。&lt;/li>
&lt;/ul>
&lt;p>在实际应用中，远程代理模式可以用于各种分布式系统和服务，如Web服务、分布式数据库访问、云服务等。例如，在Java的RMI（Remote Method Invocation）机制中，就使用了远程代理来允许Java程序调用运行在不同JVM上的远程对象的方法。&lt;/p>
&lt;p>远程代理模式在设计时需要考虑的关键因素包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>网络延迟和带宽&lt;/strong>：远程代理需要优化数据传输以减少网络延迟和带宽消耗。&lt;/li>
&lt;li>&lt;strong>连接管理&lt;/strong>：代理需要有效地管理与远程服务器的连接，包括连接的创建、复用和关闭。&lt;/li>
&lt;li>&lt;strong>错误处理&lt;/strong>：代理需要处理网络错误和远程对象调用失败的情况。&lt;/li>
&lt;li>&lt;strong>安全性&lt;/strong>：代理需要确保数据在传输过程中的安全，包括使用加密和认证机制。&lt;/li>
&lt;/ul>
&lt;p>总的来说，远程代理模式是分布式系统中常用的一种设计模式，它为客户端提供了一种透明和简洁的方式来访问远程资源。&lt;/p>
&lt;h2 id="6分布式系统中远程代理模式有哪些常见的安全风险如何防范">6.分布式系统中远程代理模式有哪些常见的安全风险，如何防范？
&lt;/h2>&lt;p>在分布式系统中，远程代理模式的安全风险主要包括数据泄露、恶意软件传播、身份盗用、拒绝服务攻击（DoS）、中间人攻击、注入攻击、跨站脚本攻击（XSS）以及未经授权访问等。为了防范这些风险，可以采取以下措施：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>选择可靠的代理服务器&lt;/strong>：选择信誉良好、口碑可靠的代理服务器提供商，避免使用来路不明的代理服务器，并定期更换代理服务器以降低数据泄露风险。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置加密连接&lt;/strong>：使用SSL/TLS等加密技术确保数据在传输过程中的安全性，防止数据在传输过程中被窃取或篡改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定期更新和升级&lt;/strong>：及时更新代理服务器的系统和软件，修补安全漏洞，升级软件以防止黑客利用漏洞进行攻击。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>限制访问权限&lt;/strong>：严格控制对代理服务器的访问权限，确保只有授权用户才能访问和使用代理服务器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高自我保护意识&lt;/strong>：用户需要提高自我保护意识，注意保护个人信息和登录凭证，避免使用过于简单的密码，并定期更换密码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用防火墙和入侵检测系统&lt;/strong>：监控网络流量，阻止恶意请求，并警告管理员潜在的攻击。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全编码实践&lt;/strong>：遵循最佳编程实践，避免引入已知的安全漏洞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续集成和持续部署（CI/CD）&lt;/strong>：自动化测试和部署过程，确保快速发现和修复安全问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定期审计和渗透测试&lt;/strong>：评估系统的安全状况，发现潜在的漏洞，并进行修复。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全意识培训&lt;/strong>：提高员工对安全问题的认识，减少内部威胁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据加密&lt;/strong>：对敏感数据进行加密存储，以防止未经授权的访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>身份验证与授权&lt;/strong>：实施身份验证和基于角色的访问控制（RBAC）来限制对敏感资源的访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>访问控制与审计&lt;/strong>：实施访问控制机制并进行系统活动的监控和记录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分布式安全架构&lt;/strong>：构建安全的通信协议、部署防火墙和入侵检测系统，以及实施统一的安全管理策略。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过实施这些安全措施，可以有效地降低远程代理模式在分布式系统中的安全风险。同时，也需要保持对网络安全动态的关注和了解，以便及时应对新的安全威胁和挑战。&lt;/p>
&lt;h2 id="7分布式系统中的远程代理模式有哪些常见的安全漏洞如何进行有效的安全审计">7.分布式系统中的远程代理模式有哪些常见的安全漏洞，如何进行有效的安全审计？
&lt;/h2>&lt;p>在分布式系统中，远程代理模式的安全漏洞主要包括服务器端请求伪造（SSRF）、远程代码执行、未授权访问、数据泄露、DDoS攻击等。以下是一些常见的安全漏洞及其防范措施：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>服务器端请求伪造（SSRF）&lt;/strong>：攻击者通过代理服务器发起请求，可以访问和操作内部系统。防范措施包括限制代理服务器可以访问的地址，对请求进行严格的验证和过滤。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>远程代码执行&lt;/strong>：攻击者通过注入恶意代码，利用远程代理执行代码。防范措施包括对所有输入进行严格的验证和过滤，使用安全的编码实践，及时更新和修补系统漏洞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>未授权访问&lt;/strong>：攻击者可能尝试未经授权访问系统资源。防范措施包括实施强大的认证和访问控制机制，使用多因素认证，限制对敏感资源的访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据泄露&lt;/strong>：敏感数据可能在传输或存储过程中被截获。防范措施包括使用加密技术保护数据，实施数据备份和恢复策略，定期进行安全审计。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>DDoS攻击&lt;/strong>：攻击者通过大量请求使代理服务器过载，导致服务不可用。防范措施包括使用DDoS防护服务，实施速率限制和流量监控，使用负载均衡分散流量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>跨站脚本攻击（XSS）&lt;/strong>：攻击者在Web应用程序中注入恶意脚本。防范措施包括对用户输入进行转义和编码，使用内容安全策略限制可加载的资源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>为了进行有效的安全审计，可以采取以下措施：&lt;/p>
&lt;ul>
&lt;li>定期进行系统和网络的安全扫描，识别潜在的安全漏洞。&lt;/li>
&lt;li>实施日志记录和监控，以便跟踪和分析系统活动。&lt;/li>
&lt;li>进行渗透测试和模拟攻击，评估系统的防御能力。&lt;/li>
&lt;li>制定和执行安全策略和程序，包括密码管理、数据保护和访问控制。&lt;/li>
&lt;li>培训员工，提高他们对网络安全威胁的认识和防范能力。&lt;/li>
&lt;/ul>
&lt;p>通过这些措施，可以提高分布式系统中远程代理模式的安全性，减少安全风险。&lt;/p>
&lt;h2 id="8智能引用代理模式在性能监控中具体是如何实现的">8.智能引用代理模式在性能监控中具体是如何实现的？
&lt;/h2>&lt;p>智能引用代理模式在性能监控中的应用主要是通过在代理对象中添加额外的逻辑来实现的。这种代理可以在每次访问对象时执行一些附加操作，比如记录日志、监控性能、引用计数等，而无需修改实际对象的代码。以下是智能引用代理在性能监控中的具体实现步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义接口&lt;/strong>：首先定义一个接口，这个接口包含所有代理类和实际对象需要实现的方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现实际对象&lt;/strong>：创建一个实际对象类，实现上述接口，并包含实际的业务逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建代理类&lt;/strong>：实现一个代理类，同样实现该接口，并在代理类中持有实际对象的引用。在代理类的方法中，可以在调用实际对象的方法前后添加性能监控的代码，如记录方法调用时间、计算执行时长等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代理对象的额外逻辑&lt;/strong>：在代理类的方法中，添加额外的性能监控逻辑。例如，在方法调用前记录开始时间，调用后记录结束时间，并计算耗时。这些数据可以用于后续的性能分析和优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端使用代理&lt;/strong>：客户端代码通过代理对象来访问实际对象，这样所有对实际对象的调用都会经过代理，代理对象可以收集性能数据并进行监控。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能数据分析&lt;/strong>：收集到的性能数据可以用于分析系统的性能瓶颈，帮助开发者进行系统优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全性和灵活性&lt;/strong>：代理模式可以提高系统的安全性和灵活性，因为它允许在不修改实际对象的情况下添加额外的安全检查和控制逻辑。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这种方式，智能引用代理模式可以在不改变原有业务逻辑的前提下，为系统提供额外的性能监控和分析功能，帮助开发者更好地理解和优化系统性能。&lt;/p>
&lt;h2 id="9智能引用代理模式在其他领域比如内存管理或数据库操作中有哪些应用案例">9.智能引用代理模式在其他领域，比如内存管理或数据库操作中，有哪些应用案例？
&lt;/h2>&lt;p>智能引用代理模式在内存管理和数据库操作等领域的应用案例如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>内存管理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在内存管理中，智能引用代理可以用于实现引用计数。例如，C++中的&lt;code>std::shared_ptr&lt;/code>是一个典型的智能引用代理，它通过代理对象来管理对象的生命周期，当引用计数归零时自动释放对象占用的内存，从而避免内存泄漏。这种代理模式的应用可以确保资源在不再使用时被正确地释放，优化内存的使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据库操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在数据库操作中，代理模式可以用于实现数据库连接池。代理对象管理数据库连接的生命周期，当应用程序请求数据库连接时，代理对象提供一个现有的连接或者创建一个新的连接。使用完毕后，连接不是被关闭，而是归还到连接池中，以便再次使用。这样可以减少频繁打开和关闭数据库连接的开销，提高数据库操作的效率。&lt;/li>
&lt;li>代理模式还可以用于实现延迟加载，即在真正需要数据时才从数据库加载。这可以提高应用的响应速度和性能，尤其是在处理大量数据时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>其他应用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在分布式系统中，远程代理模式允许客户端通过一个本地代理对象间接访问远程服务器上的对象。这种方式隐藏了对象存在于不同地址空间的事实，使得客户端可以像访问本地对象一样透明地访问远程对象。&lt;/li>
&lt;li>在需要权限控制的场景中，保护代理模式可以控制对原始对象的访问权限，确保只有具备相应权限的用户才能访问特定的对象或方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过这些应用案例，我们可以看到代理模式在实际开发中的灵活性和强大功能，它能够在不改变原有业务逻辑的前提下，为系统提供额外的控制和管理功能。&lt;/p>
&lt;h2 id="10在内存管理中除了引用计数还有哪些方法可以避免内存泄漏">10.在内存管理中，除了引用计数，还有哪些方法可以避免内存泄漏？
&lt;/h2>&lt;p>在内存管理中，除了引用计数，避免内存泄漏的方法还包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>及时释放资源&lt;/strong>：在使用完图片、数据库连接等资源后，及时调用相关方法释放，例如在C++中使用&lt;code>delete&lt;/code>或在Java中调用对象的&lt;code>close&lt;/code>方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用智能指针&lt;/strong>：在C++中，可以使用&lt;code>std::unique_ptr&lt;/code>或&lt;code>std::shared_ptr&lt;/code>来自动管理内存的生命周期，减少手动管理内存的错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免循环引用&lt;/strong>：在对象间存在循环引用时，如果没有正确的引用计数或垃圾回收机制，可能导致内存泄漏。可以通过弱引用（&lt;code>WeakReference&lt;/code>）或软引用（&lt;code>SoftReference&lt;/code>）来避免。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源泄露的检查&lt;/strong>：除了内存泄漏外，还有其他类型的资源泄露，如文件句柄、数据库连接、网络套接字等。这些资源在使用完毕后如果没有被正确关闭或释放，也会导致资源泄露。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用RAII技术&lt;/strong>：RAII（Resource Acquisition Is Initialization）是一种编程习惯，通过在对象的构造函数中获取资源，在析构函数中释放资源，确保资源的正确释放。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存分析工具的使用&lt;/strong>：定期使用内存分析工具检测应用内存使用情况，及时发现并修复内存泄漏，如Valgrind、AddressSanitizer等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码审查和测试&lt;/strong>：通过代码审查和测试来确保代码中没有内存泄漏问题，包括单元测试、集成测试和系统测试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免滥用全局变量&lt;/strong>：全局变量的生命周期与应用程序相同，容易导致内存泄漏。尽可能使用局部变量或传递参数代替全局变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单例模式的谨慎使用&lt;/strong>：单例模式会保持对象在整个应用程序的生命周期内存在，若单例对象持有大量数据或资源，可能会导致内存泄漏。确保单例对象只持有必要的引用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常安全&lt;/strong>：在C++中，如果程序抛出异常，需要确保在异常处理过程中正确释放已分配的内存。使用&lt;code>try-catch&lt;/code>块来捕获异常并在适当的位置释放内存。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述措施，可以有效地减少内存泄漏的风险，提高程序的稳定性和性能。&lt;/p>
&lt;h2 id="11数据库操作中代理模式如何实现延迟加载的具体技术细节是什么">11.数据库操作中，代理模式如何实现延迟加载的具体技术细节是什么？
&lt;/h2>&lt;p>在数据库操作中，代理模式实现延迟加载的技术细节主要涉及以下几个方面：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>代理对象的创建&lt;/strong>：在MyBatis等ORM框架中，延迟加载通常是通过动态代理实现的。当框架需要加载一个实体的关联对象时，不是立即从数据库查询，而是先创建一个代理对象。这个代理对象在第一次被访问时，才会触发实际的数据库查询操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>拦截方法调用&lt;/strong>：代理对象会拦截对关联对象属性的访问。例如，如果一个&lt;code>User&lt;/code>实体有一个延迟加载的&lt;code>Address&lt;/code>属性，当调用&lt;code>getUser().getAddress()&lt;/code>时，代理对象会检查&lt;code>Address&lt;/code>是否已经加载。如果没有，则代理对象会执行数据库查询来加载&lt;code>Address&lt;/code>，并将结果设置到&lt;code>User&lt;/code>实体的&lt;code>Address&lt;/code>属性中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置延迟加载&lt;/strong>：在MyBatis中，可以通过在&lt;code>mybatis-config.xml&lt;/code>配置文件中设置&lt;code>lazyLoadingEnabled&lt;/code>为&lt;code>true&lt;/code>来启用延迟加载。此外，还可以通过&lt;code>fetchType&lt;/code>属性在具体的映射文件中为每个关联属性指定加载策略。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>处理循环引用&lt;/strong>：在某些情况下，实体间的关联可能导致循环引用的问题。代理模式需要能够妥善处理这种情况，避免无限递归查询。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：虽然延迟加载可以减少初始加载的数据量，提高应用的响应速度，但也可能引发额外的数据库查询，影响性能。因此，需要合理配置和使用延迟加载，以平衡性能和资源使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代理模式的应用&lt;/strong>：代理模式在数据库操作中的应用不仅限于延迟加载，还可以用于实现事务管理、缓存、权限控制等功能。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在实际应用中，代理模式的延迟加载技术细节通常是由ORM框架内部实现的，开发者只需要通过配置来启用和控制延迟加载的行为。例如，在MyBatis中，可以通过配置文件和映射文件中的相关设置来实现延迟加载，而具体的代理对象创建和方法拦截逻辑则由框架自动处理。&lt;/p>
&lt;h2 id="12在分布式系统中远程代理模式是如何保证数据一致性和安全性的">12.在分布式系统中，远程代理模式是如何保证数据一致性和安全性的？
&lt;/h2>&lt;p>在分布式系统中，远程代理模式通过以下方式来保证数据一致性和安全性：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>数据一致性保证&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>使用一致性协议&lt;/strong>：远程代理可以通过实现如Paxos或Raft这样的分布式一致性协议来确保所有节点上的数据保持一致。这些协议通过日志复制和领导者选举机制来保证数据在多个节点间的一致性。&lt;/li>
&lt;li>&lt;strong>版本控制和MVCC&lt;/strong>：多版本并发控制（MVCC）允许系统在处理并发操作时，通过版本号来管理数据的不同版本，从而避免更新冲突并保持数据一致性。&lt;/li>
&lt;li>&lt;strong>同步和异步复制&lt;/strong>：远程代理可以采用同步或异步数据复制策略，确保数据在多个节点上的副本保持一致。同步复制确保写操作在所有副本上完成后才算成功，而异步复制则允许系统在写操作后逐步同步数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全性保证&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>权限控制&lt;/strong>：远程代理可以实施细粒度的访问控制，确保只有授权的用户或服务能够访问特定的数据或执行特定的操作。&lt;/li>
&lt;li>&lt;strong>加密通信&lt;/strong>：代理模式可以利用SSL/TLS等加密技术来保护客户端和服务器之间的通信，防止数据在传输过程中被截获或篡改。&lt;/li>
&lt;li>&lt;strong>认证和授权&lt;/strong>：远程代理可以集成认证机制，如OAuth或JWT，来验证用户的身份，并根据用户的角色和权限来授权访问。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>其他技术细节&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>代理对象的创建&lt;/strong>：远程代理对象在客户端请求时创建，它封装了与远程服务的通信细节，包括网络连接的建立、数据的序列化和反序列化等。&lt;/li>
&lt;li>&lt;strong>请求转发&lt;/strong>：代理对象接收客户端的请求，并将其转发到远程服务。在转发过程中，代理可以添加额外的安全检查或数据验证逻辑。&lt;/li>
&lt;li>&lt;strong>错误处理&lt;/strong>：远程代理需要能够妥善处理网络错误和远程服务不可用的情况，确保系统的健壮性和可靠性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过上述机制，远程代理模式在分布式系统中有效地保证了数据的一致性和安全性，同时也提高了系统的可扩展性和可维护性。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Singleton Pattern</title><link>https://wesigj.github.io/p/design-pattern-singleton-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-singleton-pattern/</guid><description>&lt;h1 id="设计模式-单例模式">设计模式-单例模式
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;p>单例模式是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>初次接触，直接说懒汉式和饿汉式，容易把人搞懵掉，先认识一下吧！&lt;/strong>&lt;/p>
&lt;h2 id="1单例模式中懒汉式和饿汉式区别">1.单例模式中懒汉式和饿汉式区别
&lt;/h2>&lt;p>单例模式中的懒汉式和饿汉式是两种不同的实现策略，它们在实例化单例对象的时机和线程安全性方面有所不同。以下是懒汉式和饿汉式单例模式的主要区别：&lt;/p>
&lt;h3 id="11懒汉式lazy-initialization">1.1.懒汉式（Lazy Initialization）
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>实例化时机&lt;/strong>：懒汉式单例在第一次被使用时才会创建实例，即延迟初始化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程安全性&lt;/strong>：标准的懒汉式实现不是线程安全的。需要引入锁机制（如双重检查锁定）来保证线程安全。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源利用率&lt;/strong>：由于延迟初始化，懒汉式可能在某些情况下减少资源占用，但这也取决于具体实现和使用场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能开销&lt;/strong>：在多线程环境下，可能因为锁机制引入额外的性能开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">LazySingleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">LazySingleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LazySingleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">LazySingleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LazySingleton&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">LazySingleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">LazySingleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">LazySingleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="12饿汉式eager-initialization">1.2.饿汉式（Eager Initialization）
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>实例化时机&lt;/strong>：饿汉式单例在程序启动时就立即创建实例，即立即初始化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程安全性&lt;/strong>：饿汉式实现是线程安全的，因为它在程序启动时就完成了实例化，不存在多线程竞争的问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源利用率&lt;/strong>：饿汉式可能会在程序启动时就占用资源，即使该单例实例尚未被使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能开销&lt;/strong>：由于避免了锁机制，饿汉式在单例获取时通常具有较高的性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">EagerSingleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">EagerSingleton&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 静态实例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EagerSingleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">EagerSingleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">EagerSingleton&lt;/span> &lt;span class="n">EagerSingleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="13选择建议">1.3.选择建议
&lt;/h3>&lt;ul>
&lt;li>如果单例对象的创建成本较高，且在程序早期不需要立即使用，懒汉式可能更合适，因为它可以延迟对象的创建。&lt;/li>
&lt;li>如果需要确保线程安全，且对单例对象的创建时机没有特别要求，饿汉式是一个简单且有效的选择。&lt;/li>
&lt;li>在多线程环境中，如果使用懒汉式，需要确保通过适当的同步机制（如双重检查锁定）来保证线程安全。&lt;/li>
&lt;/ul>
&lt;p>两种实现方式各有优缺点，应根据具体应用场景和需求来选择最合适的实现策略。&lt;/p>
&lt;h2 id="2单例模式-singleton-实现方式及详细介绍">2.单例模式 Singleton 实现方式及详细介绍
&lt;/h2>&lt;p>在 C++中，单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点来访问这个实例。以下是单例模式的实现方式及详细介绍：&lt;/p>
&lt;h3 id="21-懒汉式线程不安全">2.1. 懒汉式（线程不安全）
&lt;/h3>&lt;p>懒汉式单例模式在第一次使用时才会创建实例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他成员函数和数据成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>在上述代码中， getInstance 函数在第一次被调用时才会创建Singleton类的实例。如果该函数后续被再次调用，将直接返回已经创建的实例。&lt;/li>
&lt;/ul>
&lt;h3 id="22-懒汉式线程安全">2.2. 懒汉式（线程安全）
&lt;/h3>&lt;ul>
&lt;li>懒汉式单例模式在多线程环境下可能会出现问题。如果多个线程同时进入getInstance函数并且instance为nullptr，那么可能会创建多个实例。&lt;/li>
&lt;li>为了解决这个问题，可以使用互斥锁来确保在多线程环境下只有一个线程能够创建实例。例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他成员函数和数据成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="23-饿汉式线程安全">2.3. 饿汉式（线程安全）
&lt;/h3>&lt;p>饿汉式单例模式在程序启动时就创建实例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 静态实例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他成员函数和数据成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 实现静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Singleton&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="24-c11后-局部静态变量线程安全">2.4. C++11后 局部静态变量（线程安全）
&lt;/h3>&lt;ul>
&lt;li>实现原理
&lt;ul>
&lt;li>C++11 引入了线程安全的静态局部变量初始化特性。利用这个特性，可以在获取单例实例的方法中声明一个静态局部变量，该变量在第一次调用方法时被初始化，并且保证线程安全。&lt;/li>
&lt;li>利用局部静态变量的线程安全特性实现单例模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 局部静态变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他成员函数和数据成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="25-注意事项">2.5. 注意事项
&lt;/h3>&lt;ul>
&lt;li>单例类的构造函数、拷贝构造函数和赋值操作符通常都是私有的，以防止创建多个实例。&lt;/li>
&lt;li>需要确保单例的析构函数是公共的，以便能够销毁单例对象。&lt;/li>
&lt;li>在多线程环境中，需要特别注意线程安全问题，可以选择使用锁或原子操作来保证线程安全。&lt;/li>
&lt;/ul>
&lt;p>单例模式在实际应用中非常广泛，比如配置管理器、数据库连接池管理器等场景。然而，过度使用单例可能导致代码难以测试和维护，因此应谨慎使用。&lt;/p>
&lt;h2 id="3单例模式的应用场景">3.单例模式的应用场景
&lt;/h2>&lt;ul>
&lt;li>日志系统
&lt;ul>
&lt;li>在一个应用程序中，通常只需要一个日志系统来记录各种信息。使用单例模式可以确保无论在程序的哪个部分调用日志系统，都只有一个实例在运行，避免了多个日志系统之间的冲突和资源浪费。&lt;/li>
&lt;li>例如，可以将日志系统实现为单例类，提供统一的接口来记录不同级别的日志信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据库连接
&lt;ul>
&lt;li>在访问数据库时，通常需要建立一个数据库连接。使用单例模式可以确保只有一个数据库连接实例存在，避免了重复建立连接的开销和资源浪费。&lt;/li>
&lt;li>例如，可以将数据库连接类实现为单例类，提供方法来执行数据库查询和更新操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>配置管理
&lt;ul>
&lt;li>应用程序的配置信息通常在整个程序中都需要访问。使用单例模式可以确保只有一个配置管理实例存在，方便在程序的任何地方获取和修改配置信息。&lt;/li>
&lt;li>例如，可以将配置管理类实现为单例类，提供方法来读取和修改配置文件中的参数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>总之，单例模式在 C++ 中是一种非常有用的设计模式，它可以确保一个类只有一个实例，并提供一个全局访问点来访问这个实例。在实际应用中，可以根据具体情况选择懒汉式或饿汉式单例模式，并注意线程安全和资源管理等问题。&lt;/p>
&lt;h2 id="4单例模式在多线程环境下如何保证线程安全">4.单例模式在多线程环境下如何保证线程安全？
&lt;/h2>&lt;p>在多线程环境下保证单例模式的线程安全，可以采用以下几种方法：&lt;/p>
&lt;h3 id="41-双重检查锁定double-checked-locking-dcl">4.1. 双重检查锁定（Double-Checked Locking, DCL）
&lt;/h3>&lt;p>双重检查锁定是一种常见的线程安全单例实现方式，它减少了锁的开销。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 再次检查实例是否已被创建
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="42-局部静态变量">4.2. 局部静态变量
&lt;/h3>&lt;p>利用局部静态变量的线程安全特性，编译器和其他运行时环境保证了局部静态变量的线程安全初始化。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 局部静态变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="43-原子操作">4.3. 原子操作
&lt;/h3>&lt;p>使用原子操作来确保实例化过程的原子性，避免多线程同时创建实例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;atomic&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">initialized&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">initialized&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">lock_guard&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">initialized&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initialized&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">store&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">initialized&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="44-使用-stdcall_once-和-stdonce_flag">4.4. 使用 &lt;code>std::call_once&lt;/code> 和 &lt;code>std::once_flag&lt;/code>
&lt;/h3>&lt;p>C++11 引入了 &lt;code>std::call_once&lt;/code> 函数，它保证在多线程环境下对给定函数的首次调用是单线程执行的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">once_flag&lt;/span> &lt;span class="n">onceFlag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">call_once&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onceFlag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[](){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">once_flag&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">onceFlag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="45-注意事项">4.5. 注意事项
&lt;/h3>&lt;ul>
&lt;li>双重检查锁定需要使用 &lt;code>std::atomic&lt;/code> 或者合适的锁机制来避免多线程环境下的竞态条件。&lt;/li>
&lt;li>局部静态变量的方法简单且线程安全，但可能在程序的生命周期内无法释放单例对象占用的资源。&lt;/li>
&lt;li>&lt;code>std::call_once&lt;/code> 是C++11引入的，它提供了一种优雅的方式来保证线程安全的单例模式实现。&lt;/li>
&lt;/ul>
&lt;p>在设计单例模式时，需要根据实际的应用场景和需求来选择合适的线程安全实现方式。&lt;/p>
&lt;h2 id="5除了懒汉式和饿汉式还有哪些实现单例模式的方法">5.除了懒汉式和饿汉式，还有哪些实现单例模式的方法？
&lt;/h2>&lt;p>除了懒汉式和饿汉式，C++中还有其他几种实现单例模式的方法，包括使用C++11标准引入的线程安全静态局部变量、基于函数的局部静态变量、以及使用智能指针。以下是这些方法的示例：&lt;/p>
&lt;h3 id="51-线程安全静态局部变量c11">5.1. 线程安全静态局部变量（C++11）
&lt;/h3>&lt;p>C++11标准规定，静态局部变量在首次使用时会自动初始化，并且是线程安全的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 线程安全的静态局部变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他成员函数和数据成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="52-基于函数的局部静态变量">5.2. 基于函数的局部静态变量
&lt;/h3>&lt;p>在C++中，函数内部的静态变量在首次调用函数时初始化，并且具有线程安全的特性。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createInstance&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">createInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 其他成员函数和数据成员
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="53-使用-stdcall_once-和-stdonce_flag">5.3. 使用 &lt;code>std::call_once&lt;/code> 和 &lt;code>std::once_flag&lt;/code>
&lt;/h3>&lt;p>C++11引入了&lt;code>std::call_once&lt;/code>，它用于确保在多线程环境下对某个函数的调用是单次的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">once_flag&lt;/span> &lt;span class="n">onceFlag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">call_once&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onceFlag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[](){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 确保析构函数是公共的，以便能够销毁单例对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">once_flag&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">onceFlag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="54-使用智能指针">5.4. 使用智能指针
&lt;/h3>&lt;p>使用&lt;code>std::shared_ptr&lt;/code>来管理单例实例，可以自动处理内存释放。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 私有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝构造函数和赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他成员函数和数据成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="55-注意事项">5.5. 注意事项
&lt;/h3>&lt;ul>
&lt;li>选择实现单例模式的方法时，需要考虑线程安全性、性能、资源管理等因素。&lt;/li>
&lt;li>确保单例的析构函数是公共的，以便能够销毁单例对象。&lt;/li>
&lt;li>智能指针方法虽然可以自动管理内存，但在某些情况下可能会引起循环引用或其他问题，需要谨慎使用。&lt;/li>
&lt;/ul>
&lt;p>这些方法各有优缺点，可以根据项目的具体需求和约束来选择最合适的实现方式。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern State Pattern</title><link>https://wesigj.github.io/p/design-pattern-state-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-state-pattern/</guid><description>&lt;h1 id="设计模式-状态模式-state-pattern">设计模式-状态模式-State Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>状态模式（State Pattern）是一种行为型设计模式&lt;/li>
&lt;li>它允许一个对象在其内部状态改变时改变它的行为，看起来好像修改了它的类&lt;/li>
&lt;li>这种模式通过将状态相关的行为封装在独立的类中，并在运行时根据状态对象来切换这些行为，从而使得对象能够在内部状态变化时合理地更改其行为&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1状态模式state-pattern">1.状态模式（State Pattern）
&lt;/h2>&lt;p>状态模式（State Pattern）是一种行为型设计模式，它允许一个对象在其内部状态改变时改变它的行为，看起来好像修改了它的类。这种模式通过将状态相关的行为封装在独立的类中，并在运行时根据状态对象来切换这些行为，从而使得对象能够在内部状态变化时合理地更改其行为。&lt;/p>
&lt;p>状态模式的主要角色包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Context（上下文）&lt;/strong>：维护一个指向当前状态对象的引用，这个引用定义了当前状态对象应该执行哪些操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>State（状态接口）&lt;/strong>：定义一个接口，以封装与Context的一个特定状态相关的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Concrete State（具体状态）&lt;/strong>：实现State接口，定义与一个特定状态相关的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Client（客户端）&lt;/strong>：创建Context对象，并根据需要改变其状态。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>状态模式的实现通常涉及以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>定义状态接口，声明在不同状态下需要执行的操作。&lt;/li>
&lt;li>实现具体状态类，这些类实现状态接口，并定义每个状态下的行为。&lt;/li>
&lt;li>创建上下文类，持有状态接口的引用，并提供方法来改变其状态。&lt;/li>
&lt;li>客户端代码根据需要改变上下文的状态。&lt;/li>
&lt;/ol>
&lt;p>以下是一个简单的C++实现示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 状态接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">State&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">insertQuarter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">ejectQuarter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">turnCrank&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dispense&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">State&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体状态A
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteStateA&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">State&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">insertQuarter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;State A: Inserted a quarter.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">ejectQuarter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;State A: Ejected a quarter.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">turnCrank&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;State A: Turned crank.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dispense&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;State A: Dispensed.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体状态B
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteStateB&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">State&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">insertQuarter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;State B: Inserted a quarter.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">ejectQuarter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;State B: Ejected a quarter.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">turnCrank&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;State B: Turned crank.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dispense&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;State B: Dispensed.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 上下文
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">GumballMachine&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">State&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">GumballMachine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">State&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">State&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">insertQuarter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">insertQuarter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">ejectQuarter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ejectQuarter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">turnCrank&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">turnCrank&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dispense&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">dispense&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">State&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">stateA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteStateA&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">GumballMachine&lt;/span> &lt;span class="n">gumballMachine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateA&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gumballMachine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insertQuarter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gumballMachine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">turnCrank&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gumballMachine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ejectQuarter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">State&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">stateB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteStateB&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gumballMachine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateB&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gumballMachine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insertQuarter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gumballMachine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">turnCrank&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gumballMachine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dispense&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">stateA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">stateB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>GumballMachine&lt;/code> 是上下文，它持有一个指向 &lt;code>State&lt;/code> 接口的指针。&lt;code>ConcreteStateA&lt;/code> 和 &lt;code>ConcreteStateB&lt;/code> 是具体的状态类，它们实现了 &lt;code>State&lt;/code> 接口中定义的操作。在 &lt;code>main&lt;/code> 函数中，我们创建了一个 &lt;code>GumballMachine&lt;/code> 实例，并在不同状态下切换，展示了状态模式的使用。&lt;/p>
&lt;p>状态模式的优点包括局部化了状态相关的操作，将状态转换逻辑封装在状态对象内部，以及可以在运行时切换对象的行为。缺点是可能增加系统中对象的数量，每个状态都需要一个具体的状态类。&lt;/p>
&lt;h2 id="2状态模式优缺点">2.状态模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>单一职责原则。 将与特定状态相关的代码放在单独的类中。&lt;/li>
&lt;li>开闭原则。 无需修改已有状态类和上下文就能引入新状态。&lt;/li>
&lt;li>通过消除臃肿的状态机条件语句简化上下文代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>如果状态机只有很少的几个状态， 或者很少发生改变， 那么应用该模式可能会显得小题大作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>状态模式（State Pattern）的优缺点如下：&lt;/p>
&lt;h3 id="21优点">2.1.优点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>局部化状态行为&lt;/strong>：将与特定状态相关的行为封装在单独的状态类中，使得状态相关的代码更加模块化和易于管理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>消除庞大的条件分支语句&lt;/strong>：在没有使用状态模式的情况下，对象的状态管理可能需要大量的条件分支语句，状态模式可以将这些条件分支分散到不同的状态类中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>易于扩展&lt;/strong>：新增状态时，只需添加一个新的具体状态类，而无需修改其他代码，符合开闭原则。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>清晰的逻辑&lt;/strong>：状态模式使得状态转换逻辑更加清晰，每个状态类都明确定义了何时以及如何转换到其他状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高可维护性&lt;/strong>：状态模式将对象的状态封装在单独的类中，使得状态的管理和对象的其他行为分离，提高了代码的可维护性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>促进职责单一&lt;/strong>：每个状态类只关注与自身状态相关的行为，符合单一职责原则。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22缺点">2.2.缺点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>过多的状态类&lt;/strong>：如果系统中状态很多，可能会导致大量的具体状态类，增加系统的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>增加系统开销&lt;/strong>：每个状态都是一个对象，可能会增加内存开销，尤其是在状态对象数量较多的情况下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态管理复杂&lt;/strong>：在某些情况下，状态转换逻辑可能非常复杂，需要仔细设计以确保状态转换的正确性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可能引入循环依赖&lt;/strong>：在一些设计中，状态对象之间可能存在相互引用，这可能导致循环依赖问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态切换可能导致错误&lt;/strong>：如果状态转换逻辑不明确或者错误，可能会导致系统行为异常。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态切换的可见性&lt;/strong>：在某些设计中，状态切换可能对外部不可见，这可能会使得调试和测试变得更加困难。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在使用状态模式时，应该根据具体的应用场景和需求来决定是否采用这种模式。在设计时，应该考虑到状态模式可能带来的复杂性，并确保状态转换逻辑的正确性和清晰性。&lt;/p>
&lt;h2 id="3状态模式在实际开发中有哪些常见的应用场景">3.状态模式在实际开发中有哪些常见的应用场景？
&lt;/h2>&lt;p>状态模式在实际开发中广泛应用于需要根据对象状态改变行为的场景。以下是一些典型的应用场景：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>工作流管理&lt;/strong>：在工作流管理系统中，每个任务可能有不同的状态，如待审批、审批中、已批准、已拒绝等。状态模式可以用来封装每个状态下的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>订单处理系统&lt;/strong>：在电子商务平台中，订单可以有多种状态，如未支付、已支付、正在发货、已发货、交易完成、交易取消等。状态模式可以管理这些状态的转换以及每个状态下允许的操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏状态管理&lt;/strong>：在游戏中，玩家或游戏本身可能有不同的状态，如游戏开始、游戏暂停、游戏结束等。状态模式可以用来控制游戏在不同状态下的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>权限控制&lt;/strong>：在权限控制系统中，用户可能有不同的权限状态，如普通用户、审核中、管理员等。状态模式可以用来封装与不同权限相关的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设备状态控制&lt;/strong>：在嵌入式系统或硬件控制软件中，设备可能有多种状态，如待机、工作、错误、维护等。状态模式可以用来管理设备在不同状态下的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用户界面状态&lt;/strong>：在图形用户界面（GUI）中，组件如按钮、菜单项等可能有不同的状态，如可用、禁用、选中等。状态模式可以用来处理不同状态下的事件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>协议状态机&lt;/strong>：在网络通信协议中，连接可能有不同的状态，如连接建立、数据传输、连接关闭等。状态模式可以用来管理这些状态的转换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态验证&lt;/strong>：在需要根据对象状态进行验证的系统中，如表单填写，每个字段可能有多种状态，如已填写、未填写、验证通过、验证失败等。状态模式可以用来封装状态验证逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定时任务调度&lt;/strong>：在任务调度系统中，任务可能有计划中、执行中、已完成、已跳过等状态。状态模式可以用来管理任务在不同状态下的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>产品生命周期管理&lt;/strong>：在产品生命周期管理中，产品可能经历设计、生产、销售、维护、淘汰等状态。状态模式可以用来封装每个状态下的行为。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>状态模式的优点在于它将状态相关的行为封装在具体的状态类中，使得状态转换逻辑清晰，并且可以在运行时动态地改变对象的行为。然而，它也可能导致系统中状态类的数量增多，因此在设计时需要权衡其优缺点。&lt;/p>
&lt;h2 id="4在设计状态模式时有哪些常见的问题和挑战">4.在设计状态模式时，有哪些常见的问题和挑战？
&lt;/h2>&lt;p>在设计状态模式时，可能会遇到以下常见问题和挑战：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>状态类爆炸&lt;/strong>：如果系统中存在很多状态，可能会导致大量的具体状态类，这会增加系统的复杂性和维护成本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态转换逻辑复杂&lt;/strong>：状态模式要求将状态转换逻辑封装在上下文（Context）中，当状态转换逻辑非常复杂时，管理这些转换可能会变得困难。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态一致性&lt;/strong>：确保在状态转换过程中，上下文的状态始终保持一致是一个挑战，特别是在多线程环境中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态管理&lt;/strong>：随着系统的发展，状态的增加和删除需要仔细管理，以避免状态管理的混乱。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态的入口&lt;/strong>：在某些情况下，确定状态的初始状态并正确初始化上下文可能是一个挑战。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态恢复&lt;/strong>：在某些应用中，可能需要支持状态的撤销和恢复，这需要额外的设计和实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态依赖&lt;/strong>：有些状态的行为可能依赖于其他状态的信息，这可能导致状态类之间的耦合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态模式与观察者模式的结合&lt;/strong>：在需要状态变化通知其他对象时，如何有效地结合状态模式和观察者模式是一个设计挑战。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态的持久化&lt;/strong>：在某些系统中，可能需要将状态持久化到数据库或文件中，这需要在状态模式中考虑持久化和恢复的逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态的线程安全&lt;/strong>：在多线程环境中，确保状态的线程安全是一个挑战，需要考虑同步和并发访问的问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态的可预测性&lt;/strong>：在复杂的系统中，状态转换可能不是线性的，设计时需要确保状态转换的可预测性和正确性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态模式的过度使用&lt;/strong>：在一些简单的场景中，过度使用状态模式可能会导致不必要的复杂性。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>为了解决这些问题和挑战，设计时需要仔细考虑系统的规模、状态的数量、状态转换的复杂性以及系统的可维护性。同时，应该遵循设计原则，如单一职责原则、开闭原则和迪米特法则，来确保系统的灵活性和可扩展性。在实现时，可以考虑使用设计模式的组合，如结合策略模式、命令模式或观察者模式，来解决特定的设计问题。&lt;/p>
&lt;h2 id="5状态模式在多线程环境中如何保证状态的一致性和线程安全">5.状态模式在多线程环境中如何保证状态的一致性和线程安全？
&lt;/h2>&lt;p>在多线程环境中，确保状态模式的一致性和线程安全，可以采取以下措施：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>使用互斥锁（Mutex）&lt;/strong>：在状态转换方法中使用互斥锁来保护状态的一致性，确保同一时间只有一个线程可以改变状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>条件变量（Condition Variable）&lt;/strong>：在状态模式中，条件变量可以用来协调线程间的工作，当状态发生改变时，通知等待的线程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免死锁&lt;/strong>：在设计状态模式时，要注意避免死锁的发生。确保获取锁的顺序一致，或者使用定时锁（尝试锁），以防止线程永久阻塞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>最小化锁的粒度&lt;/strong>：尽量减小锁的范围和持有时间，例如使用&lt;code>std::lock_guard&lt;/code>和&lt;code>std::unique_lock&lt;/code>来自动管理锁的生命周期。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用不可变对象&lt;/strong>：如果状态对象是不可变的，那么它们自然是线程安全的，因为它们的状态在创建后不会改变。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程局部存储（Thread-Local Storage）&lt;/strong>：使用线程局部存储来保存每个线程的状态，这样可以避免线程间的共享和竞争。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用原子操作&lt;/strong>：对于简单的状态更新，可以使用原子操作来确保操作的原子性，而不需要使用重量级的锁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>状态模式与观察者模式结合&lt;/strong>：当状态改变时，使用观察者模式通知所有依赖于状态的对象，确保它们能够及时响应状态的变化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免在持有锁时进行长时间操作&lt;/strong>：持有锁时不要执行耗时的计算或者调用外部资源，这样可以减少锁的等待时间，提高系统的并发性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用读写锁（Read-Write Lock）&lt;/strong>：如果状态读操作远多于写操作，可以使用读写锁来允许多个线程同时读取状态，但在写入时需要独占访问。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述措施，可以在多线程环境中有效地使用状态模式，同时确保状态的一致性和线程安全。在实际应用中，应根据具体的并发需求和性能目标来选择合适的同步策略。&lt;/p>
&lt;h2 id="6状态模式在实际项目中如何与观察者模式结合使用">6.状态模式在实际项目中如何与观察者模式结合使用？
&lt;/h2>&lt;p>在实际项目中，状态模式和观察者模式可以结合使用来构建更加灵活和响应式的系统。以下是它们结合使用的一些常见应用场景和方法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>工作流状态更新&lt;/strong>：在一个工作流管理系统中，每个任务都有不同的状态，如“待审批”、“审批中”、“已完成”等。状态模式可以用来封装每个状态下的行为。同时，当任务状态发生变化时，系统可能需要通知其他部分，比如通知任务的处理者或更新相关的监控仪表板。这时，观察者模式可以用来实现状态变化的通知机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用户界面与数据模型同步&lt;/strong>：在模型-视图-控制器（MVC）架构中，数据模型（Model）的变化需要实时反映到视图（View）上。状态模式可以用来管理数据模型的不同状态，而观察者模式则确保当数据模型的状态发生变化时，所有依赖的视图都能得到更新。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏状态管理&lt;/strong>：在游戏开发中，游戏可能有不同的游戏状态，如“菜单”、“游戏进行中”、“暂停”、“游戏结束”等。状态模式可以用来定义这些状态和它们之间的转换。观察者模式则可以用来通知游戏中的其他系统或组件，如声音系统、得分系统等，关于游戏状态的变化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>订单处理系统&lt;/strong>：在电子商务平台中，订单对象会经历多个状态，如“新建”、“支付”、“发货”、“完成”等。状态模式可以用来封装订单的每个状态相关的行为。当订单状态发生变化时，可能需要通知物流系统、库存系统或客户服务系统，观察者模式可以用来实现这种通知。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设备状态监控&lt;/strong>：在嵌入式系统或物联网（IoT）设备中，设备可能有多种状态，如“待机”、“工作”、“错误”、“维护”等。状态模式可以用来管理设备的状态和行为。观察者模式则可以用来实现设备状态变化的监控和报警系统。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>结合使用状态模式和观察者模式时，关键在于设计一个清晰的状态转换逻辑，并确保状态变化能够及时通知到所有相关的观察者。这种结合使用可以提高系统的模块化和可维护性，同时也使得状态变化的管理更加集中和一致。&lt;/p>
&lt;h2 id="7在设计状态模式和观察者模式的结合时有哪些常见的设计模式或原则可以参考">7.在设计状态模式和观察者模式的结合时，有哪些常见的设计模式或原则可以参考？
&lt;/h2>&lt;p>在设计状态模式和观察者模式的结合时，可以参考以下设计原则和模式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>单一职责原则&lt;/strong>：确保每个类和模块只负责一个功能，这样当状态改变时，相关的类可以独立地变化而不影响其他模块。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>开闭原则&lt;/strong>：设计时应当使系统易于扩展新的状态或观察者，而不需要修改已有的代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>依赖倒置原则&lt;/strong>：高层模块不应依赖于低层模块，两者都应该依赖于抽象。在状态模式和观察者模式的结合中，可以通过接口或抽象类来实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迪米特法则&lt;/strong>：减少对象之间的直接交互，通过中介者来传递消息，这有助于降低系统的耦合度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>命令模式&lt;/strong>：在状态模式中，可以结合命令模式来封装具体的行为，使得状态转换更加灵活。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中介者模式&lt;/strong>：当系统中的组件交互复杂时，可以使用中介者模式来简化组件之间的通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略模式&lt;/strong>：在状态模式中，可以使用策略模式来定义一系列算法（行为），并在运行时选择使用哪一个算法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板方法模式&lt;/strong>：在观察者模式中，可以使用模板方法模式来定义一个算法的框架，允许子类在不改变算法结构的情况下重写算法的某些步骤。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组合模式&lt;/strong>：当观察者或状态对象需要形成树形结构时，可以使用组合模式来表示部分-整体层次结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迭代器模式&lt;/strong>：在观察者模式中，如果需要遍历所有观察者，可以使用迭代器模式来提供一个顺序访问的接口。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在实际应用中，可以根据具体的需求和上下文来选择适合的设计原则和模式。例如，如果状态转换逻辑复杂，可以考虑使用策略模式来简化；如果需要在状态变化时通知多个观察者，可以结合使用观察者模式。通过这些设计原则和模式的结合使用，可以构建出灵活、可扩展且易于维护的系统。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Strategy Pattern</title><link>https://wesigj.github.io/p/design-pattern-strategy-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-strategy-pattern/</guid><description>&lt;h1 id="设计模式-策略模式-strategy-pattern">设计模式-策略模式-Strategy Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>策略模式（Strategy Pattern）是一种行为型设计模式&lt;/li>
&lt;li>它定义了一系列的算法，并将每一个算法封装起来，使它们可以互换使用，算法的变化不会影响使用算法的用户&lt;/li>
&lt;li>策略模式让算法独立于使用它的客户端而变化。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1策略模式strategy-pattern">1.策略模式（Strategy Pattern）
&lt;/h2>&lt;p>策略模式（Strategy Pattern）是一种行为型设计模式，它定义了一系列的算法，并将每一个算法封装起来，使它们可以互换使用，算法的变化不会影响使用算法的用户。策略模式让算法独立于使用它的客户端而变化。&lt;/p>
&lt;p>在C++中实现策略模式通常涉及以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>定义策略接口&lt;/strong>：这个接口定义了所有支持的算法必须遵循的方法。&lt;/li>
&lt;li>&lt;strong>实现具体策略&lt;/strong>：为每一个算法创建一个类，实现策略接口。&lt;/li>
&lt;li>&lt;strong>创建上下文&lt;/strong>：上下文持有策略接口的引用，通过这个引用调用算法的方法。&lt;/li>
&lt;/ol>
&lt;p>以下是一个简单的C++实现示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 策略接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Strategy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Strategy&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体策略A
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteStrategyA&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Strategy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体策略B
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteStrategyB&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Strategy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 上下文
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Context&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Strategy&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">strategy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">setStrategy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Strategy&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">strategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">executeStrategy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">strategy&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">strategy&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Context&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用策略A
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Strategy&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">strategyA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteStrategyA&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setStrategy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strategyA&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Strategy A (10): &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">executeStrategy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 更换策略为B
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Strategy&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">strategyB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteStrategyB&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setStrategy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strategyB&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Strategy B (10): &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">executeStrategy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>Strategy&lt;/code> 是策略接口，它定义了一个 &lt;code>execute&lt;/code> 方法。&lt;code>ConcreteStrategyA&lt;/code> 和 &lt;code>ConcreteStrategyB&lt;/code> 是具体策略类，它们实现了 &lt;code>Strategy&lt;/code> 接口，并提供了不同的算法实现。&lt;/p>
&lt;p>&lt;code>Context&lt;/code> 是上下文类，它持有一个 &lt;code>Strategy&lt;/code> 接口的指针，并使用它来执行算法。在 &lt;code>main&lt;/code> 函数中，我们创建了一个 &lt;code>Context&lt;/code> 对象，并分别设置了 &lt;code>ConcreteStrategyA&lt;/code> 和 &lt;code>ConcreteStrategyB&lt;/code> 策略，然后执行了算法。&lt;/p>
&lt;p>策略模式的优点包括算法的封装和切换的灵活性，以及算法可独立于使用它的客户端变化。缺点可能包括策略类的数量增多，以及需要维护这些策略类。在设计时，应该根据实际需求来决定是否使用策略模式。&lt;/p>
&lt;h2 id="2策略模式优缺点">2.策略模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>你可以在运行时切换对象内的算法。&lt;/li>
&lt;li>你可以将算法的实现和使用算法的代码隔离开来。&lt;/li>
&lt;li>你可以使用组合来代替继承。&lt;/li>
&lt;li>开闭原则。 你无需对上下文进行修改就能够引入新的策略。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>如果你的算法极少发生改变， 那么没有任何理由引入新的类和接口。 使用该模式只会让程序过于复杂。&lt;/li>
&lt;li>客户端必须知晓策略间的不同——它需要选择合适的策略。&lt;/li>
&lt;li>许多现代编程语言支持函数类型功能， 允许你在一组匿名函数中实现不同版本的算法。 这样， 你使用这些函数的方式就和使用策略对象时完全相同， 无需借助额外的类和接口来保持代码简洁。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>策略模式（Strategy Pattern）的优缺点如下：&lt;/p>
&lt;h3 id="21优点">2.1.优点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>算法的封装&lt;/strong>：策略模式将算法封装在独立的策略类中，使得算法可以独立于使用它的客户端而变化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>易于扩展&lt;/strong>：新的策略可以很容易地添加到系统中，而不需要修改现有的代码，符合开闭原则。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>消除条件语句&lt;/strong>：策略模式可以消除复杂的条件分支语句，使得代码更加简洁和易于维护。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>算法的互换性&lt;/strong>：策略模式允许在运行时切换不同的算法，使得算法可以像对象一样被创建和销毁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高代码的可读性&lt;/strong>：通过将算法封装在独立的类中，策略模式使得代码结构更加清晰，易于理解。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>算法的重用&lt;/strong>：策略模式使得算法可以在不同的上下文中重用，提高了代码的复用性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>灵活性&lt;/strong>：策略模式提供了高度的灵活性，允许在不同的时间点选择不同的策略。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22缺点">2.2.缺点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>客户端必须了解策略&lt;/strong>：客户端需要了解所有可用的策略，以便能够做出正确的选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略类的数量增多&lt;/strong>：如果系统中有大量的策略，可能会导致策略类的数目迅速增长，增加系统的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可能增加内存开销&lt;/strong>：策略模式可能会增加内存的使用，因为每个策略都是一个对象，需要为其分配内存。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可能引入复杂性&lt;/strong>：在某些简单的情况下，策略模式可能会引入不必要的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可能违反里氏替换原则&lt;/strong>：如果策略类的实现不完全遵循基类或接口的约定，可能会导致里氏替换原则被违反。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可能影响性能&lt;/strong>：策略模式可能会影响性能，因为每次切换策略都需要创建新的策略对象，这可能会增加内存分配和对象创建的开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略模式与简单工厂模式的混淆&lt;/strong>：在某些情况下，策略模式可能会与简单工厂模式混淆，导致设计上的混淆。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在使用策略模式时，应该根据具体的应用场景和需求来决定是否采用这种模式。在设计时，应该考虑到策略模式可能带来的复杂性，并确保策略的切换逻辑清晰且易于管理。&lt;/p>
&lt;h2 id="3策略模式在实际开发中有哪些常见的应用场景">3.策略模式在实际开发中有哪些常见的应用场景？
&lt;/h2>&lt;p>策略模式（Strategy Pattern）是一种行为设计模式，它定义了一系列的算法，并将每一个算法封装起来，使它们可以互换使用。策略模式让算法的变化独立于使用算法的客户。在软件开发中，策略模式有多种应用场景，以下是一些常见的例子：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>支付方式选择&lt;/strong>：在电子商务平台中，用户可以选择不同的支付方式，如信用卡、PayPal、微信支付等。每种支付方式都是一个策略，可以根据用户的选择动态切换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>排序算法&lt;/strong>：在需要排序数据时，可能会有多种排序算法，如快速排序、归并排序、冒泡排序等。策略模式允许用户根据需要选择最合适的排序算法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图形渲染&lt;/strong>：在图形处理软件中，不同的图形对象可能需要不同的渲染策略，例如，2D图形和3D图形的渲染方式不同。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据访问&lt;/strong>：在多层架构中，数据访问层可能会使用不同的数据源或访问技术（如数据库、文件系统、远程服务等），策略模式可以用来封装这些不同的访问方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缓存策略&lt;/strong>：在需要缓存数据的系统中，可能会有多种缓存策略，如LRU（最近最少使用）、FIFO（先进先出）等，策略模式可以用来实现这些不同的缓存策略。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>日志记录&lt;/strong>：在应用程序中，可能会有多种日志记录方式，如控制台日志、文件日志、数据库日志等。策略模式可以用来根据不同的需要选择不同的日志记录方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用户权限验证&lt;/strong>：在需要权限控制的系统中，可能会有多种权限验证策略，如基于角色的访问控制（RBAC）、基于属性的访问控制（ABAC）等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>算法动态切换&lt;/strong>：在需要根据不同条件动态切换算法的场景中，策略模式可以提供灵活的算法切换机制，例如，根据输入数据的特性选择不同的算法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏AI行为&lt;/strong>：在游戏开发中，不同的角色可能会有不同的行为策略，如攻击、防御、逃跑等，策略模式可以用来实现这些不同的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置文件解析&lt;/strong>：在需要解析不同格式配置文件的系统中，如XML、JSON、YAML等，策略模式可以用来封装不同的解析算法。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>策略模式的关键在于它提供了一种方式，使得算法可以在运行时被选择和更换，而不需要修改使用算法的代码。这增加了代码的灵活性和可维护性。&lt;/p>
&lt;h2 id="4在c中如何优化策略模式以提高性能">4.在C++中，如何优化策略模式以提高性能？
&lt;/h2>&lt;p>在C++中优化策略模式以提高性能，可以考虑以下几个方面：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>减少动态内存分配&lt;/strong>：频繁的内存分配和释放会影响性能。可以通过使用对象池（Object Pool）来重用对象，减少动态内存分配的次数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>利用移动语义&lt;/strong>：C++11引入了移动语义，它允许资源从一个对象转移到另一个对象，而不需要复制。这可以减少不必要的拷贝操作，提高性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>返回值优化（RVO）&lt;/strong>：编译器可以优化函数返回局部对象时的拷贝操作。确保你的代码能够利用编译器的这种优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用引用传递&lt;/strong>：对于大型对象或频繁传递的对象，使用引用传递而不是值传递，可以避免拷贝操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免不必要的虚函数调用&lt;/strong>：虚函数调用有一定的开销。如果策略模式中的算法可以是确定的，考虑使用非虚函数或静态多态性（如函数指针或std::function）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>选择适当的数据结构&lt;/strong>：使用高效的数据结构可以减少算法的复杂度。例如，使用&lt;code>std::vector&lt;/code>而不是&lt;code>std::list&lt;/code>，因为&lt;code>std::vector&lt;/code>在随机访问时更高效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>预先分配内存&lt;/strong>：如果你知道将要使用的资源大小，预先分配足够的内存可以避免在运行时多次分配和释放。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少虚函数表查找&lt;/strong>：虚函数表（v-table）查找会增加额外的开销。在策略模式中，如果可能，使用接口继承来减少虚函数的数量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用constexpr和编译期计算&lt;/strong>：对于不会改变的策略参数，使用&lt;code>constexpr&lt;/code>可以在编译期进行计算，减少运行时的计算负担。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码剖析&lt;/strong>：使用剖析工具（如gprof）来确定性能瓶颈，并针对这些瓶颈进行优化。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这些策略，你可以在保持策略模式灵活性的同时，提高程序的性能。记住，优化应该基于实际的性能数据，而不是盲目地进行。在进行优化之前，最好先进行性能剖析，找出真正的瓶颈所在。&lt;/p>
&lt;h2 id="5在实际开发中如何判断一个场景是否适合使用策略模式">5.在实际开发中，如何判断一个场景是否适合使用策略模式？
&lt;/h2>&lt;p>在实际开发中，判断一个场景是否适合使用策略模式，可以依据以下几个关键点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>算法的多样性&lt;/strong>：如果系统中存在多种算法或行为，并且这些算法在功能上相似，但实现方式不同，策略模式可能是一个合适的选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>算法的可替换性&lt;/strong>：如果算法可能会在运行时根据条件变化，或者用户需要能够选择不同的算法，策略模式提供了一种灵活的方式来切换算法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>算法的独立性&lt;/strong>：如果算法的实现细节对于客户端来说是透明的，或者客户端不需要知道算法的具体实现，策略模式可以帮助封装算法的细节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>算法的复杂性&lt;/strong>：如果算法的实现非常复杂，或者算法可能会随着时间而变化，策略模式可以帮助管理这种复杂性，使得算法的变化不会影响到使用算法的代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端的多样性&lt;/strong>：如果不同的客户端需要不同的算法，或者客户端需要能够根据需要选择不同的算法，策略模式可以提供这种灵活性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>扩展性&lt;/strong>：如果预计未来可能会添加更多的算法，策略模式可以使得添加新算法变得更加容易，而不需要修改现有的代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码的可维护性&lt;/strong>：如果算法的实现分散在多个地方，或者算法的实现与使用算法的代码紧密耦合，策略模式可以帮助提高代码的可维护性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>性能考虑&lt;/strong>：如果算法的性能是一个关键因素，策略模式可以帮助选择最合适的算法，或者在不同的算法之间进行权衡。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置的灵活性&lt;/strong>：如果算法的选择需要通过配置文件或用户输入来决定，策略模式可以使得这种配置变得更加灵活。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>解耦合&lt;/strong>：如果希望算法的实现与使用算法的代码解耦，策略模式可以帮助实现这一点。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在考虑使用策略模式时，还可以问自己以下问题：&lt;/p>
&lt;ul>
&lt;li>是否有多种算法可以解决同一问题？&lt;/li>
&lt;li>是否需要在运行时选择或切换算法？&lt;/li>
&lt;li>是否希望算法的实现对客户端透明？&lt;/li>
&lt;li>是否希望算法的添加、修改或删除对现有代码的影响最小？&lt;/li>
&lt;/ul>
&lt;p>如果对这些问题的回答大多数是肯定的，那么策略模式可能是一个合适的选择。&lt;/p>
&lt;h2 id="6策略模式在设计时有哪些常见的错误或者陷阱需要避免">6.策略模式在设计时有哪些常见的错误或者陷阱需要避免？
&lt;/h2>&lt;p>在设计策略模式时，确实存在一些常见的错误或陷阱，以下是一些需要避免的情况：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>过度使用&lt;/strong>：策略模式并不是解决所有问题的万能钥匙。如果只有一种算法或者算法的选择不经常变化，使用策略模式可能会导致不必要的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略类与上下文类耦合&lt;/strong>：策略模式的目的是将算法的实现与使用算法的代码解耦。如果策略类与上下文类（Context）耦合得太紧密，就会失去策略模式的优势。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略接口设计不当&lt;/strong>：策略接口应该定义清晰且一致的方法，以便不同的策略可以互换。如果接口设计得过于复杂或不一致，可能会导致策略难以实现或替换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略类太多&lt;/strong>：如果为每种可能的情况都创建一个策略类，可能会导致类的数量过多，增加维护成本。应该考虑是否有一些策略可以合并或者是否有一些策略可以通过参数配置来实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略选择逻辑复杂&lt;/strong>：策略的选择逻辑应该简单明了。如果策略选择逻辑过于复杂，可能会使得代码难以理解和维护。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>忽视策略的初始化&lt;/strong>：策略对象可能需要一些初始化数据才能正确工作。如果忽视了这一点，可能会导致策略对象在运行时出现错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>忽视策略的销毁&lt;/strong>：如果策略对象持有资源（如数据库连接、文件句柄等），则需要确保这些资源在策略对象不再使用时被正确释放。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略类的性能问题&lt;/strong>：策略类的性能可能会影响整个系统的性能。在设计策略时，应该考虑策略的性能，并在必要时进行优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略类的状态管理&lt;/strong>：如果策略类持有状态，需要确保状态在策略切换时被正确处理。否则，可能会导致不一致的状态或错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略类的错误处理&lt;/strong>：策略类应该能够处理错误，并在出现错误时提供清晰的反馈。如果忽视了错误处理，可能会导致系统在运行时出现不可预测的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略类的线程安全性&lt;/strong>：如果策略对象在多线程环境中使用，需要确保策略对象是线程安全的，或者提供适当的同步机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>忽视策略的可测试性&lt;/strong>：策略模式应该使得策略类易于测试。如果策略类难以测试，可能会影响代码的质量和可维护性。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在设计策略模式时，应该仔细考虑这些潜在的问题，并采取适当的措施来避免它们。通过合理的设计和实现，策略模式可以提高代码的灵活性、可维护性和可扩展性。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Template Method Pattern</title><link>https://wesigj.github.io/p/design-pattern-template-method-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-template-method-pattern/</guid><description>&lt;h1 id="设计模式-模板方法模式-template-method-pattern">设计模式-模板方法模式-Template Method Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>模板方法模式（Template Method Pattern）是一种行为设计模式&lt;/li>
&lt;li>它在父类中定义了一个算法的框架，允许子类在不改变算法结构的情况下重写算法的某些步骤&lt;/li>
&lt;li>这种模式是通过在抽象类中定义一个模板方法来实现的，这个模板方法调用多个其他的方法，这些方法可以是抽象的，可以在子类中得到进一步实现&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1模板方法模式template-method-pattern">1.模板方法模式（Template Method Pattern）
&lt;/h2>&lt;p>模板方法模式（Template Method Pattern）是一种行为设计模式，它在父类中定义了一个算法的框架，允许子类在不改变算法结构的情况下重写算法的某些步骤。这种模式是通过在抽象类中定义一个模板方法来实现的，这个模板方法调用多个其他的方法，这些方法可以是抽象的，可以在子类中得到进一步实现。&lt;/p>
&lt;h3 id="11特点">1.1.特点
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>算法框架&lt;/strong>：在抽象类中定义算法的步骤。&lt;/li>
&lt;li>&lt;strong>扩展性&lt;/strong>：子类可以重写算法的某些步骤，而不需要改变算法的结构。&lt;/li>
&lt;li>&lt;strong>代码复用&lt;/strong>：通过模板方法，可以在不同的子类中复用算法框架。&lt;/li>
&lt;/ol>
&lt;h3 id="12结构">1.2.结构
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>AbstractClass&lt;/strong>：定义模板方法和算法框架。&lt;/li>
&lt;li>&lt;strong>ConcreteClass&lt;/strong>：实现在抽象类中定义的抽象方法。&lt;/li>
&lt;/ul>
&lt;h3 id="13示例代码">1.3.示例代码
&lt;/h3>&lt;p>在C++中实现模板方法模式，我们通常结合模板类和虚函数来创建一个通用的算法框架，同时允许子类根据需要重写某些步骤。下面是一个使用模板类实现模板方法模式的示例：&lt;/p>
&lt;h4 id="131定义模板基类">1.3.1.定义模板基类
&lt;/h4>&lt;p>首先，我们定义一个模板基类，其中包含模板方法和一些虚函数，这些虚函数将在派生类中被重写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 模板基类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Algorithm&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模板方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">step1&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">step2&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">step3&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 抽象步骤，子类必须实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">step1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">step2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">step3&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="132实现具体步骤">1.3.2.实现具体步骤
&lt;/h4>&lt;p>接下来，我们创建一个派生类，实现基类中定义的抽象步骤。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体算法类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteAlgorithm&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Algorithm&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">step1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ConcreteAlgorithm: Step 1&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">step2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ConcreteAlgorithm: Step 2&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">step3&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ConcreteAlgorithm: Step 3&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="133客户端代码">1.3.3.客户端代码
&lt;/h4>&lt;p>最后，我们编写客户端代码来使用这些类。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteAlgorithm&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">algorithm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">algorithm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 执行算法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="134编译和运行">1.3.4.编译和运行
&lt;/h4>&lt;p>将上述代码保存到一个&lt;code>.cpp&lt;/code>文件中，然后使用C++编译器编译并运行。例如，如果你使用g++，可以使用以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">g++ -o algorithm algorithm.cpp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./algorithm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="135输出">1.3.5.输出
&lt;/h4>&lt;p>运行程序后，你将看到以下输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ConcreteAlgorithm: Step &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ConcreteAlgorithm: Step &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ConcreteAlgorithm: Step &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个示例展示了如何在C++中使用模板类来实现模板方法模式。这种模式允许你在不改变算法结构的情况下，通过子类重写算法的某些步骤来实现多态性。这种模式在实际开发中非常有用，特别是在需要实现多种相似算法或行为时。&lt;/p>
&lt;h3 id="14应用场景">1.4.应用场景
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>多个子类有共同的方法&lt;/strong>：这些方法的实现步骤相同，但具体实现不同。&lt;/li>
&lt;li>&lt;strong>需要控制扩展&lt;/strong>：当算法的结构不应改变，但需要在不同的子类中有不同的行为时。&lt;/li>
&lt;/ol>
&lt;h3 id="15优点">1.5.优点
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>代码复用&lt;/strong>：减少代码重复。&lt;/li>
&lt;li>&lt;strong>扩展性&lt;/strong>：子类可以扩展算法的某些步骤。&lt;/li>
&lt;li>&lt;strong>控制反转&lt;/strong>：算法的控制权在父类，实现在子类。&lt;/li>
&lt;/ul>
&lt;h3 id="16缺点">1.6.缺点
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>有时可导致设计更加复杂&lt;/strong>：如果算法的步骤很多，可能会导致设计变得复杂。&lt;/li>
&lt;/ul>
&lt;p>模板方法模式是一个很好的工具，用于在保持算法结构不变的情况下，允许子类有选择地实现算法的某些步骤。&lt;/p>
&lt;h2 id="2模板方法模式优缺点">2.模板方法模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>你可仅允许客户端重写一个大型算法中的特定部分， 使得算法其他部分修改对其所造成的影响减小。&lt;/li>
&lt;li>你可将重复代码提取到一个超类中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>部分客户端可能会受到算法框架的限制。&lt;/li>
&lt;li>通过子类抑制默认步骤实现可能会导致违反里氏替换原则。&lt;/li>
&lt;li>模板方法中的步骤越多， 其维护工作就可能会越困难。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3模板方法模式-应用场景">3.模板方法模式 应用场景
&lt;/h2>&lt;p>模板方法模式在C++中的使用场景通常涉及到需要在子类中实现算法的某些步骤，同时保持算法的总体结构不变。以下是一些典型的应用场景：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>算法框架&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当你需要在不同的子类中实现相似的算法时，你可以在基类中定义算法的骨架，然后在每个子类中实现具体的步骤。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据处理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在处理数据时，可能需要执行一系列固定的步骤，如验证、处理和保存数据。模板方法模式可以定义这些步骤的顺序，而具体的处理逻辑则由子类实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用户界面操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>用户界面操作通常遵循一定的模式，如初始化界面、处理用户输入、更新界面和清理资源。模板方法模式可以用来定义这些步骤，而具体的界面元素和事件处理则由子类实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏开发&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在游戏开发中，不同类型的游戏可能需要遵循相似的游戏循环，如初始化游戏、开始游戏、处理游戏逻辑和结束游戏。模板方法模式可以用来定义这些步骤，而具体的游戏逻辑则由子类实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据库访问&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>数据库访问通常包括连接数据库、执行查询、处理结果和关闭连接等步骤。模板方法模式可以用来定义这些步骤，而具体的数据库操作则由子类实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设计模式实现&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>许多设计模式，如建造者模式、工厂方法模式等，可以通过模板方法模式来实现，以确保在创建复杂对象时遵循一定的步骤。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>测试框架&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在测试框架中，测试过程可能包括设置测试环境、执行测试用例、验证结果和清理测试环境等步骤。模板方法模式可以用来定义这些步骤，而具体的测试逻辑则由测试用例类实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>插件架构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在插件架构中，插件可能需要遵循一定的生命周期，如初始化、激活、执行和停用。模板方法模式可以用来定义这些生命周期的执行顺序，而具体的插件逻辑则由子类实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>报表生成&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>报表生成通常包括数据收集、数据过滤、数据排序和生成报表等步骤。模板方法模式可以用来定义这些步骤的执行顺序，而具体的报表格式和数据源则由子类实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文件处理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在处理不同类型文件时，可能需要执行一系列相似的步骤，如打开文件、读取内容、处理数据和关闭文件。模板方法模式可以用来定义这些步骤，而具体的文件格式处理则由子类实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>在实际开发中，模板方法模式有助于减少代码重复，提高代码的可维护性和可扩展性。通过定义一个通用的算法框架，你可以在不同的上下文中重用这个框架，同时允许子类提供特定的实现细节。&lt;/p>
&lt;h2 id="4如何用模板方法模式解决实际开发中的特定问题">4.如何用模板方法模式解决实际开发中的特定问题？
&lt;/h2>&lt;p>使用模板方法模式解决实际开发中的特定问题通常涉及以下步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>识别算法框架&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确定问题域中的通用算法框架，即一系列步骤，这些步骤在不同的场景中都是相似的，但每个步骤的具体实现可能有所不同。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定义抽象基类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>创建一个抽象基类，其中包含模板方法和一系列抽象步骤。模板方法是算法框架的实现，它调用这些抽象步骤。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现具体步骤&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为每个步骤提供默认实现（如果可能），或者声明它们为纯虚函数，要求子类提供具体实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>创建具体子类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为每种特定场景创建一个子类，重写基类中的抽象步骤，以提供特定于场景的实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用算法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在客户端代码中，使用基类指针或引用来操作子类对象，利用多态性执行模板方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="41示例报表生成器">4.1.示例：报表生成器
&lt;/h3>&lt;p>假设我们需要开发一个报表生成器，它可以生成不同类型的报表，但所有报表生成过程都遵循相同的步骤：收集数据、处理数据、格式化输出。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>步骤 1：定义抽象基类&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象基类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Report&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模板方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">generate&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">collectData&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processData&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">outputData&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">collectData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">processData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">outputData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Outputting data...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>步骤 2：创建具体子类&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体子类：财务报表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">FinancialReport&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Report&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">collectData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Collecting financial data...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">processData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Processing financial data...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体子类：销售报表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">SalesReport&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Report&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">collectData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Collecting sales data...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">processData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Processing sales data...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>步骤 3：使用算法&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Report&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">report&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">report&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FinancialReport&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">report&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">generate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">report&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SalesReport&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">report&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">generate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="42输出">4.2.输出
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Collecting financial data...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Processing financial data...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Outputting data...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Collecting sales data...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Processing sales data...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Outputting data...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>Report&lt;/code> 类定义了报表生成的模板方法，包括收集数据、处理数据和输出数据的步骤。&lt;code>FinancialReport&lt;/code> 和 &lt;code>SalesReport&lt;/code> 类分别实现了这些步骤的具体逻辑。客户端代码通过基类指针来操作不同的报表对象，实现了多态性。&lt;/p>
&lt;p>通过这种方式，模板方法模式帮助我们定义了一个通用的算法框架，同时允许在不同的子类中实现特定的步骤，使得代码更加模块化和可扩展。&lt;/p>
&lt;h2 id="5在实际开发中如何确定一个算法是否适合使用模板方法模式">5.在实际开发中，如何确定一个算法是否适合使用模板方法模式？
&lt;/h2>&lt;p>在实际开发中，确定一个算法是否适合使用模板方法模式，可以通过以下几个关键点来评估：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>算法的稳定性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>算法的总体结构是否稳定，而只有某些步骤的具体实现会变化。如果算法的核心步骤在不同情况下保持不变，那么它可能适合使用模板方法模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>步骤的多样性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>算法是否包含多个步骤，其中一些步骤在不同情况下有不同的实现。模板方法模式允许在基类中定义算法框架，而将具体实现留给子类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多态性的需求&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>是否需要通过多态性来处理不同类型的对象。模板方法模式通过在基类中定义模板方法和在子类中重写步骤，可以实现多态性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码复用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>是否希望在不同的子类中复用算法框架。如果算法的某些步骤在多个子类中是通用的，那么使用模板方法模式可以减少代码重复。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>扩展性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>是否需要在未来可能添加新的步骤或子类。模板方法模式提供了良好的扩展性，允许在不修改现有代码的情况下添加新的步骤或子类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>控制反转&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>是否希望在基类中控制算法的流程，而在子类中提供具体实现。模板方法模式将算法的控制权集中在基类，而将实现细节留给子类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>复杂性管理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>算法是否足够复杂，以至于将其分解为多个步骤可以提高代码的可读性和可维护性。模板方法模式可以帮助管理复杂性，通过将算法分解为更小的、可管理的步骤。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>客户端代码的简洁性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>是否希望客户端代码能够简洁地使用算法，而不需要关心具体的实现细节。模板方法模式允许客户端通过基类接口来使用算法，而具体的实现细节由子类处理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设计原则的遵循&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>是否符合开闭原则（对扩展开放，对修改封闭）。模板方法模式允许在不修改现有代码的情况下扩展新的步骤或子类，符合开闭原则。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>上下文环境&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>考虑项目的具体上下文，例如团队的熟悉度、项目的时间线、维护成本等。如果团队对模板方法模式熟悉，且项目允许一定程度的设计工作，那么使用模板方法模式可能是合适的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过考虑这些因素，你可以决定一个算法是否适合使用模板方法模式。如果算法符合上述多数条件，那么使用模板方法模式可能是一个合适的选择，它可以帮助提高代码的可维护性、可扩展性和复用性。&lt;/p>
&lt;h2 id="6如何在我的项目中实现模板方法模式">6.如何在我的项目中实现模板方法模式？
&lt;/h2>&lt;p>在你的项目中实现模板方法模式，可以遵循以下步骤：&lt;/p>
&lt;h3 id="61-确定适用场景">6.1. 确定适用场景
&lt;/h3>&lt;p>首先，确保你的场景适合使用模板方法模式。这通常意味着你有一个算法框架，它在多个类中是通用的，但某些步骤需要在子类中定制。&lt;/p>
&lt;h3 id="62-定义抽象基类">6.2. 定义抽象基类
&lt;/h3>&lt;p>创建一个抽象基类，它定义了模板方法和算法的框架。这个类将包含：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>模板方法&lt;/strong>：一个或多个步骤组成的算法，这些步骤通过调用抽象操作来执行。&lt;/li>
&lt;li>&lt;strong>抽象操作&lt;/strong>：定义为纯虚函数（pure virtual functions），子类必须实现这些函数。&lt;/li>
&lt;/ul>
&lt;h3 id="63-实现具体步骤">6.3. 实现具体步骤
&lt;/h3>&lt;p>在抽象基类中实现一些步骤，这些步骤可以是具体的，也可以是抽象的。具体的步骤可以直接提供实现，而抽象步骤则留给子类实现。&lt;/p>
&lt;h3 id="64-创建具体子类">6.4. 创建具体子类
&lt;/h3>&lt;p>为每个需要定制算法步骤的场景创建子类。这些子类将实现抽象基类中定义的抽象步骤。&lt;/p>
&lt;h3 id="65-使用多态">6.5. 使用多态
&lt;/h3>&lt;p>在客户端代码中，使用抽象基类的指针或引用来操作子类对象。这样，你可以利用多态性在运行时调用正确的子类实现。&lt;/p>
&lt;h4 id="651示例实现">6.5.1.示例实现
&lt;/h4>&lt;p>假设你正在开发一个支付系统，其中不同的支付方式（如信用卡、PayPal、银行转账）需要执行相似的步骤，但每个步骤的具体实现不同。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>步骤 1：定义抽象基类&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentProcessor&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模板方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">processPayment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">authorizePayment&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">capturePayment&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">finalizePayment&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 抽象步骤
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">authorizePayment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">capturePayment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">finalizePayment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>步骤 2：创建具体子类&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CreditCardProcessor&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">PaymentProcessor&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">authorizePayment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Authorizing credit card payment.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">capturePayment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Capturing credit card payment.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">finalizePayment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Finalizing credit card payment.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PayPalProcessor&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">PaymentProcessor&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">authorizePayment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Authorizing PayPal payment.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">capturePayment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Capturing PayPal payment.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">finalizePayment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Finalizing PayPal payment.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>步骤 3：使用多态&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PaymentProcessor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">processor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CreditCardProcessor&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">processPayment&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">processor&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 清理资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PayPalProcessor&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">processPayment&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">processor&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 清理资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="66-测试和验证">6.6. 测试和验证
&lt;/h3>&lt;p>确保你的实现符合预期，通过单元测试验证每个子类的正确性，以及模板方法模式的整体行为。&lt;/p>
&lt;h3 id="67-文档和维护">6.7. 文档和维护
&lt;/h3>&lt;p>为你的代码编写文档，说明模板方法模式的使用和每个类的职责。随着项目的进展，维护和扩展你的模板方法实现。&lt;/p>
&lt;p>通过这些步骤，你可以在你的项目中有效地实现模板方法模式，提高代码的可重用性和可维护性。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>design pattern Visitor Pattern</title><link>https://wesigj.github.io/p/design-pattern-visitor-pattern/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/design-pattern-visitor-pattern/</guid><description>&lt;h1 id="设计模式-访问者模式-visitor-pattern">设计模式-访问者模式-Visitor Pattern
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>访问者模式（Visitor Pattern）是一种行为设计模式&lt;/li>
&lt;li>它允许你为一个对象结构（比如组合结构）增加新的能力，而不需要改变结构中的类&lt;/li>
&lt;li>这种模式通过创建一个访问者类，它能够访问并操作对象结构中的元素，从而实现对元素的操作和结构的分离&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1访问者模式visitor-pattern">1.访问者模式（Visitor Pattern）
&lt;/h2>&lt;p>访问者模式（Visitor Pattern）是一种行为设计模式，它允许你为一个对象结构（比如组合结构）增加新的能力，而不需要改变结构中的类。这种模式通过创建一个访问者类，它能够访问并操作对象结构中的元素，从而实现对元素的操作和结构的分离。&lt;/p>
&lt;h3 id="11访问者模式的组成部分">1.1.访问者模式的组成部分
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>元素接口（Element）&lt;/strong>：定义一个 &lt;code>accept&lt;/code> 方法，它接受一个访问者对象。&lt;/li>
&lt;li>&lt;strong>具体元素（ConcreteElement）&lt;/strong>：实现元素接口，实现 &lt;code>accept&lt;/code> 方法，让访问者访问该元素。&lt;/li>
&lt;li>&lt;strong>访问者接口（Visitor）&lt;/strong>：为每种类型的元素声明一个访问方法，这样让访问者可以访问元素。&lt;/li>
&lt;li>&lt;strong>具体访问者（ConcreteVisitor）&lt;/strong>：实现每个访问者接口中的方法，定义对每种元素的访问操作。&lt;/li>
&lt;/ol>
&lt;h3 id="12c实现示例">1.2.C++实现示例
&lt;/h3>&lt;p>下面是一个简单的C++示例，演示了如何实现访问者模式：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>定义元素接口和具体元素&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 元素接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Element&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Visitor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">visitor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Element&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体元素A
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteElementA&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Element&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Visitor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">visitor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">visitor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">visit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">operationA&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ConcreteElementA operation&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体元素B
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteElementB&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Element&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Visitor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">visitor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">visitor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">visit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">operationB&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ConcreteElementB operation&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>定义访问者接口和具体访问者&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 访问者接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Visitor&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">visit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ConcreteElementA&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">visit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ConcreteElementB&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Visitor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体访问者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcreteVisitor&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Visitor&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">visit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ConcreteElementA&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">element&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">operationA&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">visit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ConcreteElementB&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">element&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">operationB&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>客户端代码&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteElementA&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">elementA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteElementA&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteElementB&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">elementB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteElementB&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConcreteVisitor&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">visitor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcreteVisitor&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">elementA&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">visitor&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">elementB&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">visitor&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">elementA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">elementB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">visitor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13输出">1.3.输出
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ConcreteElementA operation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ConcreteElementB operation
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="14说明">1.4.说明
&lt;/h3>&lt;p>在这个示例中，&lt;code>Element&lt;/code> 是元素接口，&lt;code>ConcreteElementA&lt;/code> 和 &lt;code>ConcreteElementB&lt;/code> 是具体元素，它们实现了 &lt;code>accept&lt;/code> 方法。&lt;code>Visitor&lt;/code> 是访问者接口，&lt;code>ConcreteVisitor&lt;/code> 是具体访问者，它实现了对每种元素的访问操作。&lt;/p>
&lt;p>客户端代码创建了元素和访问者的实例，并通过调用 &lt;code>accept&lt;/code> 方法，让访问者访问每个元素。&lt;/p>
&lt;h3 id="15应用场景">1.5.应用场景
&lt;/h3>&lt;p>访问者模式适用于以下场景：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>操作复杂&lt;/strong>：当你需要对一个对象结构中的元素执行多种操作，并且这些操作经常变化时。&lt;/li>
&lt;li>&lt;strong>结构稳定&lt;/strong>：当你的对象结构稳定，但需要增加新操作时，使用访问者模式可以在不修改结构的情况下增加新操作。&lt;/li>
&lt;li>&lt;strong>分离操作和对象&lt;/strong>：当你希望将操作和对象结构分离，使得操作可以独立于结构变化时。&lt;/li>
&lt;/ol>
&lt;h3 id="16总结">1.6.总结
&lt;/h3>&lt;p>访问者模式提供了一种将操作和对象结构分离的方法，使得你可以在不修改对象结构的情况下增加新操作。这种模式在处理复杂对象结构和需要动态添加操作的场景中非常有用。&lt;/p>
&lt;h2 id="2访问者模式优缺点">2.访问者模式优缺点
&lt;/h2>&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>开闭原则。 你可以引入在不同类对象上执行的新行为， 且无需对这些类做出修改。&lt;/li>
&lt;li>单一职责原则。 可将同一行为的不同版本移到同一个类中。&lt;/li>
&lt;li>访问者对象可以在与各种对象交互时收集一些有用的信息。 当你想要遍历一些复杂的对象结构 （例如对象树）， 并在结构中的每个对象上应用访问者时， 这些信息可能会有所帮助。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>每次在元素层次结构中添加或移除一个类时， 你都要更新所有的访问者。&lt;/li>
&lt;li>在访问者同某个元素进行交互时， 它们可能没有访问元素私有成员变量和方法的必要权限。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>访问者模式（Visitor Pattern）是一种允许你添加新的操作到对象结构上，而无需改变对象结构本身的设计模式。它通过引入一个访问者接口来实现，该接口可以对各种元素类进行操作。以下是访问者模式的一些优缺点：&lt;/p>
&lt;h3 id="21优点">2.1.优点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>分离操作和对象结构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>访问者模式将算法和对象结构分离，使得操作可以在不修改对象结构的情况下增加。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>扩展性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>可以在不修改已有类的基础上，通过添加新的访问者来扩展新的操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>集中相关操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将多个操作集中到一个访问者中，可以简化系统结构，提高操作的组织性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>解耦操作和对象&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>访问者模式使得操作和对象的耦合度降低，因为对象不需要知道谁来访问它们。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>复用性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>访问者可以被复用，同一个访问者可以用于不同的对象结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="22缺点">2.2.缺点
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>违反了单一职责原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>访问者模式可能会使得访问者承担过多的职责，因为它需要包含所有元素类型的操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>增加新的元素类困难&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果要增加新的元素类，可能需要在访问者接口中添加新的访问方法，这可能需要修改所有访问者的实现，违反了开闭原则。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>违反了里氏替换原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>由于访问者模式需要在元素类中添加 &lt;code>accept&lt;/code> 方法，这可能会使得子类违反里氏替换原则。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>增加系统的复杂性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>引入访问者模式会增加系统的复杂度，因为需要额外的访问者类和接口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>违反了依赖倒置原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>元素类依赖于访问者接口，这违反了依赖倒置原则，即高层模块不应该依赖于低层模块，两者都应该依赖于抽象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>难以维护&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>随着访问者数量的增加，维护和更新访问者模式变得更加困难。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不适合频繁修改的结构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果对象结构经常变化，那么每次变化都可能需要修改访问者的代码，这会增加维护成本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="23总结">2.3.总结
&lt;/h3>&lt;p>访问者模式是一种强大的模式，它允许你向对象结构添加新的操作而不需要修改对象结构本身。然而，它也带来了一些缺点，如增加系统复杂性和维护难度。因此，在决定使用访问者模式时，需要权衡其优缺点，确保它适合你的应用场景。通常，当对象结构相对稳定，而需要对结构中的元素执行多种操作时，访问者模式是一个不错的选择。&lt;/p>
&lt;h2 id="3访问者模式在处理哪些类型的编程问题时特别有用能否给出一些具体的场景">3.访问者模式在处理哪些类型的编程问题时特别有用，能否给出一些具体的场景？
&lt;/h2>&lt;p>访问者模式特别适用于以下类型的编程问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>复杂的对象结构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当你有一个复杂的对象结构（如组合模式创建的树形结构），并且希望执行的操作依赖于多种不同类型的元素时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>需要扩展的操作集合&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当对象结构的操作集合经常变化，或者你希望在不修改对象结构的情况下添加新操作时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象结构的第三方扩展&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当对象结构可能会被第三方扩展，而你希望第三方能够在不修改现有代码的情况下添加新的操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>复杂的数据处理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在数据处理应用中，需要对数据结构中的元素执行多种复杂的、不相关的操作，如统计、转换、输出等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象结构的分析&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在需要对对象结构进行分析并生成报告时，如代码分析工具中对代码结构的检查和报告。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象结构的验证&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在需要对对象结构进行验证或校验时，如软件设计中的约束检查。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象结构的转换&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当需要将一种对象结构转换为另一种结构或格式时，如在不同数据模型之间转换数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="31具体场景示例">3.1.具体场景示例
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>XML或HTML文档处理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>你可以定义一个文档元素的类层次结构，然后使用访问者模式来执行如打印、解析、验证或转换文档的操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编译器设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在编译器中，可以使用访问者模式来实现语法分析树的遍历，对不同的语法结构节点执行不同的语义分析或代码生成操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>报表生成&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在报表系统中，对象结构可能包含各种财务数据，访问者可以执行生成不同格式报表的操作，如PDF、Excel或HTML。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图形编辑器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在图形编辑器中，可以定义一个图形元素的类层次结构，访问者可以执行不同的操作，如渲染、转换格式、应用滤镜等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>软件设计审核&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在软件设计审核工具中，可以使用访问者模式来检查设计模式的使用、代码规范的遵守或潜在的设计问题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据模型转换&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在需要将数据从一个模型转换到另一个模型时，可以使用访问者模式来遍历源模型并构建目标模型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>游戏开发&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在游戏开发中，对象结构可能包含不同类型的游戏元素，如角色、敌人、物品等。访问者模式可以用来执行如AI行为、渲染、碰撞检测等操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>插件架构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在插件架构中，访问者模式可以用来允许插件对主程序的对象结构执行特定的操作，而不需要修改主程序的代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>使用访问者模式时，重要的是要确保对象结构相对稳定，而操作经常变化或可能由第三方扩展。这样可以最大化地发挥访问者模式的优势，同时避免其缺点。&lt;/p>
&lt;h2 id="4访问者模式在处理并发问题时有哪些优势和局限性">4.访问者模式在处理并发问题时有哪些优势和局限性？
&lt;/h2>&lt;p>访问者模式在处理并发问题时的优势和局限性如下：&lt;/p>
&lt;h3 id="41优势">4.1.优势
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>分离关注点&lt;/strong>：访问者模式将数据结构与操作逻辑分离，使得并发操作可以在不改变元素类的情况下实现，从而提高了代码的可维护性和可扩展性 。&lt;/li>
&lt;li>&lt;strong>扩展性&lt;/strong>：在并发环境中，可以轻松添加新的访问者来处理并发操作，而无需修改现有的元素类，这符合开闭原则 。&lt;/li>
&lt;li>&lt;strong>集中管理&lt;/strong>：可以在访问者中集中处理并发问题，例如同步和锁管理，而不是在每个元素类中分散处理 。&lt;/li>
&lt;li>&lt;strong>灵活性&lt;/strong>：通过访问者模式，可以在运行时动态选择不同的访问者来处理并发操作，提高了系统的灵活性 。&lt;/li>
&lt;/ol>
&lt;h3 id="42局限性">4.2.局限性
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>复杂性增加&lt;/strong>：并发环境下，访问者模式可能会增加系统的复杂性，因为需要考虑线程安全和并发控制等问题 。&lt;/li>
&lt;li>&lt;strong>性能考虑&lt;/strong>：在高并发场景下，访问者模式可能会导致性能瓶颈，因为所有的操作都通过访问者进行，可能会增加额外的开销 。&lt;/li>
&lt;li>&lt;strong>同步问题&lt;/strong>：在并发访问共享资源时，需要在访问者中妥善处理同步和并发控制，否则可能会导致数据不一致或竞态条件 。&lt;/li>
&lt;li>&lt;strong>调试难度&lt;/strong>：由于访问者模式增加了系统的复杂性，调试并发问题可能会变得更加困难 。&lt;/li>
&lt;/ol>
&lt;p>在实际应用中，访问者模式可以用于处理多种并发操作，例如在多线程环境中对对象结构进行操作。然而，设计者需要仔细考虑并发控制和性能优化，以确保系统的稳定性和效率。&lt;/p>
&lt;h2 id="5在实际开发中如何避免访问者模式带来的性能瓶颈问题">5.在实际开发中，如何避免访问者模式带来的性能瓶颈问题？
&lt;/h2>&lt;p>在实际开发中，避免访问者模式带来的性能瓶颈问题可以采取以下策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>优化访问者算法&lt;/strong>：确保访问者执行的操作尽可能高效，减少不必要的计算和资源消耗。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少访问者数量&lt;/strong>：合理设计系统，避免创建过多的访问者类，每个访问者类都应该有明确的职责。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用默认访问者&lt;/strong>：为新添加的元素类提供一个默认的访问者实现，这样在不修改现有访问者的情况下也能处理新元素。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免频繁的访问者调用&lt;/strong>：在设计时考虑是否真的需要对每个元素都应用访问者，有时候可以通过设计模式如组合模式来减少对访问者的依赖。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>并发访问者执行&lt;/strong>：如果可能，可以考虑并行处理元素，特别是在处理大量元素时。这可能需要在访问者的设计中考虑线程安全问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>延迟计算&lt;/strong>：对于复杂的操作，可以考虑使用延迟计算（Lazy Evaluation）策略，只有在真正需要结果时才执行计算。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>资源池&lt;/strong>：对于资源密集型的操作，可以考虑使用资源池来管理资源，避免频繁的资源申请和释放带来的开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>监控和调优&lt;/strong>：使用性能监控工具来分析系统的性能瓶颈，并根据监控结果对访问者模式的使用进行调优。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>批量处理&lt;/strong>：在处理大量元素时，可以考虑批量处理元素，减少遍历次数和访问者的调用次数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码优化&lt;/strong>：对访问者模式的代码进行优化，包括减少方法调用、优化数据结构、使用更高效的算法等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上述策略，可以在保持访问者模式带来的好处的同时，减少其可能引入的性能问题。在实际应用中，需要根据具体情况灵活选择和调整这些策略。&lt;/p>
&lt;h2 id="6如何通过代码优化来减少访问者模式的性能开销">6.如何通过代码优化来减少访问者模式的性能开销？
&lt;/h2>&lt;p>通过代码优化来减少访问者模式的性能开销，可以考虑以下几个方面：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>优化算法逻辑&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保访问者中的算法尽可能高效，避免不必要的计算和资源消耗。&lt;/li>
&lt;li>减少循环中的重复操作，例如通过缓存结果来避免重复的数据库查询或重复的计算。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少对象创建&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>访问者模式可能会创建多个访问者对象，尤其是在频繁调用的情况下。可以考虑重用访问者对象，而不是每次都创建新的实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免过度设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>只在真正需要的时候使用访问者模式。如果操作不复杂或者不经常变化，直接在元素类中实现可能更高效。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用高效的数据结构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>选择合适的数据结构来存储元素，以减少访问者遍历元素时的性能开销。例如，使用索引或者哈希表来快速定位元素。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>并行处理&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果访问者的操作是独立的，可以考虑使用多线程或者并发库来并行处理元素，以提高性能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>延迟计算&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于复杂的计算，可以使用延迟计算（Lazy Evaluation）策略，只有在真正需要结果时才执行计算。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少方法调用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>减少访问者和元素之间的方法调用次数，可以通过直接访问数据或者将多个操作合并到一个方法调用来实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用访问者组合&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果有多个访问者执行相似的操作，可以考虑将它们组合成一个访问者，以减少遍历次数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优化接受方法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在元素的 &lt;code>accept&lt;/code> 方法中，直接调用访问者的方法，避免不必要的中间步骤。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免在访问者中使用循环&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>尽量在对象结构中使用循环来遍历元素，而不是在访问者中。这样可以减少访问者需要处理的逻辑。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用轻量级的访问者&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确保访问者对象尽可能轻量，避免在访问者中包含不必要的状态或者资源。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码剖析和性能测试&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用代码剖析工具来分析性能瓶颈，并进行针对性的优化。&lt;/li>
&lt;li>定期进行性能测试，确保优化后的代码达到了预期的性能提升。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>合理使用继承和组合&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在设计元素类和访问者类时，合理使用继承和组合，避免过度使用继承带来的复杂性和性能开销。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过这些代码优化策略，可以有效地减少访问者模式在实际应用中的性能开销，提高程序的运行效率。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>设计模式-常见的设计原则或最佳实践 design_principles_or_best_practices</title><link>https://wesigj.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E6%88%96%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-design_principles_or_best_practices/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E6%88%96%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-design_principles_or_best_practices/</guid><description>&lt;h1 id="设计模式-常见的设计原则或最佳实践">设计模式-常见的设计原则或最佳实践
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;hr>
&lt;h2 id="1在设计模式中有哪些常见的设计原则或最佳实践">1.在设计模式中，有哪些常见的设计原则或最佳实践？
&lt;/h2>&lt;p>在设计模式中，有哪些常见的设计原则或最佳实践？
What are the common design principles or best practices in design patterns?&lt;/p>
&lt;p>在设计模式中，有一些核心的设计原则和最佳实践，它们帮助开发者创建灵活、可维护和可扩展的软件系统。以下是一些常见的设计原则：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>单一职责原则（Single Responsibility Principle, SRP）&lt;/strong>：
每个类应该只有一个引起它变化的原因，即每个类应该只负责一项任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>开放-封闭原则（Open-Closed Principle, OCP）&lt;/strong>：
软件实体应该对扩展开放，对修改关闭。这意味着设计时应当使软件模块易于扩展，但不需要修改现有代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>里氏替换原则（Liskov Substitution Principle, LSP）&lt;/strong>：
子类对象必须能够替换掉它们的父类对象，而不影响程序的行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>接口隔离原则（Interface Segregation Principle, ISP）&lt;/strong>：
客户端不应该依赖于它不使用的接口。应该将大的接口拆分成小的、特定的接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>依赖倒置原则（Dependency Inversion Principle, DIP）&lt;/strong>：
高层模块不应该依赖于低层模块，两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>最少知识原则（Law of Demeter, LoD）&lt;/strong>：
一个对象应该对其他对象有最少的了解。只与你的直接朋友通信，不与“朋友的朋友”通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>合成/聚合复用原则（Composite Reuse Principle, CRP）&lt;/strong>：
尽量使用对象的合成/聚合，而不是通过继承来复用代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>迪米特法则（Principle of Least Knowledge, POLK）&lt;/strong>：
一个对象应该对其他对象有最少的了解，只与直接的朋友通信，不与“朋友的朋友”通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>好莱坞原则（Hollywood Principle）&lt;/strong>：
“别调用我们，我们会调用你”。组件应该提供接口供其他组件使用，而不是主动调用其他组件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>SOLID原则&lt;/strong>：
SOLID是上述前五个原则的首字母缩写，它是一个整体的设计原则集合，用于指导面向对象设计。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>YAGNI（You Aren&amp;rsquo;t Gonna Need It）&lt;/strong>：
不要为未来可能的需求添加代码，只实现当前需要的功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>KISS（Keep It Simple, Stupid）&lt;/strong>：
保持设计简单，避免不必要的复杂性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>DRY（Don&amp;rsquo;t Repeat Yourself）&lt;/strong>：
避免代码重复。重复的代码会导致维护困难。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>LOD（Learning Opportunities Daily）&lt;/strong>：
每天都是学习的机会，鼓励开发者不断学习和改进。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>WET（Write Everything Twice）&lt;/strong>：
在某些情况下，为了保持代码的清晰和简单，重复编写代码可能是可接受的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>这些原则和最佳实践不是一成不变的规则，而是指导软件开发过程中的思考和决策的工具。在实际应用中，开发者需要根据具体情况灵活运用这些原则。&lt;/p>
&lt;h2 id="2如何将单一职责原则应用到实际的软件开发中">2.如何将单一职责原则应用到实际的软件开发中？
&lt;/h2>&lt;p>单一职责原则（Single Responsibility Principle, SRP）是面向对象设计原则之一，它指出一个类应该只有一个引起它变化的原因。在实际的软件开发中，应用单一职责原则可以提高代码的可维护性、可读性和可测试性。以下是一些将单一职责原则应用到实际软件开发中的策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>明确类的功能&lt;/strong>：
在设计类时，首先明确这个类应该承担的功能。如果一个类承担了多个功能，考虑将其拆分成多个类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免“万能”类&lt;/strong>：
避免创建一个类来处理所有事情。例如，一个类不应该同时负责数据访问、业务逻辑和用户界面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用职责分离&lt;/strong>：
将不同的职责分离到不同的类中。例如，如果一个类既处理用户输入也处理数据存储，应该将其拆分为一个输入处理类和一个数据访问类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>抽象和封装&lt;/strong>：
通过抽象和封装来隐藏类的内部实现细节，只暴露与类职责相关的接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>接口和抽象类&lt;/strong>：
使用接口和抽象类来定义类应该实现的行为，而不是具体的实现细节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>服务定位器模式&lt;/strong>：
使用服务定位器模式来解耦类之间的依赖关系，使得类只关注自己的职责。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>依赖注入&lt;/strong>：
通过依赖注入（Dependency Injection）来提供类需要的外部依赖，而不是让类自己创建或查找这些依赖。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模块化&lt;/strong>：
将应用程序分解为多个模块，每个模块只负责一部分功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续重构&lt;/strong>：
在开发过程中，持续地重构代码，以确保每个类都只承担单一职责。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编写单元测试&lt;/strong>：
编写单元测试来验证类的职责。如果一个类有多个职责，编写测试可能会变得复杂。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免条件语句&lt;/strong>：
如果一个类中包含大量的条件语句（如if-else或switch-case），这可能是该类承担了多个职责的信号。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用职责链模式&lt;/strong>：
如果存在多个对象处理请求，可以使用职责链模式来确保每个对象只处理它负责的请求部分。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>领域驱动设计（DDD）&lt;/strong>：
使用领域驱动设计来定义领域模型，确保每个实体或服务都只处理与其领域相关的职责。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过将单一职责原则应用到软件开发中，可以创建出更加模块化、灵活和易于维护的系统。然而，也要注意不要过度分解类，这可能会导致系统过于复杂。正确的平衡是关键。&lt;/p>
&lt;h2 id="3如何识别一个类是否违反了单一职责原则">3.如何识别一个类是否违反了单一职责原则？
&lt;/h2>&lt;p>识别一个类是否违反了单一职责原则通常可以通过以下几个步骤和迹象来判断：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>检查类的方法数量&lt;/strong>：
如果一个类有过多的方法，这可能意味着它承担了多个职责。虽然这不是绝对的标准，但可以作为一个初步的警示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分析方法的多样性&lt;/strong>：
查看类中的方法是否服务于不同的目的。如果方法之间没有明显的联系，或者它们处理的问题领域不同，这可能是违反单一职责原则的迹象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>检查类的属性&lt;/strong>：
如果一个类包含了多种类型的属性，这些属性服务于不同的功能，这可能表明类承担了多个职责。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>评估条件语句&lt;/strong>：
如果一个类中包含大量的条件语句（如if-else或switch-case），并且这些条件语句处理的是类的不同功能，这可能是违反单一职责原则的信号。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>观察类的变化原因&lt;/strong>：
如果发现类需要因为多种不同的原因而改变，这可能意味着它承担了多个职责。例如，如果一个类既处理用户界面也处理业务逻辑，那么用户界面的变化和业务逻辑的变化都会导致这个类的变化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>检查类是否参与多个业务流程&lt;/strong>：
如果一个类在多个业务流程中扮演不同的角色，这可能意味着它承担了多个职责。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>评估类的命名&lt;/strong>：
如果类名不够具体或者包含了多个名词，这可能表明它承担了多个职责。一个好的类名应该清晰地反映出它的职责。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>检查类是否依赖于多个外部接口&lt;/strong>：
如果一个类依赖于多个不同的外部接口，并且这些接口服务于不同的功能，这可能是违反单一职责原则的迹象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>考虑类的可测试性&lt;/strong>：
如果发现很难为类编写单元测试，或者需要模拟多个不同的依赖来测试类的不同部分，这可能意味着类承担了多个职责。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用代码度量工具&lt;/strong>：
可以使用代码度量工具来分析类的复杂度，如圈复杂度、方法数、类内聚性等，这些度量可以帮助识别可能违反单一职责原则的类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>团队讨论和代码审查&lt;/strong>：
通过团队讨论和代码审查，可以发现类是否承担了过多的职责，以及是否有更好的设计选择。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>识别违反单一职责原则的类是一个持续的过程，需要开发者保持对代码的敏感度和对设计原则的理解。通过重构和优化，可以逐步改善代码结构，使其更加符合单一职责原则。&lt;/p>
&lt;h2 id="4能否提供一些实际的案例说明这些设计原则是如何帮助解决实际问题的">4.能否提供一些实际的案例，说明这些设计原则是如何帮助解决实际问题的？
&lt;/h2>&lt;p>设计原则在软件开发中扮演着至关重要的角色，它们帮助开发者创建出高质量、易于维护和扩展的软件系统。以下是一些实际案例，展示了这些设计原则是如何帮助解决实际问题的：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>单一职责原则（SRP）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>例如，在电商平台中，订单类（&lt;code>Order&lt;/code>）可能同时负责处理订单逻辑、计算总价、打印订单信息以及保存订单到数据库。遵循单一职责原则，这些功能可以被分离到&lt;code>OrderCalculator&lt;/code>、&lt;code>OrderPrinter&lt;/code>和&lt;code>OrderRepository&lt;/code>等不同的类中，每个类只处理一项任务 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>开闭原则（OCP）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在支付系统中，可能需要支持多种支付方式，如信用卡、PayPal、微信支付等。通过使用开闭原则，系统可以在不修改现有代码的情况下，通过添加新的支付方式类来扩展功能，这些类都实现同一个支付接口 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>里氏替换原则（LSP）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在图形界面编程中，基础控件类如&lt;code>Button&lt;/code>可能设计为可拖拽。如果&lt;code>RadioButton&lt;/code>继承自&lt;code>Button&lt;/code>，但它不需要拖拽功能，那么&lt;code>RadioButton&lt;/code>不应该重写&lt;code>Button&lt;/code>的拖拽方法，以保证继承体系的稳定性 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>接口隔离原则（ISP）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>考虑一个内容管理系统，如果有一个庞大的接口&lt;code>ContentEditor&lt;/code>，它包含了编辑文本、图片、视频等所有功能。根据接口隔离原则，这些功能可以被分离到&lt;code>TextEditor&lt;/code>、&lt;code>ImageEditor&lt;/code>和&lt;code>VideoEditor&lt;/code>等更小的接口中，使得实现类只需要依赖它们实际使用的方法 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>依赖倒置原则（DIP）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在构建一个应用程序时，如果高层策略类直接依赖于低层的实现类，这将导致代码难以维护和扩展。依赖倒置原则提倡高层模块应该依赖于抽象，这样可以通过抽象层来注入具体的实现，从而降低模块间的耦合度 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>合成/聚合复用原则（CARP）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在设计一个企业资源规划（ERP）系统时，可以使用合成或聚合来组合不同的业务组件，如订单处理、库存管理和客户关系管理等。这种设计允许系统灵活地添加或替换组件，而不需要对整个系统进行大规模重构 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>尼尔森十大设计原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>例如，腾讯视频通过互动组件和视频进度条的结合，提升了用户参与感和个性化体验 。美团App通过设计心理学和实时活动组件，增强了用户的操控感并缓解了等待焦虑 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>UI设计原则&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对齐原则确保界面元素有序排列，提升美观性 。格式塔原理中的亲密性原则帮助设计师通过元素的接近程度来创建视觉上的整体感 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模块化设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过将软件系统划分为独立的模块，每个模块有明确的接口和功能定义，可以降低复杂性并提高可维护性 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>健壮性设计&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>例如，当软件遇到错误输入或操作时，通过异常处理机制能够保持稳定运行，并给出有用的错误提示 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过这些案例，我们可以看到设计原则在实际软件开发中的应用，它们帮助开发者构建出更加健壮、灵活和用户友好的软件系统。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>设计模式-系列</title><link>https://wesigj.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%B3%BB%E5%88%97/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%B3%BB%E5%88%97/</guid><description>&lt;h1 id="overview">Overview
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;hr>
&lt;h2 id="在设计模式中有哪些常见的设计原则或最佳实践">在设计模式中，有哪些常见的设计原则或最佳实践？
&lt;/h2>&lt;p>What are the common design principles or best practices in design patterns?&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="./design_principles_or_best_practices/README.md" >设计原则 design_principles_or_best_practices&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="23种-设计模式">23种 设计模式
&lt;/h2>&lt;h3 id="创建式模式creative-modecreational_patternsreadmemd">&lt;a class="link" href="./creational_patterns/README.md" >创建式模式Creative Mode&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="./creational_patterns/factory_method_mode/README.md" >工厂方法模式 factory_method_mode&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./creational_patterns/abstract_factory/README.md" >抽象工厂模式 abstract_factory&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./creational_patterns/builder_pattern/README.md" >生成器模式 builder_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./creational_patterns/prototype_pattern/README.md" >原型模式 prototype_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./creational_patterns/singleton_pattern/README.md" >单例模式 singleton_pattern&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="结构型模式structural-patternstructural_patternsreadmemd">&lt;a class="link" href="./structural_patterns/README.md" >结构型模式Structural pattern&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="./structural_patterns/adapter_pattern/README.md" >适配器模式 adapter_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./structural_patterns/bridge_pattern/README.md" >桥接模式 bridge_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./structural_patterns/composite_pattern/README.md" >组合模式 composite_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./structural_patterns/decorator_pattern/README.md" >装饰模式 decorator_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./structural_patterns/facade_pattern/README.md" >外观模式 facade_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./structural_patterns/flyweight_pattern/README.md" >享元模式 flyweight_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./structural_patterns/proxy_pattern/README.md" >代理模式 proxy_pattern&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="行为模式behavioral-patternsbehavioral_patternsreadmemd">&lt;a class="link" href="./behavioral_patterns/README.md" >行为模式Behavioral patterns&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="./behavioral_patterns/chain_of_responsibility_pattern/README.md" >责任链模式 chain_of_responsibility_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./behavioral_patterns/command_pattern/README.md" >命令模式 command_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./behavioral_patterns/iterator_pattern/README.md" >选代器模式 iterator_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./behavioral_patterns/mediator_pattern/README.md" >中介者模式 mediator_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./behavioral_patterns/memento_pattern/README.md" >备忘录模式 memento_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./behavioral_patterns/observer_pattern/README.md" >观察者模式 observer_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./behavioral_patterns/state_pattern/README.md" >状态模式 state_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./behavioral_patterns/strategy_pattern/README.md" >策略模式 strategy_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./behavioral_patterns/template_method_pattern/README.md" >模板方法模式 template_method_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./behavioral_patterns/visitor_pattern/README.md" >访问者模式 visitor_pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./behavioral_patterns/interpreter_pattern/README.md" >解释器模式 interpreter_pattern&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>设计模式-结构性模式-structural patterns</title><link>https://wesigj.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E6%80%A7%E6%A8%A1%E5%BC%8F-structural-patterns/</link><pubDate>Sun, 08 Sep 2024 00:08:00 +0800</pubDate><guid>https://wesigj.github.io/p/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E6%80%A7%E6%A8%A1%E5%BC%8F-structural-patterns/</guid><description>&lt;h1 id="设计模式-结构性模式-structural-patterns">设计模式-结构性模式-structural patterns
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;hr>
&lt;h2 id="1结构性模式structural-patterns">1.结构性模式（Structural Patterns）
&lt;/h2>&lt;p>结构性模式（Structural Patterns）是软件设计模式的一种，它们主要关注如何将对象和类组装成较大的结构，同时保持结构的灵活和可复用。以下是七种常见的结构性设计模式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>适配器模式（Adapter Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>允许对象间的接口不兼容问题得以解决，使得原本因接口不兼容而不能一起工作的类可以一起工作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>装饰器模式（Decorator Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>动态地给一个对象添加额外的职责，同时又不改变其结构。装饰器模式提供了一种灵活的替代方案，用于扩展对象的功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代理模式（Proxy Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>为另一个对象提供一个代替或占位符，以控制对它的访问。代理可以在不改变对象的代码的前提下，增加访问的控制或其他额外功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>外观模式（Facade Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>提供了一个统一的高层接口，用于访问子系统中的一群接口。外观模式定义了一个高层接口，使得子系统更易于使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>桥接模式（Bridge Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将抽象部分与其实现部分分离，使它们可以独立地变化。桥接模式主要用于把抽象与实现解耦，让它们可以独立地扩展。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组合模式（Composite Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>允许你将对象组合成树形结构，以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元模式（Flyweight Pattern）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>用于减少创建对象的数量，分享细粒度的对象。享元模式通过共享对象来支持大量细粒度对象的高效使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>结构性模式的应用场景包括但不限于：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>适配器模式&lt;/strong>：适用于需要整合具有不同接口的现有子系统或第三方库的场景。&lt;/li>
&lt;li>&lt;strong>装饰器模式&lt;/strong>：适用于需要动态地给对象添加职责，同时又希望保持类的数量最小化的场景。&lt;/li>
&lt;li>&lt;strong>代理模式&lt;/strong>：适用于需要控制或延迟对对象的访问，或者需要为对象添加额外的安全控制或延迟初始化的场景。&lt;/li>
&lt;li>&lt;strong>外观模式&lt;/strong>：适用于需要提供一个简化的接口来访问复杂的类系统或库的场景。&lt;/li>
&lt;li>&lt;strong>桥接模式&lt;/strong>：适用于需要将一个类层次结构的抽象部分与它的实现部分分离，使它们可以独立变化的场景。&lt;/li>
&lt;li>&lt;strong>组合模式&lt;/strong>：适用于需要将对象组合成树形结构，并且希望用户对单个对象和组合对象的使用具有一致性的场景。&lt;/li>
&lt;li>&lt;strong>享元模式&lt;/strong>：适用于需要大量相似对象，而这些对象的创建和销毁成本很高时，通过共享来减少内存占用和提高效率。&lt;/li>
&lt;/ul>
&lt;p>结构性模式通过提供灵活的设计方案，帮助开发者构建松耦合、可扩展且易于维护的系统。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic abstract</title><link>https://wesigj.github.io/p/c-basic-abstract/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-abstract/</guid><description>&lt;h1 id="c面试基础系列-abstract">C++面试基础系列-abstract
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;p>在C++中，&lt;code>abstract&lt;/code>这个概念主要与抽象类&lt;code>（Abstract Class）&lt;/code>相关。抽象类是一种不能被实例化的类，它通常包含至少一个纯虚函数&lt;code>（Pure Virtual Function）&lt;/code>。抽象类用于定义接口或行为规范，可以被其他类继承并实现具体的功能。&lt;/p>
&lt;h2 id="1abstract关键点">1.abstract关键点
&lt;/h2>&lt;p>以下是一些关于C++中抽象类的关键点：&lt;/p>
&lt;ul>
&lt;li>纯虚函数：
&lt;ul>
&lt;li>纯虚函数是在基类中声明但没有实现的虚函数，其声明方式是在函数声明的末尾加上= 0。&lt;/li>
&lt;li>例如：&lt;code>virtual void doSomething() = 0;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>抽象类的定义：
&lt;ul>
&lt;li>包含至少一个纯虚函数的类就是抽象类。&lt;/li>
&lt;li>抽象类不能被直接实例化，但可以被用作其他类的基类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>继承抽象类：
&lt;ul>
&lt;li>派生类必须实现基类中的所有纯虚函数，否则派生类也会是抽象类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>接口定义：
&lt;ul>
&lt;li>抽象类通常用于定义接口，让不同的派生类实现相同的接口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>多态性：
&lt;ul>
&lt;li>抽象类支持多态性，可以通过基类指针或引用调用派生类重写的虚函数。
示例：&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象类声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 纯虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 虚析构函数，确保派生类析构正确性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 派生类实现抽象类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Circle&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 绘制圆形的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用抽象类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">shape&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">delete&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>抽象类的作用：
&lt;ul>
&lt;li>强制实现接口：确保所有派生类都实现了抽象类中定义的纯虚函数。&lt;/li>
&lt;li>代码复用：基类可以提供一些通用的实现，派生类可以重写或继承这些实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>设计原则：
&lt;ul>
&lt;li>遵循里氏替换原则（Liskov Substitution Principle），确保派生类可以替换其基类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注意事项：
&lt;ul>
&lt;li>抽象类通常包含虚析构函数，以确保派生类的析构函数被正确调用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>C++11及以后版本：
&lt;ul>
&lt;li>C++11引入了final关键字，可以修饰类或成员函数，表示它们不能被进一步继承或重写。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>抽象类是C++面向对象编程中的一个重要概念，它有助于实现代码的模块化和可扩展性。通过使用抽象类，开发者可以定义清晰的接口，并在不同的派生类中实现这些接口的具体行为。&lt;/p>
&lt;h2 id="2c-抽象类和纯虚函数的例子">2.C++ 抽象类和纯虚函数的例子
&lt;/h2>&lt;ul>
&lt;li>在这个例子中，Shape 是一个抽象类，它定义了一个纯虚函数 getArea。
&lt;ul>
&lt;li>Circle 和 Rectangle 是 Shape 的派生类，它们分别实现了 getArea 函数。&lt;/li>
&lt;li>由于 Shape 是抽象类，我们不能直接创建它的实例，但可以创建 Circle 和 Rectangle 的实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象基类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 纯虚函数，用于计算面积
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">getArea&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 虚析构函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 派生类 Circle
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Circle&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">radius&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 实现基类的纯虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">getArea&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mf">3.14159&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">radius&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 派生类 Rectangle
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Rectangle&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Rectangle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 实现基类的纯虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">getArea&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 由于 Shape 是抽象类，不能直接实例化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Shape shape; // 错误
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Circle&lt;/span> &lt;span class="n">circle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">5.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Rectangle&lt;/span> &lt;span class="n">rectangle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">4.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">6.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Circle area: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">circle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getArea&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Rectangle area: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">rectangle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getArea&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3abstract重点">3.abstract重点
&lt;/h2>&lt;ul>
&lt;li>纯虚函数使一个类变成抽象类&lt;/li>
&lt;li>抽象类类型的指针和引用&lt;/li>
&lt;li>如果我们不在派生类中覆盖纯虚函数，那么派生类也会变成抽象类&lt;/li>
&lt;li>抽象类可以有构造函数&lt;/li>
&lt;li>构造函数不能是虚函数，而析构函数可以是虚析构函数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 抽象类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Base&lt;/span>&lt;span class="p">(){&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Constructor: Base&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">(){&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Destructor : Base&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Derived&lt;/span>&lt;span class="p">(){&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Constructor: Derived&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Derived&lt;/span>&lt;span class="p">(){&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Destructor : Derived&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;In Derived.func().&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>当基类指针指向派生类对象并删除对象时，我们可能希望调用适当的析构函数。
如果析构函数不是虚拟的，则只能调用基类析构函数。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic assert</title><link>https://wesigj.github.io/p/c-basic-assert/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-assert/</guid><description>&lt;h1 id="c面试基础系列-assert">C++面试基础系列-assert
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;h2 id="1assert关键点">1.assert关键点
&lt;/h2>&lt;p>在C++中，&lt;code>assert&lt;/code>宏是断言机制的一部分，用于在开发过程中检查程序的逻辑错误。如果断言的条件不满足，程序将终止执行，并通常会输出相关的错误信息。&lt;/p>
&lt;p>以下是一些关于C++中&lt;code>assert&lt;/code>宏的关键点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义：&lt;code>assert&lt;/code>宏定义在&lt;code>&amp;lt;cassert&amp;gt;&lt;/code>或&lt;code>&amp;lt;assert.h&amp;gt;&lt;/code>头文件中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>语法：&lt;code>assert&lt;/code>宏的基本语法是&lt;code>assert(expression)&lt;/code>，其中&lt;code>expression&lt;/code>是一个在运行时求值的表达式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>行为：如果&lt;code>expression&lt;/code>的值为&lt;code>true&lt;/code>，程序继续正常执行。如果&lt;code>expression&lt;/code>的值为&lt;code>false&lt;/code>，则程序将打印一条错误消息，并终止执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调试：&lt;code>assert&lt;/code>宏通常用于调试阶段，以确保程序的某些关键条件得到满足。在发布版本中，可以通过预处理器指令NDEBUG来禁用assert宏。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cassert&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 如果x大于5，程序继续执行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;x的值是：&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 如果x小于20，程序继续执行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>自定义消息：C++11开始支持使用&lt;code>static_assert&lt;/code>进行编译时断言，并且可以传递一个字符串作为错误消息：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static_assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;int类型必须至少占用4个字节&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>编译时断言：&lt;code>static_assert&lt;/code>是在编译时检查条件是否为真的断言，如果条件为假，编译器将报错并停止编译过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>性能：由于&lt;code>assert&lt;/code>在运行时检查条件，因此在性能敏感的应用中应谨慎使用，或者在发布版本中禁用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>禁用断言：可以通过定义NDEBUG宏来禁用所有&lt;code>assert&lt;/code>宏：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define NDEBUG
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cassert&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>使用断言是一种很好的实践，可以帮助开发者及早发现和修复错误。然而，它们不应该被用作错误处理的主要手段，因为它们在生产环境中可能被禁用。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic bit_field</title><link>https://wesigj.github.io/p/c-basic-bit_field/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-bit_field/</guid><description>&lt;h1 id="c面试基础系列-bit_field">C++面试基础系列-bit_field
&lt;/h1>&lt;h2 id="overview">Overview
&lt;/h2>&lt;p>“ 位域 “ 或 “ 位段 “(Bit field)为一种数据结构，可以把数据以位的形式紧凑的储存，并允许程序员对此结构的位进行操作。&lt;/p>
&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>它可以使数据单元节省储存空间，当程序需要成千上万个数据单元时，这种方法就显得尤为重要。&lt;/li>
&lt;li>位段可以很方便的访问一个整数值的部分内容从而可以简化程序源代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点：
&lt;ul>
&lt;li>而这种数据结构的缺点在于，位段实现依赖于具体的机器和系统，在不同的平台可能有不同的结果，这导致了位段在本质上是不可移植的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>关键点：
&lt;ul>
&lt;li>位域在内存中的布局是与机器有关的&lt;/li>
&lt;li>位域的类型必须是整型或枚举类型，带符号类型中的位域的行为将因具体实现而定&lt;/li>
&lt;li>取地址运算符（&amp;amp;）不能作用于位域，任何指针都无法指向类的位域&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="1bit_field位域">1.bit_field位域
&lt;/h2>&lt;p>在C和C++编程中，&lt;code>bit_field&lt;/code>（位字段）是一种数据结构技术，它允许程序员访问和操作内存中存储的整数的特定部分。以下是位字段的一些关键点：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>内存节省&lt;/strong> ：位字段允许程序员将多个数据项存储在一个小的存储单元内，从而节省内存空间。&lt;/li>
&lt;li>&lt;strong>数据表示&lt;/strong> ：位字段通常用于表示具有固定位宽的数据，例如状态标志、控制位或特定的配置选项。&lt;/li>
&lt;li>&lt;strong>声明方式&lt;/strong> ：&lt;/li>
&lt;li>&lt;strong>位宽指定&lt;/strong> ：在声明位字段时，可以通过冒号(&lt;code>:&lt;/code>)后跟数字来指定每个字段的位宽。&lt;/li>
&lt;li>&lt;strong>位操作&lt;/strong> ：位字段常用于位操作，如位与(&lt;code>&amp;amp;&lt;/code>)、位或(&lt;code>|&lt;/code>)、位异或(&lt;code>^&lt;/code>)、位非(&lt;code>~&lt;/code>)和位移操作。&lt;/li>
&lt;li>&lt;strong>数据对齐&lt;/strong> ：位字段可能会影响数据的内存对齐，编译器可能会在位字段结构体中添加填充位以满足对齐要求。&lt;/li>
&lt;li>&lt;strong>可移植性问题&lt;/strong> ：位字段的布局（即位字段在内存中的顺序）可能依赖于编译器和平台，因此可能存在可移植性问题。&lt;/li>
&lt;li>&lt;strong>访问方式&lt;/strong> ：位字段通常作为结构体的成员来访问，可以结合点(&lt;code>.&lt;/code>)或箭头(&lt;code>-&amp;gt;&lt;/code>)操作符使用。&lt;/li>
&lt;li>&lt;strong>应用场景&lt;/strong> ：
&lt;ul>
&lt;li>硬件设备寄存器的访问。&lt;/li>
&lt;li>状态机的状态表示。&lt;/li>
&lt;li>配置选项的存储。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>限制&lt;/strong> ：位字段的使用应谨慎，因为它们可能会使代码难以理解和维护，且容易出错。&lt;/li>
&lt;li>&lt;strong>类型安全&lt;/strong> ：位字段本身是强类型，但位字段的运算可能导致隐式类型转换。&lt;/li>
&lt;li>&lt;strong>编译器特性&lt;/strong> ：某些编译器可能提供特定的特性或扩展来支持位字段的声明和操作。&lt;/li>
&lt;/ol>
&lt;p>位字段是C和C++中一种强大的特性，尤其适用于需要精细控制内存使用和硬件级编程的场合。然而，由于它们可能带来的复杂性和可移植性问题，建议仅在确实需要时才使用位字段。&lt;/p>
&lt;h2 id="2bit_field字节对齐">2.bit_field字节对齐
&lt;/h2>&lt;h3 id="21位域的声明">2.1.位域的声明
&lt;/h3>&lt;p>位域通常使用结构体声明， 该结构声明为每个位域成员设置名称，并决定其宽度：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">bit_field_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">type&lt;/span> &lt;span class="nl">member_name&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Elements&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">bit_field_name&lt;/td>
&lt;td style="text-align: left">位域结构名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">type&lt;/td>
&lt;td style="text-align: left">位域成员的类型，必须为 int、signed int 或者 unsigned int 类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">member_name&lt;/td>
&lt;td style="text-align: left">位域成员名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">width&lt;/td>
&lt;td style="text-align: left">规定成员所占的位数&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">BitField&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">is_enabled&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 1位用于表示是否启用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 3位用于表示是否启用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">has_data&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 1位用于表示是否有数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">length1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 3位用于表示是否有数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">length2&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 8位用于表示是否有数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 可以继续添加更多位字段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>length1其容量为 2^3 = 8，即赋值范围应为 [0,7]。&lt;/li>
&lt;li>length2其容量为 2^8 = 256，即赋值范围应为 [0,255]。&lt;/li>
&lt;li>未命名的位域，表示占位，字节对齐，仅起填充作用，并无实际意义。&lt;/li>
&lt;/ul>
&lt;h3 id="22位域的对齐">2.2.位域的对齐
&lt;/h3>&lt;p>一个位域成员不允许跨越两个 unsigned int 的边界，如果成员声明的总位数超过了一个 unsigned int 的大小， 那么编译器会自动移位位域成员，使其按照 unsigned int 的边界对齐。
例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">stuff&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">field1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">field2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">field3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>field1&lt;/code> + &lt;code>field2&lt;/code> = 34 Bits，超出 32 Bits, 编译器会将 &lt;code>field2&lt;/code>移位至下一个 unsigned int 单元存放， stuff.field1 和 stuff.field2 之间会留下一个 2 Bits 的空隙， stuff.field3 紧跟在 stuff.field2 之后，该结构现在大小为 2 * 32 = 64 Bits。&lt;/p>
&lt;p>这个空洞可以用之前提到的未命名的位域成员填充，我们也可以使用一个宽度为 0 的未命名位域成员令下一位域成员与下一个整数对齐。
例如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">stuff&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">field1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">field2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">field3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里 stuff.field1 与 stuff.field2 之间有一个 2 Bits 的空隙，stuff.field3 则存储在下一个 unsigned int 中，该结构现在大小为 3 * 32 = 96 Bits。&lt;/p>
&lt;h2 id="3位域的初始化和位的重映射">3.位域的初始化和位的重映射
&lt;/h2>&lt;h3 id="31初始化">3.1.初始化
&lt;/h3>&lt;p>位域的初始化与普通结构体初始化的方法相同，这里列举两种，如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">stuff&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者直接为位域成员赋值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">stuff&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">field1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">field2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">field3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="32位域的重映射-re-mapping">3.2.位域的重映射 (Re-mapping)
&lt;/h3>&lt;p>声明一个 大小为 32 Bits 的位域&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">box&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">ready&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">error&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">command&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">sector_no&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="321利用重映射将位域归零">3.2.1.利用重映射将位域归零
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 将 &amp;#34;位域结构体的地址&amp;#34; 映射至 &amp;#34;整形（int*) 的地址&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 清除 s1，将各成员归零
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="322利用联合-union-将-32-bits-位域-重映射至-unsigned-int-型">3.2.2.利用联合 (union) 将 32 Bits 位域 重映射至 unsigned int 型
&lt;/h4>&lt;p>先简单介绍一下联合&lt;/p>
&lt;blockquote>
&lt;p>“联合” 是一种特殊的类，也是一种构造类型的数据结构。在一个 “联合” 内可以定义多种不同的数据类型， 一个被说明为该 “联合” 类型的变量中，允许装入该 “联合” 所定义的任何一种数据，这些数据共享同一段内存，以达到节省空间的目的&lt;/p>
&lt;p>“联合” 与 “结构” 有一些相似之处。但两者有本质上的不同。在结构中各成员有各自的内存空间， 一个结构变量的总长度是各成员长度之和（空结构除外，同时不考虑边界调整）。而在 “联合” 中，各成员共享一段内存空间， 一个联合变量的长度等于各成员中最长的长度。应该说明的是， 这里所谓的共享不是指把多个成员同时装入一个联合变量内， 而是指该联合变量可被赋予任一成员值，但每次只能赋一种值， 赋入新值则冲去旧值。&lt;/p>
&lt;/blockquote>
&lt;p>我们可以声明以下联合:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">union&lt;/span> &lt;span class="nc">u_box&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">box&lt;/span> &lt;span class="n">st_box&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">ui_box&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>x86 系统中 unsigned int 和 box 都为 32 Bits, 通过该联合使 st_box 和 ui_box 共享一块内存。具体位域中哪一位与 unsigned int 哪一位相对应，取决于编译器和硬件。
利用联合将位域归零，代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">union&lt;/span> &lt;span class="nc">u_box&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ui_box&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4c-stdbitset">4.C++ std::bitset
&lt;/h2>&lt;ul>
&lt;li>尽管位字段在某些低级编程或硬件操作中很有用，但现代C++提供了一些替代方案，这些方案可能更加灵活和可移植。例如，&lt;/li>
&lt;li>可以使用 &lt;code>std::bitset&lt;/code>来访问和操作位集合，它提供了一种类型安全的方式来处理位字段，而且不依赖于特定的硬件或编译器特性 。&lt;/li>
&lt;li>此外，对于需要表示多个布尔标志或小数据字段的情况，可以使用联合体（union）和位操作来实现类似的功能，但需要手动管理位的读写操作&lt;/li>
&lt;/ul>
&lt;p>std::bitset是C++标准模板库（STL）中的一个类模板，用于表示和操作固定大小的位集合（bit set）。以下是std::bitset的一些关键特性和用法：&lt;/p>
&lt;ul>
&lt;li>类型安全：std::bitset提供了一种类型安全的方式来访问和操作位。&lt;/li>
&lt;li>固定大小：与C语言中的位字段不同，std::bitset的大小在编译时确定，并且是固定的。&lt;/li>
&lt;li>声明和初始化：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 所有位初始化为 0，除了最后一位设置为 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">b2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 位取反
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>访问位：使用operator[]来访问和修改特定的位。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 获取第 4 位的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 设置第 4 位为 1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>设置和清除位：提供set()和reset()成员函数来设置或清除特定的位。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 设置第 4 位为 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 清除第 4 位
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>翻转位：flip()成员函数用于翻转指定位的状态。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 翻转第 4 位的状态
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>统一操作：提供set()和reset()的重载版本，允许一次性设置或清除多个位。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 同时设置第 4、5、6 位
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>位操作：支持位运算符&amp;amp;（与）、|（或）、^（异或）和~（取反）。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b1&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 位与
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b1&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">b2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 位或
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b1&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">b2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 位异或
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b6&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 位取反
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>转换：可以将std::bitset对象转换为整数类型，或从整数类型构造std::bitset对象。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mb">0b11001100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>大小和索引：std::bitset的大小由模板参数指定，位的索引从0开始。&lt;/li>
&lt;li>迭代器：std::bitset不提供迭代器，因为它是一个连续的位集合。&lt;/li>
&lt;li>效率：对于固定大小的位操作，std::bitset通常比使用数组或向量（vector）更高效。&lt;/li>
&lt;/ul>
&lt;p>std::bitset是处理位字段操作的现代C++替代方案，它提供了一个简洁、安全和高效的方式来处理位级别的数据。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic bit_operation</title><link>https://wesigj.github.io/p/c-basic-bit_operation/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-bit_operation/</guid><description>&lt;h1 id="c面试基础系列-bit_operation">C++面试基础系列-bit_operation
&lt;/h1>&lt;hr>
&lt;h2 id="1bit_operation定义">1.bit_operation定义
&lt;/h2>&lt;p>位操作也叫位运算，计算机底层基于二进制计算，所以位运算的运算效率更高，速度更快。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于正数来说，其反码和原码一致。对负数来说，反码就是对除去最高符号位之外的所有二进制位取反。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于正数来说，其补码与反码一致。对负数来说，补码就是对反码做通常意义上的加一操作（含进位）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>整数在计算机中是以补码的形式储存的，这就是为什么我们要介绍原码、反码和补码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>补码的好处：&lt;/p>
&lt;ul>
&lt;li>其一是明确了整数「0」的表示（否则可以有 0000 0000 和 1000 0000 两种方式表示），&lt;/li>
&lt;li>其二是对整数的加法只需要统一的一套电路来处理即可。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mo">0001&lt;/span> &lt;span class="mo">0100&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">原码&lt;/span>&lt;span class="n">Source&lt;/span> &lt;span class="n">code&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mo">0001&lt;/span> &lt;span class="mo">0100&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">反码&lt;/span>&lt;span class="n">Inverse&lt;/span> &lt;span class="n">code&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mo">0001&lt;/span> &lt;span class="mo">0100&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">补码&lt;/span>&lt;span class="n">complement&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1001&lt;/span> &lt;span class="mo">0100&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">原码&lt;/span>&lt;span class="n">Source&lt;/span> &lt;span class="n">code&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1110&lt;/span> &lt;span class="mi">1011&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">反码&lt;/span>&lt;span class="n">Inverse&lt;/span> &lt;span class="n">code&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1110&lt;/span> &lt;span class="mi">1100&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">补码&lt;/span>&lt;span class="n">complement&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2bit_operation位运算符号类型">2.bit_operation位运算符号类型
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">符号&lt;/th>
&lt;th style="text-align: left">描述&lt;/th>
&lt;th style="text-align: left">运算规则&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&amp;amp;&lt;/td>
&lt;td style="text-align: left">与&lt;/td>
&lt;td style="text-align: left">两个位都为1时，结果才为1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">|&lt;/td>
&lt;td style="text-align: left">或&lt;/td>
&lt;td style="text-align: left">两个位都为0时，结果才为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">^&lt;/td>
&lt;td style="text-align: left">异或&lt;/td>
&lt;td style="text-align: left">两个位相同为0，相异为1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">~&lt;/td>
&lt;td style="text-align: left">取反&lt;/td>
&lt;td style="text-align: left">0变1，1变0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;laquo;&lt;/td>
&lt;td style="text-align: left">左移&lt;/td>
&lt;td style="text-align: left">各二进位全部左移若干位，高位丢弃，低位补0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;raquo;&lt;/td>
&lt;td style="text-align: left">右移&lt;/td>
&lt;td style="text-align: left">各二进位全部右移若干位，高位补0或符号位补齐&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="3位运算的常用操作总结">3.位运算的常用操作总结
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">功 能&lt;/th>
&lt;th style="text-align: left">位运算&lt;/th>
&lt;th style="text-align: left">示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>方法一：提取最右边的1出来&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;amp; (~x + 1)&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>100101000 -&amp;gt; 000001000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>方法二：提取最右边的1出来&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;amp; (-x)&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>100101000 -&amp;gt; 000001000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>从右边开始，把最后一个 $1$ 改写成 $0$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;amp; (x - 1)&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>100101000 -&amp;gt; 100100000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>去掉右边起第一个 $1$ 的左边&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;amp; (x ^ (x - 1))&lt;/code> 或 &lt;code>x &amp;amp; (-x)&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>100101000 -&amp;gt; 1000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>去掉最后一位&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;gt;&amp;gt; 1&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101101 -&amp;gt; 10110&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>取右数第 $k$ 位&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;gt;&amp;gt; (k - 1) &amp;amp; 1&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>1101101 -&amp;gt; 1, k = 4&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>取末尾 $3$ 位&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;amp; 7&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>1101101 -&amp;gt; 101&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>取末尾 $k$ 位&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;amp; 15&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>1101101 -&amp;gt; 1101, k = 4&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>只保留右边连续的 $1$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>(x ^ (x + 1)) &amp;gt;&amp;gt; 1&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>100101111 -&amp;gt; 1111&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>右数第 $k$ 位取反&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x ^ (1 &amp;lt;&amp;lt; (k - 1))&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101001 -&amp;gt; 101101, k = 3&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>在最后加一个 $0$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;lt;&amp;lt; 1&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101101 -&amp;gt; 1011010&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>在最后加一个 $1$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>(x &amp;lt;&amp;lt; 1) + 1&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101101 -&amp;gt; 1011011&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>把右数第 $k$ 位变成 $0$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;amp; ~(1 &amp;lt;&amp;lt; (k - 1))&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101101 -&amp;gt; 101001, k = 3&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>把右数第 $k$ 位变成 $1$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x | (1 &amp;lt;&amp;lt; (k - 1))&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101001 -&amp;gt; 101101, k = 3&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>把右边起第一个 $0$ 变成 $1$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x | (x + 1)&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>100101111 -&amp;gt; 100111111&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>把右边连续的 $0$ 变成 $1$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x | (x - 1)&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>11011000 -&amp;gt; 11011111&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>把右边连续的 $1$ 变成 $0$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x &amp;amp; (x + 1)&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>100101111 -&amp;gt; 100100000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>把最后一位变成 $0$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x | 1 - 1&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101101 -&amp;gt; 101100&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>把最后一位变成 $1$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x | 1&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101100 -&amp;gt; 101101&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>把末尾 $k$ 位变成 $1$&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x | (1 &amp;lt;&amp;lt; k - 1)&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101001 -&amp;gt; 101111, k = 4&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>最后一位取反&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x ^ 1&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101101 -&amp;gt; 101100&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>末尾 $k$ 位取反&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;code>x ^ (1 &amp;lt;&amp;lt; k - 1)&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>101001 -&amp;gt; 100110, k = 4&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="4位运算与宏定义">4.位运算与宏定义
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitRead(value, bit) (((value) &amp;gt;&amp;gt; (bit)) &amp;amp; 0x01)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitSet(value, bit) ((value) |= (1UL &amp;lt;&amp;lt; (bit)))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitClear(value, bit) ((value) &amp;amp;= ~(1UL &amp;lt;&amp;lt; (bit)))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitReverse(value, bit) ((value) ^= (1UL &amp;lt;&amp;lt; (bit)))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define lowByte(w) ((w) &amp;amp; 0xff)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define highByte(w) ((w) &amp;gt;&amp;gt; 8)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitRigthmostGet(value) ((value) &amp;amp; (-value))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitRigthmostClear(value) ((value) &amp;amp; (value-1))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//嵌入式中位操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#define SET_BIT(REG, BIT) ((REG) |= (BIT))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define CLEAR_BIT(REG, BIT) ((REG) &amp;amp;= ~(BIT))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define READ_BIT(REG, BIT) ((REG) &amp;amp; (BIT))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//嵌入式中寄存器操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#define CLEAR_REG(REG) ((REG) = (0x0))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define WRITE_REG(REG, VAL) ((REG) = (VAL))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define READ_REG(REG) ((REG))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MODIFY_REG(REG, CLEARMASK, SETMASK) WRITE_REG((REG), (((READ_REG(REG)) &amp;amp; (~(CLEARMASK))) | (SETMASK)))
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5二进制枚举子集">5.二进制枚举子集
&lt;/h2>&lt;p>除了上面的这些常见操作，我们经常常使用二进制数第 $1 \sim n$ 位上 $0$ 或 $1$ 的状态来表示一个由 $1 \sim n$ 组成的集合。也就是说通过二进制来枚举子集。&lt;/p>
&lt;h3 id="51二进制枚举子集简介">5.1.二进制枚举子集简介
&lt;/h3>&lt;p>先来介绍一下「子集」的概念。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>子集&lt;/strong>：如果集合 $A$ 的任意一个元素都是集合 $S$ 的元素，则称集合 $A$ 是集合 $S$ 的子集。可以记为 $A \in S$。&lt;/li>
&lt;/ul>
&lt;p>有时候我们会遇到这样的问题：给定一个集合 $S$，枚举其所有可能的子集。&lt;/p>
&lt;p>枚举子集的方法有很多，这里介绍一种简单有效的枚举方法：「二进制枚举子集算法」。&lt;/p>
&lt;p>对于一个元素个数为 $n$ 的集合 $S$ 来说，每一个位置上的元素都有选取和未选取两种状态。我们可以用数字 $1$ 来表示选取该元素，用数字 $0$ 来表示不选取该元素。&lt;/p>
&lt;p>那么我们就可以用一个长度为 $n$ 的二进制数来表示集合 $S$ 或者表示 $S$ 的子集。其中二进制的每一个二进位都对应了集合中某一个元素的选取状态。对于集合中第 $i$ 个元素来说，二进制对应位置上的 $1$ 代表该元素被选取，$0$ 代表该元素未被选取。&lt;/p>
&lt;p>举个例子，比如长度为 $5$ 的集合 $S = \lbrace 5, 4, 3, 2, 1 \rbrace$，我们可以用一个长度为 $5$ 的二进制数来表示该集合。&lt;/p>
&lt;p>比如二进制数 $11111_{(2)}$ 就表示选取集合的第 $1$ 位、第 $2$ 位、第 $3$ 位、第 $4$ 位、第 $5$ 位元素，也就是集合 $\lbrace 5, 4, 3, 2, 1 \rbrace$，即集合 $S$ 本身。如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">集合 S 中元素位置&lt;/th>
&lt;th style="text-align: center">5&lt;/th>
&lt;th style="text-align: center">4&lt;/th>
&lt;th style="text-align: center">3&lt;/th>
&lt;th style="text-align: center">2&lt;/th>
&lt;th style="text-align: center">1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">二进位对应值&lt;/td>
&lt;td style="text-align: center">1&lt;/td>
&lt;td style="text-align: center">1&lt;/td>
&lt;td style="text-align: center">1&lt;/td>
&lt;td style="text-align: center">1&lt;/td>
&lt;td style="text-align: center">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">对应选取状态&lt;/td>
&lt;td style="text-align: center">选取&lt;/td>
&lt;td style="text-align: center">选取&lt;/td>
&lt;td style="text-align: center">选取&lt;/td>
&lt;td style="text-align: center">选取&lt;/td>
&lt;td style="text-align: center">选取&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>再比如二进制数 $10101_{(2)}$ 就表示选取集合的第 $1$ 位、第 $3$ 位、第 $5$ 位元素，也就是集合 $\lbrace 5, 3, 1 \rbrace$。如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">集合 S 中元素位置&lt;/th>
&lt;th style="text-align: center">5&lt;/th>
&lt;th style="text-align: center">4&lt;/th>
&lt;th style="text-align: center">3&lt;/th>
&lt;th style="text-align: center">2&lt;/th>
&lt;th style="text-align: center">1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">二进位对应值&lt;/td>
&lt;td style="text-align: center">1&lt;/td>
&lt;td style="text-align: center">0&lt;/td>
&lt;td style="text-align: center">1&lt;/td>
&lt;td style="text-align: center">0&lt;/td>
&lt;td style="text-align: center">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">对应选取状态&lt;/td>
&lt;td style="text-align: center">选取&lt;/td>
&lt;td style="text-align: center">未选取&lt;/td>
&lt;td style="text-align: center">选取&lt;/td>
&lt;td style="text-align: center">未选取&lt;/td>
&lt;td style="text-align: center">选取&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>再比如二进制数 $01001_{(2)}$ 就表示选取集合的第 $1$ 位、第 $4$ 位元素，也就是集合 $\lbrace 4, 1 \rbrace$。如下标所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">集合 S 中元素位置&lt;/th>
&lt;th style="text-align: center">5&lt;/th>
&lt;th style="text-align: center">4&lt;/th>
&lt;th style="text-align: center">3&lt;/th>
&lt;th style="text-align: center">2&lt;/th>
&lt;th style="text-align: center">1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">二进位对应值&lt;/td>
&lt;td style="text-align: center">0&lt;/td>
&lt;td style="text-align: center">1&lt;/td>
&lt;td style="text-align: center">0&lt;/td>
&lt;td style="text-align: center">0&lt;/td>
&lt;td style="text-align: center">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">对应选取状态&lt;/td>
&lt;td style="text-align: center">未选取&lt;/td>
&lt;td style="text-align: center">选取&lt;/td>
&lt;td style="text-align: center">未选取&lt;/td>
&lt;td style="text-align: center">未选取&lt;/td>
&lt;td style="text-align: center">选取&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>通过上面的例子我们可以得到启发：对于长度为 $5$ 的集合 $S$ 来说，我们只需要从 $00000 \sim 11111$ 枚举一次（对应十进制为 $0 \sim 2^5 - 1$）即可得到长度为 $5$ 的集合 $S$ 的所有子集。&lt;/p>
&lt;p>我们将上面的例子拓展到长度为 $n$ 的集合 $S$。可以总结为：&lt;/p>
&lt;ul>
&lt;li>对于长度为 $n$ 的集合 $S$ 来说，只需要枚举 $0 \sim 2^n - 1$（共 $2^n$ 种情况），即可得到集合 $S$ 的所有子集。&lt;/li>
&lt;/ul>
&lt;h3 id="52-二进制枚举子集代码">5.2 二进制枚举子集代码
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Solution&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">subsets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 返回集合 S 的所有子集&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># n 为集合 S 的元素个数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sub_sets&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="c1"># sub_sets 用于保存所有子集&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 枚举 0 ~ 2^n - 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sub_set&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="c1"># sub_set 用于保存当前子集&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 枚举第 i 位元素&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 如果第 i 为元素对应二进位删改为 1，则表示选取该元素&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sub_set&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1"># 将选取的元素加入到子集 sub_set 中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sub_sets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sub_set&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 将子集 sub_set 加入到所有子集数组 sub_sets 中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sub_sets&lt;/span> &lt;span class="c1"># 返回所有子集&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://liam.page/2015/10/02/how-to-get-the-last-1-bit-of-an-integer/" target="_blank" rel="noopener"
>(https://liam.page/2015/10/02/how-to-get-the-last-1-bit-of-an-integer/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/itcharge/LeetCode-Py" target="_blank" rel="noopener"
>https://github.com/itcharge/LeetCode-Py&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic const</title><link>https://wesigj.github.io/p/c-basic-const/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-const/</guid><description>&lt;hr>
&lt;h1 id="c面试基础系列-const">C++面试基础系列-const
&lt;/h1>&lt;h2 id="1const含义">1.const含义
&lt;/h2>&lt;p>const表示常类型，其值不可更改。&lt;/p>
&lt;h2 id="2const作用">2.const作用
&lt;/h2>&lt;ul>
&lt;li>修饰常量&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">66&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>类型检查
&lt;ul>
&lt;li>const具有类型，并支持所有类型&lt;/li>
&lt;li>const修饰，名为常量，具备不可更改属性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>防更改，保护作用，增加程序健壮性&lt;/li>
&lt;li>节省空间，内存
&lt;ul>
&lt;li>从汇编上看，const实质是使用内存地址访问，#define是立即数&lt;/li>
&lt;li>const常量存储在内存中，只有一个内存地址，#define是预编译时，拷贝到代码中，不占用内存空间（RAM），占用ROM。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3const作用域">3.const作用域
&lt;/h2>&lt;ul>
&lt;li>const 常量具有块作用域（如果定义在函数或代码块内部）或文件作用域（如果定义在所有函数外部），遵循C语言的普通作用域规则。&lt;/li>
&lt;li>#define 定义的宏在预处理阶段展开，没有作用域的概念，除非使用 #undef 取消定义。&lt;/li>
&lt;/ul>
&lt;h2 id="4修饰常量">4.修饰常量
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">66&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//ERROR can not change const constant
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5const与指针">5.const与指针
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//指向const常类型的普通指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//同上
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//指向int类型的常指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//指向const常类型的常指针
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有趣的解析方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//p is a pointer to const char
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//同上
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//p is a const pointer to char
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//p is a const pointer to const char
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="51指向常量的指针">5.1.指向常量的指针
&lt;/h3>&lt;ul>
&lt;li>指向常量的指针，其中常量不可修改&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># *p=10; &lt;/span>&lt;span class="c1">//error 不能修改常量
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// int *p = &amp;amp;a; //error 常量必须用常指针指向
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>允许把非const对象的地址赋给指向const对象的指针&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="52常指针">5.2.常指针
&lt;/h3>&lt;p>const指针定义时，必须初始化，const指针不可变，但指向的值可变。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">66&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">88&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// p = &amp;amp;b; //error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>const指针不能指向常量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//&amp;#34;const int *&amp;#34; 类型的值不能用于初始化 &amp;#34;int *const&amp;#34; 类型的实体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// int * const p=&amp;amp;a; // error! can not const int* -&amp;gt; int*const
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="53指向常量的常指针">5.3.指向常量的常指针
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="6const与函数">6.const与函数
&lt;/h2>&lt;ul>
&lt;li>const修饰函数返回值
&lt;ul>
&lt;li>
&lt;p>const int fun();
函数返回const常量，但是函数返回后通常会拷贝。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>const int *fun();
函数返回指向常量的指针，指针指向的内容不能更改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>int *const fun();
指针不能更改。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>const修饰函数参数
&lt;ul>
&lt;li>函数参数或函数参数指针在函数内不能更改&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">fun1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//参数不可变
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">fun2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//指针不能变
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//防止常类型src被更改
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主要功能：
保护参数和指针不被更改。
保护常类型不被更改。&lt;/p>
&lt;ul>
&lt;li>CPP中引用，增加效率，防止更改&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//T为模板，任意类型
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>cpp，增加了引用(reference)&lt;/strong>：&lt;/p>
&lt;blockquote>
&lt;p>C语言本身没有引用（reference）的概念，引用是C++等其他编程语言中的一个特性。在C语言中，参数传递通常通过值传递（pass by value）或指针传递（pass by pointer）实现。
如果T为基础类型，理论来说，基础数据类型的参数不存在构造、析构的过程，而复制也非常快，“值传递”和“引用传递”的效率几乎相当。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>面试问题&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果函数需要传入一个指针，是否需要为该指针加上const，把const加在指针不同的位置有什么区别?&lt;/li>
&lt;li>如果写的函数需要传入的参数是一个复杂类型的实例，传入值参数或者引用参数有什么区别，什么时候需要为传入的引用参数加上const?&lt;/li>
&lt;/ul>
&lt;h2 id="7const与类">7.const与类
&lt;/h2>&lt;ul>
&lt;li>在类中，任何不会修改数据成员的函数都应该声明为const类型。如果在编写const成员函数时，不慎修改 数据成员，或者调用了其它非const成员函数，编译器将指出错误，这无疑会提高程序的健壮性。
例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">normalFunction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 可以修改成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">constantFunction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 不能修改任何成员变量，除非它们被声明为 mutable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>在这个示例中，normalFunction 是一个非常成员函数，可以修改对象的状态；而 constantFunction 是一个常成员函数，承诺不修改对象的状态，并且可以被用于操作常量对象。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;ul>
&lt;li>使用const关键字进行修饰的成员函数，称为常成员函数。&lt;del>只有常成员函数才有资格操作常量或常对象&lt;/del>，没有使用const关键字进行说明的成员函数不能用来操作常对象。&lt;/li>
&lt;li>const对象只能访问const成员函数,而非const对象可以访问任意的成员函数,包括const成员函数.&lt;/li>
&lt;/ul>
&lt;p>简单来说&lt;/p>
&lt;ul>
&lt;li>常对象才能调用常函数和常量，不可调用非常函数或变量。&lt;/li>
&lt;li>常函数不能调用，修改任何成员函数，成员变量，除非它们被声明为 mutable&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 非const成员函数，可以修改成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">modifyValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">newValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newValue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Value modified to: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// const成员函数，不能修改成员变量，但可以读取
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">displayValue&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Current value: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">MyClass&lt;/span> &lt;span class="n">constObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 创建一个const对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 下面的调用是允许的，因为displayValue()是一个const成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">constObject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">displayValue&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 下面的调用将导致编译错误，因为modifyValue()不是一个const成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// constObject.modifyValue(20); // 错误：不能在const对象上调用non-const成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建一个非const对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">MyClass&lt;/span> &lt;span class="n">nonConstObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 可以调用非const成员函数来修改非const对象的状态
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">nonConstObject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">modifyValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 正确调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 也可以调用const成员函数来读取非const对象的状态
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">nonConstObject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">displayValue&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 正确调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>从中可以看出，const对象只能调用const函数和const常量，&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;ul>
&lt;li>于类中的const成员变量必须通过初始化列表进行初始化，如下所示：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Apple&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">people&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Apple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">apple_number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Apple&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Apple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">apple_number&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="8const与static">8.const与static
&lt;/h2>&lt;h3 id="81将常量定义与static结合">8.1.将常量定义与static结合
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">apple_number&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="82在类外面初始化">8.2.在类外面初始化
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">Apple&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">apple_number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用c++11进行编译，可以在定义出初始化：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">apple_number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 或者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">apple_number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这两种都在c++11中支持！&lt;/p>
&lt;p>编译的时候加上&lt;code>-std=c++11&lt;/code>即可！&lt;/p>
&lt;p>在C++中，static静态成员变量不能在类的内部初始化。在类的内部只是声明，定义必须在类定义体的外部，通常在类的实现文件中初始化。&lt;/p>
&lt;p>在类中声明：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">ap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在类实现文件中使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">Apple&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">666&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于此项，c++11不能进行声明并初始化，也就是上述使用方法。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=wechat.jpg width=60% /></description></item><item><title>C++ basic decltype</title><link>https://wesigj.github.io/p/c-basic-decltype/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-decltype/</guid><description>&lt;h1 id="c面试基础系列-decltype">C++面试基础系列-decltype
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>在C++中，&lt;code>decltype&lt;/code> 是一个类型推导关键字，它用于确定表达式的类型。&lt;code>decltype&lt;/code> 可以在编译时确定一个变量或表达式的类型，而不需要显式地声明类型。这在模板编程和泛型编程中非常有用，尤其是在C++11及以后的版本中。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1decltype关键点">1.decltype关键点
&lt;/h2>&lt;p>以下是 &lt;code>decltype&lt;/code> 的一些关键点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>基本用法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>decltype&lt;/code> 的基本语法是 &lt;code>decltype(表达式)&lt;/code>，它返回表达式的类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>引用修饰符&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果表达式是一个左值，&lt;code>decltype&lt;/code> 将返回带有引用修饰符的类型（例如 &lt;code>int&amp;amp;&lt;/code>）。如果表达式是一个右值，返回的类型将不包含引用修饰符（例如 &lt;code>int&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数组和函数类型&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>decltype&lt;/code> 不会从数组或函数类型中推导出 &lt;code>pointer&lt;/code> 类型，而是保持原始类型（例如 &lt;code>int[]&lt;/code> 或 &lt;code>void()&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>结合 &lt;code>auto&lt;/code> 关键字&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>decltype&lt;/code> 经常与 &lt;code>auto&lt;/code> 关键字结合使用，以实现类型推导。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板参数推导&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在模板参数推导中，&lt;code>decltype&lt;/code> 可以用于推导出模板参数的类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>lambda 表达式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对于 lambda 表达式，&lt;code>decltype&lt;/code> 推导出的类型是 &lt;code>std::function&lt;/code> 的实例类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="示例代码">示例代码
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;functional&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;typeinfo&amp;gt;&lt;/span>&lt;span class="cp"> &lt;/span>&lt;span class="c1">// 需要包含这个头文件来使用 typeid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">exampleFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Type of i: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 注意：这里不需要使用 decltype，因为 i 已经是 int&amp;amp; 类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">3.14&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Type of a: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// decltype(a) 是不必要的，因为 a 已经是一个 int 类型的变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 使用 auto 推导 x 的类型为 int
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Type of x: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 移除 exampleFunction 的调用，因为它没有返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// auto y = exampleFunction(a); // 这行是错误的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 代码中 auto y = exampleFunction(a); 这一行存在问题，因为 exampleFunction 函数没有返回值，所以尝试将一个没有返回值的函数调用赋值给变量 y 是不正确的。auto 关键字在这里会推导出 void 类型，因为 exampleFunction 的返回类型是 void。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// decltype 推导 lambda 表达式的类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">lambda&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[](&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Type of lambda: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lambda&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>在这个示例中，&lt;code>decltype&lt;/code> 用于推导不同表达式的类型。注意，&lt;code>typeid&lt;/code> 用于输出类型信息，它需要包含 &lt;code>&amp;lt;typeinfo&amp;gt;&lt;/code> 头文件。&lt;code>decltype&lt;/code> 在这里用于推导变量 &lt;code>a&lt;/code> 的类型，以及 &lt;code>auto&lt;/code> 变量 &lt;code>x&lt;/code> 的类型。对于 &lt;code>exampleFunction&lt;/code> 函数，&lt;code>decltype&lt;/code> 推导了函数参数 &lt;code>i&lt;/code> 的类型。最后，对于 lambda 表达式，&lt;code>decltype&lt;/code> 推导出了一个 &lt;code>std::function&lt;/code> 类型。
&lt;br>
请注意，typeid(lambda).name() 可能不会返回一个有用的字符串，因为 lambda 表达式产生的函数对象类型通常不是多态类型，name() 方法对于非多态类型可能返回空指针。如果你想要打印 lambda 表达式的类型，你可能需要使用其他方法，例如直接使用 std::cout 来输出类型信息。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>decltype&lt;/code> 是C++11引入的一个非常有用的关键字，它简化了类型声明，并在模板编程中提供了极大的灵活性。&lt;/p>
&lt;h2 id="2c类型推导">2.C++类型推导
&lt;/h2>&lt;p>C++ 类型推导是一个强大的特性，它允许编译器自动确定变量或表达式的类型，而不需要显式地声明类型。这在编写模板代码、使用泛型编程、以及简化代码时非常有用。以下是一些C++中类型推导的关键点和机制：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>自动类型推导（Auto）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>auto&lt;/code> 关键字可以让编译器根据初始化表达式推导出变量的类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>decltype&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>decltype&lt;/code> 关键字用于推导出某个表达式的类型，但不会对表达式结果进行值的推导。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板参数推导&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当使用模板函数或模板类时，编译器可以推导出模板参数的类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>构造函数的类型推导&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>C++11 引入了构造函数的成员初始化列表，允许从构造函数参数推导出成员变量的类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>类型别名（Type Aliases）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>using&lt;/code> 或 &lt;code>typedef&lt;/code> 声明类型别名，可以简化复杂类型名的书写。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>类型特征（Type Traits）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;type_traits&amp;gt;&lt;/code> 头文件提供了一系列编译时检查和修改类型的工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>C++14 泛型 lambda 表达式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在 C++14 中，lambda 表达式的捕获列表可以使用 &lt;code>auto&lt;/code> 来自动推导捕获变量的类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>C++17 结构化绑定&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>结构化绑定允许从元组、pair 或数组中提取多个值，并自动推导出这些值的类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>C++17 if 语句和 switch 语句中的初始化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在 C++17 中，可以在 if 或 switch 语句中初始化变量，并自动推导其类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>C++20 概念（Concepts）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>概念允许定义类型必须满足的条件，这有助于在模板编程中进行更精确的类型推导。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>C++20 模块（Modules）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>模块可以帮助简化包含和类型声明，间接影响类型推导。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>C++20 &lt;code>consteval&lt;/code> 关键字&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>允许声明一个函数总是被编译器在编译时调用，有助于编译时的类型推导。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>C++20 &lt;code>requires&lt;/code> 子句&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在模板定义中使用 &lt;code>requires&lt;/code> 子句可以指定模板参数的类型约束和概念要求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>类型推导使得C++代码更加简洁和灵活，特别是在模板编程中。它减少了代码冗余，提高了代码的可读性和可维护性。然而，过度依赖类型推导有时也可能导致代码难以理解，因此在使用时需要权衡其利弊。&lt;/p>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic double_colon(::)</title><link>https://wesigj.github.io/p/c-basic-double_colon/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-double_colon/</guid><description>&lt;h1 id="c面试基础系列-double_colon">C++面试基础系列-double_colon(::)
&lt;/h1>&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>全局作用域符（::name）：用于类型名称（类、类成员、成员函数、变量等）前，表示作用域为全局命名空间&lt;/li>
&lt;li>类作用域符（class::name）：用于表示指定类型的作用域范围是具体某个类的&lt;/li>
&lt;li>命名空间作用域符（namespace::name）:用于表示指定类型的作用域范围是具体某个命名空间的&lt;/li>
&lt;/ul>
&lt;h2 id="1double_colon关键点">1.double_colon(::)关键点
&lt;/h2>&lt;p>在C和C++中，双冒号 :: 被称为作用域解析运算符（scope resolution operator），但它在两种语言中的使用和含义略有不同：&lt;/p>
&lt;ul>
&lt;li>C语言中的::
&lt;ul>
&lt;li>在C语言中，:: 几乎不被使用，因为它主要用于指定全局作用域，而C语言中大部分变量和函数默认就是全局作用域的。不过，:: 可以用来明确指出全局变量或函数，尤其是在与静态成员函数一起使用时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>C++中的::
&lt;ul>
&lt;li>在C++中，:: 的使用要普遍得多，因为它用于解决作用域的问题，尤其是在类（class）和命名空间（namespace）中。&lt;/li>
&lt;li>用于访问类的静态成员变量或静态成员函数：ClassName::staticMember。&lt;/li>
&lt;li>用于访问命名空间中的成员：NamespaceName::member。&lt;/li>
&lt;li>用于在类内部访问全局变量或函数，避免与局部变量或成员变量的名称冲突：::globalVariable。&lt;/li>
&lt;li>用于在派生类中访问基类的成员：BaseClassName::member。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>全局作用域：
&lt;ul>
&lt;li>在C++中，如果需要明确指出某个实体属于全局作用域，可以使用 ::。例如，在一个函数内部，如果你想要访问全局变量，可以使用 ::globalVariable。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>类型转换：
&lt;ul>
&lt;li>在C++中，:: 也用于类型转换，称为静态类型转换或类类型转换，例如 Type::pointer。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>模板参数：
&lt;ul>
&lt;li>在C++模板编程中，:: 用于指定模板参数的命名空间或类作用域，例如 std::vector&lt;code>&amp;lt;int&amp;gt;&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>匿名空间：
&lt;ul>
&lt;li>在C++中，:: 还可以用于匿名命名空间，这是一种特殊的命名空间，它提供了文件内唯一的作用域。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>C++11中的统一初始化：&lt;/li>
&lt;li>从C++11开始，:: 不再是统一初始化（Uniform Initialization）的一部分。统一初始化使用花括号 {} 而不是 ::。&lt;/li>
&lt;/ul>
&lt;p>总结来说，:: 在C++中是一个关键的运算符，用于处理作用域相关的问题，而在C语言中，由于作用域规则的不同，:: 的使用相对较少。&lt;/p>
&lt;h2 id="2double_colon使用示例">2.double_colon(::)使用示例
&lt;/h2>&lt;p>在C++中，双冒号 :: 是作用域解析运算符（scope resolution operator），用于明确指出我们访问的是特定作用域内的实体。以下是 :: 的一些主要用途和示例：&lt;/p>
&lt;h3 id="21访问类成员">2.1.访问类成员
&lt;/h3>&lt;p>使用 :: 来访问类的成员变量和成员函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">memberVar&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">memberFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyClass&lt;/span> &lt;span class="n">myObj&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">myObj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">memberVar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 访问成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">myObj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">memberFunc&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 访问成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="22静态成员访问">2.2.静态成员访问
&lt;/h3>&lt;p>使用 :: 来访问类的静态成员，因为静态成员不属于类的任何特定对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">staticMember&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">staticMember&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 定义静态成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">staticMember&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 访问静态成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="23命名空间中的实体">2.3.命名空间中的实体
&lt;/h3>&lt;p>使用 :: 来访问命名空间中的实体。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">MyNamespace&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">myVar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">MyNamespace&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">myVar&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 访问命名空间中的变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="24全局变量和函数">2.4.全局变量和函数
&lt;/h3>&lt;p>在局部作用域中，使用 :: 来访问全局变量和函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">globalVar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">globalFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">localVar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">::&lt;/span>&lt;span class="n">globalVar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">localVar&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 访问全局变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="n">globalFunc&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用全局函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="25友元类">2.5.友元类
&lt;/h3>&lt;p>当一个类声明了另一个类为友元时，可以使用 :: 来访问友元类的私有或保护成员。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">FriendClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">friendFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">accessFriend&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FriendClass&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">friendFunc&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 访问友元类的成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="26类型转换">2.6.类型转换
&lt;/h3>&lt;p>:: 也用于静态类型转换，即 static_cast。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">basePtr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Derived&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">derivedPtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Derived&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basePtr&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 类型转换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">derivedPtr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="27枚举类成员访问">2.7.枚举类成员访问
&lt;/h3>&lt;p>当枚举被定义在类中时，使用 :: 来访问枚举成员。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">enum&lt;/span> &lt;span class="nc">MyEnum&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">C&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 访问枚举成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="28模板参数">2.8.模板参数
&lt;/h3>&lt;p>使用 :: 来指定模板参数的命名空间或类作用域。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">myFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">myFunc&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 使用 :: 指定模板参数的命名空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>:: 是C++中一个非常有用的运算符，它帮助我们明确地访问作用域内的实体，提高代码的可读性和清晰度。&lt;/p>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic enum</title><link>https://wesigj.github.io/p/c-basic-enum/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-enum/</guid><description>&lt;h1 id="c面试基础系列-enum">C++面试基础系列-enum
&lt;/h1>&lt;h2 id="1enum关键点">1.enum关键点
&lt;/h2>&lt;p>enum（枚举）是一种数据类型，在C和C++语言中用来定义命名的整数值集合。枚举为一组相关的常量提供了一种更加清晰和易于理解的表示方式。&lt;/p>
&lt;p>以下是enum的一些关键点：&lt;/p>
&lt;h3 id="11定义枚举类型">1.1.定义枚举类型
&lt;/h3>&lt;p>使用enum关键字定义枚举类型，可以指定底层的整数类型（如int、unsigned int等），如果不指定，默认为`int。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="nc">Color&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">RED&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GREEN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BLUE&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="12枚举成员">1.2.枚举成员
&lt;/h3>&lt;p>枚举成员是枚举类型的值，它们在定义时自动从0开始编号，每个成员依次加1。&lt;/p>
&lt;h3 id="13指定底层类型">1.3.指定底层类型
&lt;/h3>&lt;p>可以为枚举成员指定底层类型，改变它们的存储大小和范围。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="nc">Color&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">RED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GREEN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BLUE&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="14前向声明">1.4.前向声明
&lt;/h3>&lt;p>在C++中，可以对枚举类型进行前向声明，但需要在后续的定义中指定其成员。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// C++前向声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">Color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ... 后续定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">Color&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">RED&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GREEN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BLUE&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="15作用域">1.5.作用域
&lt;/h3>&lt;p>在C++中，枚举类型具有作用域，其成员名称在枚举类型的作用域内有效。C语言中的枚举成员是全局的，除非使用enum { member1, member2, &amp;hellip; }语法。&lt;/p>
&lt;h3 id="16类型安全">1.6.类型安全
&lt;/h3>&lt;p>枚举提供了类型安全，不同枚举类型的值不能互相赋值或比较，除非显式地进行类型转换。&lt;/p>
&lt;h3 id="17与整数的兼容性">1.7.与整数的兼容性
&lt;/h3>&lt;p>枚举类型可以与整数类型进行比较和赋值，但这样做可能会破坏类型安全。&lt;/p>
&lt;h3 id="18迭代器">1.8.迭代器
&lt;/h3>&lt;p>C++11标准引入了基于范围的for循环，可以方便地遍历枚举类型的所有值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Color&lt;/span> &lt;span class="nl">c&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">RED&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GREEN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BLUE&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用c
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="19强类型枚举c11">1.9.强类型枚举（C++11）
&lt;/h3>&lt;p>C++11引入了强类型枚举，使用enum class关键字定义，增强了类型安全。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Color&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">RED&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GREEN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BLUE&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="110位字段枚举">1.10.位字段枚举
&lt;/h3>&lt;p>枚举类型可以用于定义位字段，表示一组标志位的组合。&lt;/p>
&lt;h3 id="111枚举作为函数参数和返回类型">1.11.枚举作为函数参数和返回类型
&lt;/h3>&lt;p>枚举类型可以作为函数的参数和返回类型，提供清晰的函数接口。&lt;/p>
&lt;p>枚举是一种非常有用的语言特性，它提高了代码的可读性和可维护性，特别是在处理一组相关的常量时。在嵌入式编程、状态机实现、配置选项等方面都有广泛应用。&lt;/p>
&lt;h2 id="2enum与namespace">2.enum与namespace
&lt;/h2>&lt;ul>
&lt;li>解决作用域不受限带来的命名冲突问题
&lt;ul>
&lt;li>给枚举变量命名时加前缀&lt;/li>
&lt;li>C 程序中，为了一致性我们会把所有常量统一加上前缀。但是这样定义枚举变量的代码就显得累赘。&lt;/li>
&lt;li>C 程序中可能不得不这样做。不过 C++ 程序员恐怕都不喜欢这种方法。替代方案是命名空间:&lt;/li>
&lt;li>下面代码可以用 &lt;code>Color::Type c = Color::RED;&lt;/code> 来定义新的枚举变量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">Color&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">enum&lt;/span> &lt;span class="nc">Type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">YELLOW&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BLUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过，因为命名空间是可以随后被扩充内容的，所以它提供的作用域封闭性不高。在大项目中，还是有可能不同人给不同的东西起同样的枚举类型名。&lt;/p>
&lt;h2 id="3enum与struct">3.enum与struct
&lt;/h2>&lt;ul>
&lt;li>解决作用域不受限带来的命名冲突问题
&lt;ul>
&lt;li>更“有效”的办法是用一个类或结构体来限定其作用域，例如：定义新变量的方法和上面命名空间的相同。&lt;/li>
&lt;li>不过这样就不用担心类在别处被修改内容。&lt;/li>
&lt;li>这里用结构体而非类，是因为本身希望这些常量可以公开访问。（struct默认位public类型的，class默认是private）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Color1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">enum&lt;/span> &lt;span class="nc">Type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">YELLOW&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BLUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4c11-的枚举类enum-class">4.C++11 的枚举类（enum class）
&lt;/h2>&lt;p>在C++11中，&lt;code>enum class&lt;/code>（强类型枚举）提供了相比传统 &lt;code>enum&lt;/code>类型更多的优势，主要表现在以下几个方面：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>类型安全性&lt;/strong> ：&lt;code>enum class&lt;/code>提供了更强的类型检查，枚举成员不能隐式转换为整数类型，这避免了隐式类型转换错误和潜在的bug。例如，在 &lt;code>enum class&lt;/code>中声明的枚举值，它们的作用域被限定在其类型内部，不同 &lt;code>enum class&lt;/code>中的同名枚举值不会引起冲突 。&lt;/li>
&lt;li>&lt;strong>底层类型指定&lt;/strong> ：&lt;code>enum class&lt;/code>允许明确指定枚举成员的底层整数类型，如 &lt;code>uint8_t&lt;/code>、&lt;code>int16_t&lt;/code>等，提供了更多的灵活性和精确性，允许开发者根据需要选择最合适的整数类型来存储枚举成员，优化内存使用和性能 。&lt;/li>
&lt;li>&lt;strong>自动枚举值&lt;/strong> ：C++11允许 &lt;code>enum class&lt;/code>成员自动从0开始赋值，并依次递增，简化了枚举类型的声明，减少了代码冗余 。&lt;/li>
&lt;li>&lt;strong>枚举类型字面量&lt;/strong> ：&lt;code>enum class&lt;/code>的成员可以作为编译时常量使用，提高了代码的表达能力和可读性，使得枚举类型可以在模板元编程和编译时决策中发挥作用 。&lt;/li>
&lt;li>&lt;strong>基于 &lt;code>std::underlying_type&lt;/code>的范围&lt;/strong> ：C++11通过提供 &lt;code>std::underlying_type&lt;/code>模板，使得对枚举类型的值进行迭代和比较变得更加容易，提供了更多的灵活性 。&lt;/li>
&lt;li>&lt;strong>枚举类型的比较操作&lt;/strong> ：C++11标准库提供了对枚举类型的比较操作的支持，允许枚举类型的值与布尔值或其他枚举类型的值进行比较，提高了枚举类型的实用性 。&lt;/li>
&lt;/ol>
&lt;p>强类型枚举的引入主要是为了提高代码的安全性、清晰性、易用性和性能，这些改进反映了C++社区对于编写更安全、更高效和更易于理解的代码的持续追求 。&lt;/p>
&lt;ul>
&lt;li>划重点
&lt;ul>
&lt;li>新的enum的作用域不在是全局的&lt;/li>
&lt;li>不能隐式转换成其他类型&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @brief C++11的枚举类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 下面等价于enum class Color2:int
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Color2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">YELLOW&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BLUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Color2&lt;/span> &lt;span class="n">c2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Color2&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">RED&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//必须转！
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>可以指定用特定的类型来存储enum&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Color3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 前向声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Color3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kt">char&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sc">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BLUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">c3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Color3&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">RED&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5class中enum常量">5.class中enum常量
&lt;/h2>&lt;p>类的构造函数的初始化列表中进行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SIZE&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">SIZE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 构造函数的定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">A&lt;/span> &lt;span class="nf">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 对象 a 的 SIZE 值为 100
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">A&lt;/span> &lt;span class="nf">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 对象 b 的 SIZE 值为 200
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>怎样才能建立在整个类中都恒定的常量呢？&lt;/p>
&lt;p>类中的枚举常量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Day&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">typedef&lt;/span> &lt;span class="k">enum&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Monday&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Tuesday&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Wednesday&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Thursday&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Friday&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Saturday&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Sunday&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="n">DayType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//访问的时候通过，Day::Monday或者Person::Tuesday来进行访问。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>枚举常量不会占用对象的存储空间，它们在编译时被全部求值。&lt;/p>
&lt;p>枚举常量的缺点是：它的隐含数据类型是整数，其最大值有限，且不能表示浮点。&lt;/p>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic explicit</title><link>https://wesigj.github.io/p/c-basic-explicit/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-explicit/</guid><description>&lt;h1 id="c面试基础系列-explicit">C++面试基础系列-explicit
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;h2 id="1explicit">1.explicit
&lt;/h2>&lt;p>在 C++ 中，&amp;ldquo;explicit&amp;rdquo; 关键字用于类构造函数，以防止隐式类型转换和复制初始化。使用 &lt;code>explicit&lt;/code> 可以提高代码的安全性，因为它要求在转换类型时必须明确地进行。下面是一些关于 &lt;code>explicit&lt;/code> 的使用场景和示例：&lt;/p>
&lt;h3 id="11使用场景">1.1.使用场景
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>防止隐式转换&lt;/strong>：当你希望类的构造函数只用于显示转换，而不是由编译器隐式执行时。&lt;/li>
&lt;li>&lt;strong>避免歧义&lt;/strong>：在多构造函数的情况下，&lt;code>explicit&lt;/code> 可以避免编译器在选择调用哪个构造函数时产生歧义。&lt;/li>
&lt;/ol>
&lt;h3 id="12语法">1.2.语法
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">explicit&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构造函数实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他成员和方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13示例">1.3.示例
&lt;/h3>&lt;h4 id="131防止隐式类型转换">1.3.1.防止隐式类型转换
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">NumericString&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">explicit&lt;/span> &lt;span class="n">NumericString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 初始化逻辑，可能包括检查字符串是否只包含数字
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NumericString&lt;/span> &lt;span class="n">ns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 正确，显示转换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// NumericString ns2 = &amp;#34;123&amp;#34;; // 错误，因为构造函数是 explicit 的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="132构造函数重载解析">1.3.2.构造函数重载解析
&lt;/h4>&lt;p>如果有多个构造函数，&lt;code>explicit&lt;/code> 可以帮助编译器确定应该调用哪个构造函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Date&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">day&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">month&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">year&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// 普通构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">explicit&lt;/span> &lt;span class="nf">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">dateString&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// 显式构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Date&lt;/span> &lt;span class="n">d1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2023&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调用第一个构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Date&lt;/span> &lt;span class="n">d2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;2023-01-01&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调用第二个构造函数，需要显示转换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Date d3 = &amp;#34;2023-01-01&amp;#34;; // 错误，因为第二个构造函数是 explicit 的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="14注意事项">1.4.注意事项
&lt;/h3>&lt;ul>
&lt;li>默认情况下，所有构造函数都是隐式的。添加 &lt;code>explicit&lt;/code> 关键字后，构造函数就不再参与隐式转换。&lt;/li>
&lt;li>&lt;code>explicit&lt;/code> 只能用在单个参数的构造函数上。如果你需要调用一个多参数的构造函数，可以定义一个转换操作符或工厂函数。&lt;/li>
&lt;li>在 C++11 及以后的版本中，列表初始化可以绕过 &lt;code>explicit&lt;/code> 的限制，因此要谨慎使用。&lt;/li>
&lt;/ul>
&lt;p>通过使用 &lt;code>explicit&lt;/code>，你可以在设计类时提供额外的安全性，防止错误的类型转换和潜在的 bug。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic extern</title><link>https://wesigj.github.io/p/c-basic-extern/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-extern/</guid><description>&lt;h1 id="c面试基础系列-extern">C++面试基础系列-extern
&lt;/h1>&lt;h2 id="1extern关键点">1.extern关键点
&lt;/h2>&lt;p>在C和C++中，&lt;code>extern&lt;/code>是一个关键字，用于声明一个变量或函数是在其他文件或编译单元中定义的，即它具有外部链接。以下是 &lt;code>extern&lt;/code>的一些关键点：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>外部链接&lt;/strong> ：&lt;code>extern&lt;/code>关键字声明的变量或函数具有外部链接，这意味着它们可以在多个文件中访问。&lt;/li>
&lt;li>&lt;strong>声明而非定义&lt;/strong> ：使用 &lt;code>extern&lt;/code>是声明一个已经在其他地方定义的变量或函数，而不是定义它们。&lt;/li>
&lt;li>&lt;strong>多文件共享&lt;/strong> ：当你想在多个文件中使用同一个全局变量或函数时，可以在其他文件中使用 &lt;code>extern&lt;/code>来声明它们。&lt;/li>
&lt;li>&lt;strong>定义位置&lt;/strong> ：被 &lt;code>extern&lt;/code>声明的变量或函数必须在某个文件中有确切的定义（带有类型和存储期的声明）。&lt;/li>
&lt;li>&lt;strong>头文件中使用&lt;/strong> ：&lt;code>extern&lt;/code>经常与头文件一起使用，允许在多个源文件中包含同一个头文件，而不会因多重包含而导致变量或函数被多次定义。&lt;/li>
&lt;li>&lt;strong>C++中的使用&lt;/strong> ：在C++中，&lt;code>extern&lt;/code>也可以用于声明C语言编写的库中的变量和函数，因为它可以用来指定C语言的外部链接。&lt;/li>
&lt;li>&lt;strong>存储期&lt;/strong> ：&lt;code>extern&lt;/code>声明的变量具有静态存储期，即它们在程序的整个运行期间都存在。&lt;/li>
&lt;li>&lt;strong>作用域&lt;/strong> ：&lt;code>extern&lt;/code>声明的变量或函数在声明它们的文件中是可见的，但它们的作用域限制在声明它们的块内，除非它们在全局作用域中声明。&lt;/li>
&lt;li>&lt;strong>初始化&lt;/strong> ：&lt;code>extern&lt;/code>声明的变量不能在声明时初始化，因为它们已经在其他地方定义并初始化了。&lt;/li>
&lt;li>示例：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// file1.c
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">globalVar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 定义并初始化一个全局变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// file2.c
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">globalVar&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 声明 globalVar，它在 file1.c 中定义
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上述示例中，&lt;code>globalVar&lt;/code>在 &lt;code>file1.c&lt;/code>中定义并初始化。在 &lt;code>file2.c&lt;/code>中，使用 &lt;code>extern&lt;/code>关键字来声明 &lt;code>globalVar&lt;/code>，表示它在其他地方定义，这样 &lt;code>file2.c&lt;/code>就可以访问 &lt;code>globalVar&lt;/code>了。&lt;/p>
&lt;p>&lt;code>extern&lt;/code>是C和C++中实现不同文件间全局变量和函数共享的重要机制。&lt;/p>
&lt;h2 id="2c-extern-c">2.C++ extern &lt;code>&amp;quot;C&amp;quot;&lt;/code>
&lt;/h2>&lt;p>在C++中使用C语言编写的库时，&lt;code>extern &amp;quot;C&amp;quot;&lt;/code>（注意C是大写的）是一个特殊的声明，它告诉C++编译器按照C语言的规则来处理被声明的实体。这主要是因为C++支持函数重载，而C语言不支持。以下是 &lt;code>extern &amp;quot;C&amp;quot;&lt;/code>的一些特别作用：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>语言链接指示&lt;/strong> ：&lt;code>extern &amp;quot;C&amp;quot;&lt;/code>指示编译器，被声明的函数或变量遵循C语言的链接规则，而不是C++的命名规则（Name Mangling）。&lt;/li>
&lt;li>&lt;strong>避免名称重整（Name Mangling）&lt;/strong> ：C++编译器会对函数名进行编码（即名称重整），以支持函数重载。而C语言没有函数重载的概念，其函数名在编译后不会改变。使用 &lt;code>extern &amp;quot;C&amp;quot;&lt;/code>可以防止C++编译器对C函数名进行重整。&lt;/li>
&lt;li>&lt;strong>兼容C库&lt;/strong> ：当需要链接C语言编写的库时，使用 &lt;code>extern &amp;quot;C&amp;quot;&lt;/code>可以确保C++代码能够正确调用C库中的函数和变量。&lt;/li>
&lt;li>&lt;strong>C++和C的互操作&lt;/strong> ：&lt;code>extern &amp;quot;C&amp;quot;&lt;/code>是C++代码与C代码进行互操作的一种方式，使得C++程序能够直接调用C语言的函数和访问全局变量。&lt;/li>
&lt;li>&lt;strong>头文件包含&lt;/strong> ：在使用C语言库的头文件时，通常也会用 &lt;code>extern &amp;quot;C&amp;quot;&lt;/code>将整个头文件的内容包裹起来，以确保所有引用的函数和变量都遵循C语言的链接规则。&lt;/li>
&lt;li>&lt;strong>全局作用域&lt;/strong> ：&lt;code>extern &amp;quot;C&amp;quot;&lt;/code>声明通常放在全局作用域中，以确保整个程序中的C++代码都遵循相同的链接规则。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>extern &amp;quot;C&amp;quot;&lt;/code>是C++中处理C语言库的重要工具，它确保了C++代码能够与C语言代码无缝集成和互操作。&lt;/p>
&lt;h2 id="3使用示例">3.使用示例
&lt;/h2>&lt;ul>
&lt;li>C++中使用 &lt;strong>extern &amp;ldquo;C&amp;rdquo;&lt;/strong> 示例 ：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 假设有一个C语言写的库函数，声明如下：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// int CFunction(); // C语言中的函数声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在C++中调用C语言写的库函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">CFunction&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 使用extern &amp;#34;C&amp;#34;声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CFunction&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 正确调用C函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>C并不能直接调用C++库函数。&lt;/li>
&lt;/ul>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic Features</title><link>https://wesigj.github.io/p/c-basic-features/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-features/</guid><description>&lt;h1 id="c面试基础系列-cfeatures">C++面试基础系列-C++Features
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;h2 id="1cfeatures">1.C++Features
&lt;/h2>&lt;ul>
&lt;li>C++与C的区别在于C++拥有更多的新特性&lt;/li>
&lt;li>&amp;ldquo;Explicit C++&amp;quot;（显式C++）通常指的是在C++编程中明确地、直接地使用C++的特性和语法，而不是隐式地或通过兼容C的方式。这通常意味着充分利用C++的面向对象编程（OOP）特性，例如
&lt;ul>
&lt;li>类（classes）、&lt;/li>
&lt;li>对象（objects）、&lt;/li>
&lt;li>继承（inheritance）、&lt;/li>
&lt;li>多态（polymorphism）、&lt;/li>
&lt;li>抽象（abstraction）、&lt;/li>
&lt;li>封装（encapsulation）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>以下是一些显式C++编程的关键概念和实践：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>类和对象&lt;/strong>：使用类来创建复杂的数据结构，这些结构可以包含数据成员和成员函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">privateData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">privateData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">privateData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">privateData&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>构造函数和析构函数&lt;/strong>：显式地定义构造函数来初始化对象，定义析构函数来执行清理工作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">MyClass&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">initialValue&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">privateData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">initialValue&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">~&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 清理工作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>继承&lt;/strong>：使用继承来创建基于现有类的新的类，实现代码复用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DerivedClass&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">BaseClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 继承BaseClass的成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>多态&lt;/strong>：通过虚函数实现多态性，允许通过基类指针或引用调用派生类的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>抽象类&lt;/strong>：使用纯虚函数创建抽象类，这些类不能被实例化，但可以作为其他类的接口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">AbstractClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">pureVirtualFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 纯虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>封装&lt;/strong>：将数据和操作这些数据的函数封装在类中，隐藏实现细节。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Encapsulation&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">setValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getValue&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板&lt;/strong>：使用模板创建泛型类和函数，允许在编译时实例化多种类型的类和函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TemplateClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常处理&lt;/strong>：使用try、catch和throw来处理程序中的异常情况。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 可能抛出异常的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">exception&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 异常处理代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>智能指针&lt;/strong>：使用智能指针（如&lt;code>std::unique_ptr&lt;/code>和&lt;code>std::shared_ptr&lt;/code>）来自动管理内存。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">myPtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>命名空间&lt;/strong>：使用命名空间来组织代码，避免名称冲突。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">MyNamespace&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>标准库&lt;/strong>：充分利用C++标准库（STL），如容器、迭代器、算法等。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">myVector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>显式C++编程鼓励使用C++特有的特性来提高代码的安全性、可读性和效率，而不是依赖C风格的做法。&lt;/p>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic friend</title><link>https://wesigj.github.io/p/c-basic-friend/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-friend/</guid><description>&lt;h1 id="c面试基础系列-friend">C++面试基础系列-friend
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;p>在C++中，&lt;code>friend&lt;/code>是一个关键字，它用于声明友元函数或友元类。友元是一种特殊的实体，它不是类的成员，但有权访问类的私有（&lt;code>private&lt;/code>）和保护（&lt;code>protected&lt;/code>）成员。使用&lt;code>friend&lt;/code>可以突破类的封装性，让特定的函数或类访问类的内部细节。&lt;/p>
&lt;h2 id="1friend友元的常见用法">1.friend友元的常见用法
&lt;/h2>&lt;p>以下是一些关于&lt;code>friend&lt;/code>在C++中的用法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>友元函数&lt;/strong>：可以声明为友元的函数能够访问类的非公共成员。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">privateData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">privateData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">accessPrivateData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 声明友元函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">accessPrivateData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 直接访问obj的私有成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">privateData&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>友元类&lt;/strong>：可以声明为友元的类的所有成员函数都能够访问声明它的类的私有和保护成员。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">FriendClass&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">privateData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">privateData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">FriendClass&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 声明友元类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">FriendClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">accessPrivateData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 直接访问obj的私有成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">privateData&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>友元在多文件编程中的使用&lt;/strong>：在多文件项目中，需要在类声明中和实现文件中都声明友元函数或类。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// MyClass.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">friend&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">myFriendFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// MyClass.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">myFriendFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>限制&lt;/strong>：友元不能继承。一个类不能从友元类那里继承访问权限。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用场景&lt;/strong>：当需要让函数或类访问内部数据，但又不想暴露这些数据给其他用户时，使用友元是一个合适的选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>注意事项&lt;/strong>：过度使用友元可能会破坏封装性，导致代码难以维护。应当谨慎使用，只在必要时使用友元。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>友元是C++中实现特定设计和优化性能的一种手段，但应当在确保不破坏类的封装性的前提下使用。&lt;/p>
&lt;h2 id="2友元函数和友元类在实际编程中有哪些常见的应用场景">2.友元函数和友元类在实际编程中有哪些常见的应用场景？
&lt;/h2>&lt;p>友元函数和友元类在C++编程中有几种常见的应用场景，主要包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>访问私有数据&lt;/strong>：当一个函数需要访问类的私有成员，但又不想让这个函数成为类的成员函数时，可以将其声明为友元函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现辅助操作&lt;/strong>：一些操作可能在逻辑上不属于任何类，但需要访问特定类的私有成员。例如，用于操作或修改多个类内部状态的辅助函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现特定算法&lt;/strong>：某些算法可能需要访问多个类的私有数据，但算法本身与这些类没有继承或组合关系。通过声明友元函数，可以在不暴露类内部实现细节的前提下实现算法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>操作符重载&lt;/strong>：对于非成员函数的运算符重载，如&lt;code>&amp;lt;&amp;lt;&lt;/code>用于输出流，可能需要访问类的私有成员。在这种情况下，运算符重载函数常常被声明为友元。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现序列化和反序列化&lt;/strong>：在进行对象的序列化和反序列化时，可能需要访问对象的所有成员，包括私有成员。通过友元函数可以提供这种访问权限。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现单例模式&lt;/strong>：在实现单例模式时，友元函数可以用来访问私有构造函数，确保只有一个实例被创建。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现工厂模式&lt;/strong>：在工厂模式中，工厂类可能需要访问多个产品的私有构造函数来创建对象实例。通过声明工厂类为友元类，可以访问这些私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现访问者模式&lt;/strong>：访问者模式中，访问者需要对元素对象执行操作，但元素对象的内部结构需要保护。通过将访问者声明为元素类的友元，可以访问其内部结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现数据库或文件存储&lt;/strong>：在将对象存储到数据库或文件系统时，可能需要访问对象的私有成员以序列化数据。友元函数可以提供这种访问权限。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现性能优化&lt;/strong>：在某些性能敏感的应用中，友元函数可以用来减少对象拷贝或直接操作对象的内部数据结构，从而提高性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现测试和调试工具&lt;/strong>：在开发测试或调试工具时，可能需要访问类的内部状态，通过友元可以提供这种访问。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>使用友元时需要谨慎，因为它们破坏了类的封装性。过度使用友元可能导致代码难以理解和维护，因此应当在确保必要性和合理性的前提下使用。&lt;/p>
&lt;h2 id="3如何正确地在c中使用友元类来优化多线程程序的性能">3.如何正确地在C++中使用友元类来优化多线程程序的性能？
&lt;/h2>&lt;p>在C++中，使用友元类（friend class）可以优化多线程程序的性能，主要体现在以下几个方面：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>减少数据拷贝&lt;/strong>：通过允许友元类直接访问另一个类的私有成员，可以避免在多线程间传递和拷贝大量数据，从而提高效率 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高访问速度&lt;/strong>：友元类可以无需通过公共接口直接访问类的私有成员，这减少了方法调用的开销，在多线程环境中，这可以减少同步所需的时间 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>简化线程间通信&lt;/strong>：在多线程程序中，线程间通信是一个常见需求。使用友元类可以简化线程间的直接数据交换和通信，避免了复杂的同步机制 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优化资源管理&lt;/strong>：在多线程环境中，资源的共享和访问控制尤为重要。友元类可以访问类的私有资源管理方法，帮助实现更细粒度的资源控制和优化 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免竞态条件&lt;/strong>：当多个线程需要访问同一资源时，使用友元类可以设计出更安全的访问模式，因为友元类可以访问用于同步的私有成员，如互斥锁，从而避免竞态条件 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高代码的封装性和可维护性&lt;/strong>：尽管友元类会破坏一定的封装性，但如果合理使用，可以使得多线程程序的逻辑更加清晰，提高代码的可维护性 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现特定的设计模式&lt;/strong>：在某些设计模式中，如享元模式或代理模式，友元类可以用来实现对象之间的直接联系，这在多线程环境中可以减少间接层的开销 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程池管理&lt;/strong>：在实现线程池时，可以使用友元类来允许线程池管理线程的创建和销毁，同时直接访问线程的私有状态和数据，从而提高线程池的效率和响应速度 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>线程同步&lt;/strong>：在多线程同步中，友元类可以用来实现同步机制，比如通过友元类访问线程的私有同步数据，实现条件变量、信号量等同步手段 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高数据局部性&lt;/strong>：通过友元类，可以将频繁访问的数据结构的成员直接暴露给特定线程或线程局部使用，提高CPU缓存的数据局部性，从而提升性能 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>总之，友元类在多线程程序中的应用可以带来性能上的优化，但同时也需要谨慎使用，以避免过度耦合和破坏封装性。&lt;/p>
&lt;h2 id="4在c中除了使用友元还有哪些方式可以访问类的私有成员">4.在C++中，除了使用友元，还有哪些方式可以访问类的私有成员？
&lt;/h2>&lt;p>在C++中，除了使用友元（friend），以下是一些可以访问类私有（private）或保护（protected）成员的方式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>类成员函数&lt;/strong>：类的成员函数可以直接访问类的私有和保护成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>类的友元函数&lt;/strong>：通过在类内部声明为&lt;code>friend&lt;/code>的函数可以访问类的私有和保护成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>继承&lt;/strong>：如果一个类是从另一个类继承来的（即使用&lt;code>private&lt;/code>继承），即使基类的成员是私有的，派生类也可以访问这些成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>转换构造函数&lt;/strong>：如果类有一个转换构造函数或转换运算符，它可以将对象转换为另一个类型，并且如果那个类型有访问权限，就可以访问私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>lambda 表达式&lt;/strong>：在C++14中，可以在类的成员函数中捕获&lt;code>*this&lt;/code>，然后使用lambda表达式来访问私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板函数&lt;/strong>：通过模板函数可以访问类的私有成员，因为模板实例化时会根据模板参数的具体类型来访问成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>嵌套类&lt;/strong>：如果一个类被定义在另一个类的内部，它自然就可以访问外部类的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>静态成员函数&lt;/strong>：静态成员函数可以直接访问类的私有和保护静态成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>标准库算法&lt;/strong>：一些标准库算法，如&lt;code>std::for_each&lt;/code>，可以配合函数对象或lambda表达式来访问对象的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>序列化和反序列化&lt;/strong>：在进行对象的序列化和反序列化时，可以通过友元函数或模板函数来访问对象的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>反射&lt;/strong>：使用一些第三方库，如Boost.Hana，可以实现反射机制，从而访问类的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存字节直接访问&lt;/strong>：虽然不推荐使用，但可以通过直接操作内存字节的方式来访问对象的私有成员，这通常涉及到&lt;code>reinterpret_cast&lt;/code>和指针运算。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代理类&lt;/strong>：创建一个可以访问私有成员的代理类，通过代理类来访问或修改私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单例模式&lt;/strong>：如果类是单例的，那么整个程序中只有一个实例，可以通过这个全局访问点来访问私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>全局函数&lt;/strong>：虽然全局函数通常不能直接访问类的私有成员，但如果它们被声明为类的友元，就可以访问。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>请注意，尽管有多种方式可以访问类的私有成员，但应当谨慎使用这些方法，以维护类的封装性和数据的安全性。&lt;/p>
&lt;h2 id="5除了友元还有哪些设计模式可以用于访问类的私有成员">5.除了友元，还有哪些设计模式可以用于访问类的私有成员？
&lt;/h2>&lt;p>除了使用友元，以下是一些设计模式，它们可以在不同程度上用于访问或操作类的私有成员：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>代理模式（Proxy Pattern）&lt;/strong>：
代理模式提供了对目标对象的间接访问，控制对它的访问。代理可以在不暴露对象实现细节的情况下，允许访问其私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>适配器模式（Adapter Pattern）&lt;/strong>：
适配器模式可以转换一个类的接口，以便它可以与预期的接口兼容。在转换过程中，可以访问类的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>外观模式（Facade Pattern）&lt;/strong>：
外观模式提供了一个统一的高层接口，用于访问子系统中的一群接口。在这种情况下，外观类可以访问子系统中类的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>桥接模式（Bridge Pattern）&lt;/strong>：
桥接模式将抽象与实现分离，使它们可以独立变化。在桥接模式中，实现类可以访问抽象类的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>装饰器模式（Decorator Pattern）&lt;/strong>：
装饰器模式可以在不修改对象自身的基础上，动态地给对象添加额外的职责。装饰者可以访问被装饰对象的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组合模式（Composite Pattern）&lt;/strong>：
组合模式允许将对象组合成树形结构，以表示“部分-整体”的层次结构。在这种结构中，组件可以访问叶节点的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>策略模式（Strategy Pattern）&lt;/strong>：
策略模式定义了一系列算法，并将每一个算法封装起来，使它们可以互换。策略可以访问上下文（Context）对象的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板方法模式（Template Method Pattern）&lt;/strong>：
模板方法模式在操作中定义了一个算法的框架，将一些步骤的执行延迟到子类中。在模板方法中，子类可以访问父类的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>享元模式（Flyweight Pattern）&lt;/strong>：
享元模式用于高效地共享对象。享元可以访问内部状态的存储，这在某些情况下可以视为访问私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>访问者模式（Visitor Pattern）&lt;/strong>：
访问者模式允许在不修改类的情况下添加新的操作。访问者可以访问元素类的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>观察者模式（Observer Pattern）&lt;/strong>：
观察者模式定义了对象之间的一对多依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都会得到通知。在某些实现中，观察者可以访问被观察对象的私有状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中介者模式（Mediator Pattern）&lt;/strong>：
中介者模式定义了一个中介对象，用以封装一系列对象之间的交互。中介者可以访问相互作用的各个对象的私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工厂模式（Factory Pattern）&lt;/strong>：
工厂模式用于创建对象，而不需要指定将要创建的具体类。在某些实现中，工厂可以访问类的私有构造函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>单例模式（Singleton Pattern）&lt;/strong>：
单例模式确保一个类只有一个实例，并提供一个全局访问点。由于全局访问点可以访问类的私有成员，这在实现单例时很常见。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>命令模式（Command Pattern）&lt;/strong>：
命令模式将请求封装为一个对象，从而允许用户使用不同的请求、队列或日志请求。命令的执行者可以访问接收者的私有成员。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>这些设计模式可以在不同的上下文和目的下使用，以实现对类私有成员的访问或操作。然而，设计模式的选择应基于具体问题的需求和上下文，以确保代码的清晰性、可维护性和扩展性。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic inline内联</title><link>https://wesigj.github.io/p/c-basic-inline%E5%86%85%E8%81%94/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-inline%E5%86%85%E8%81%94/</guid><description>&lt;h1 id="c面试基础系列-inline内联">C++面试基础系列-inline内联
&lt;/h1>&lt;p>[toc]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>inline可以在头文件中声明和定义函数或变量&lt;/li>
&lt;li>不违反一次定义规则（One Definition Rule, ODR）&lt;/li>
&lt;li>会加快程序运行速度（避免函数调用的开销，如建立栈帧、传递参数等操作），但会增加代码ROM使用&lt;/li>
&lt;/ul>
&lt;h2 id="1inline介绍">1.inline介绍
&lt;/h2>&lt;p>在C++中，&lt;code>inline&lt;/code>关键字是一种函数或变量的声明属性，它请求编译器在编译时将函数或变量的定义嵌入到每个使用该函数或变量的地方，从而避免函数调用的开销。使用&lt;code>inline&lt;/code>可以提高程序的执行效率，尤其是在调用小型函数时。&lt;/p>
&lt;p>以下是&lt;code>inline&lt;/code>的一些关键点和用法：&lt;/p>
&lt;h3 id="1定义内联函数">1.定义内联函数
&lt;/h3>&lt;p>内联函数是在定义时使用&lt;code>inline&lt;/code>关键字声明的函数。编译器会尝试将这些函数的定义直接嵌入到调用点，从而减少函数调用的开销。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">inline&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2内联函数的声明与定义">2.内联函数的声明与定义
&lt;/h3>&lt;p>内联函数通常在头文件中声明和定义，这样它们的定义可以被多个编译单元（.cpp文件）包含，而不会违反一次定义规则（One Definition Rule, ODR）。&lt;/p>
&lt;h3 id="3编译器的自由裁量权">3.编译器的自由裁量权
&lt;/h3>&lt;p>编译器对是否内联一个函数有最终决定权。即使使用了&lt;code>inline&lt;/code>关键字，编译器也可能出于优化或其他原因选择不内联该函数。&lt;/p>
&lt;h3 id="4内联变量">4.内联变量
&lt;/h3>&lt;p>&lt;code>inline&lt;/code>也可以用于变量，特别是对于常量表达式。内联变量的定义可以在多个编译单元中使用，而不违反ODR。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">inline&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">MAX_SIZE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="5模板函数自动内联">5.模板函数自动内联
&lt;/h3>&lt;p>模板函数在实例化时通常会被编译器视为内联，即使没有显式地使用&lt;code>inline&lt;/code>关键字。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span> &lt;span class="n">maximum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">a&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="6内联汇编">6.内联汇编
&lt;/h3>&lt;p>&lt;code>inline&lt;/code>还可以与汇编语言一起使用，允许在C++代码中嵌入汇编指令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">inline&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">readFlag&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">flag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">asm&lt;/span> &lt;span class="k">volatile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;in %1, %0&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;=a&amp;#34;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;dN&amp;#34;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x01&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// x86特定汇编
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">flag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="7内联命名空间">7.内联命名空间
&lt;/h3>&lt;p>C++17引入了内联命名空间，它允许在不同的编译单元中使用相同的命名空间名称而不会引起冲突。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">inline&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">experimental&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="8内联函数的限制">8.内联函数的限制
&lt;/h3>&lt;p>内联函数有一些限制，例如它们不能包含循环、跳转语句（如&lt;code>goto&lt;/code>）、递归调用等复杂结构。&lt;/p>
&lt;h3 id="9内联函数的性能">9.内联函数的性能
&lt;/h3>&lt;p>内联函数可以减少函数调用的开销，但同时也会增加代码的大小。如果内联函数体较大，可能会导致缓存失效（cache misses），从而降低程序的运行效率。&lt;/p>
&lt;h3 id="10显式内联与隐式内联">10.显式内联与隐式内联
&lt;/h3>&lt;p>从C++11开始，如果编译器决定不内联一个&lt;code>inline&lt;/code>函数，它将作为普通的非内联函数调用。而在C++11之前，如果编译器不内联&lt;code>inline&lt;/code>函数，它将完全忽略该函数的定义。&lt;/p>
&lt;p>使用&lt;code>inline&lt;/code>可以提高程序的性能，但应当谨慎使用，以避免不必要的代码膨胀。在某些情况下，现代编译器的优化选项（如GCC的&lt;code>-O2&lt;/code>或&lt;code>-O3&lt;/code>）可能会自动内联适当的函数，而不需要显式地使用&lt;code>inline&lt;/code>关键字。&lt;/p>
&lt;h2 id="2inline使用方法">2.inline使用方法
&lt;/h2>&lt;p>在 C++中，&lt;code>inline&lt;/code>关键字用于向编译器建议在适当的地方将函数展开，以减少函数调用的开销。以下是关于&lt;code>inline&lt;/code>的详细介绍：&lt;/p>
&lt;h3 id="21使用方法">2.1.使用方法
&lt;/h3>&lt;p>当定义一个函数时，可以在函数返回类型前加上&lt;code>inline&lt;/code>关键字。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">inline&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="22作用原理">2.2.作用原理
&lt;/h3>&lt;p>当编译器看到&lt;code>inline&lt;/code>函数时，它可能会选择在调用该函数的地方直接将函数体的代码插入，而不是进行传统的函数调用。这样可以避免函数调用的开销，如建立栈帧、传递参数等操作。&lt;/p>
&lt;p>例如，在没有使用&lt;code>inline&lt;/code>的情况下，函数调用可能会生成如下汇编代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">push parameter1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">push parameter2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">call add_function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">add esp, 8 ; 清理栈
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而如果编译器将&lt;code>inline&lt;/code>函数展开，可能的代码会是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">mov eax, parameter1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">add eax, parameter2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="23注意事项">2.3.注意事项
&lt;/h3>&lt;ol>
&lt;li>编译器不一定会按照&lt;code>inline&lt;/code>的建议进行函数展开。编译器会根据函数的复杂程度、调用次数等因素来决定是否展开函数。如果函数过于复杂，编译器可能会忽略&lt;code>inline&lt;/code>关键字。&lt;/li>
&lt;li>&lt;code>inline&lt;/code>函数的定义通常应该放在头文件中。这是因为当多个源文件包含同一个头文件并使用&lt;code>inline&lt;/code>函数时，编译器需要在每个源文件中看到函数的定义才能进行展开。如果&lt;code>inline&lt;/code>函数的定义只在一个源文件中，而其他源文件只看到函数声明，编译器可能无法进行展开。&lt;/li>
&lt;li>虽然&lt;code>inline&lt;/code>可以减少函数调用开销，但过度使用可能会导致代码膨胀。如果函数体很大，展开多个函数调用可能会使生成的目标代码变得很大，从而占用更多的内存。&lt;/li>
&lt;/ol>
&lt;p>总的来说，&lt;code>inline&lt;/code>是一个有用的关键字，可以在适当的情况下提高程序的性能，但需要谨慎使用。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic macro_definition宏定义</title><link>https://wesigj.github.io/p/c-basic-macro_definition%E5%AE%8F%E5%AE%9A%E4%B9%89/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-macro_definition%E5%AE%8F%E5%AE%9A%E4%B9%89/</guid><description>&lt;h1 id="c面试基础系列-macro_definition宏定义">C++面试基础系列-macro_definition宏定义
&lt;/h1>&lt;p>[toc]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;p>在C++中，宏定义是预处理器（preprocessor）的一个功能，它允许你创建一个符号名称来代表一个值或一段代码。宏定义通常在预处理指令&lt;code>#define&lt;/code>后面指定。以下是宏定义的一些关键点和用法：&lt;/p>
&lt;hr>
&lt;h2 id="1宏定义的概念">1.宏定义的概念
&lt;/h2>&lt;h3 id="11-基本宏定义">1.1. 基本宏定义
&lt;/h3>&lt;p>使用&lt;code>#define&lt;/code>指令创建一个宏。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define PI 3.14159
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="12-带参数的宏">1.2. 带参数的宏
&lt;/h3>&lt;p>可以定义带参数的宏，类似于一个没有花括号的内联函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define SQUARE(x) ((x) * (x))
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13-条件编译">1.3. 条件编译
&lt;/h3>&lt;p>宏可以用于条件编译，控制代码的编译过程。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define DEBUG_MODE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef DEBUG_MODE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Debug information&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define DEBUG_MODE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#if define(DEBUG_MODE)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Debug information&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="14-宏的展开">1.4. 宏的展开
&lt;/h3>&lt;p>在预处理阶段，宏将被展开到它们被引用的地方。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;The square of 3 is &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">SQUARE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>预处理器将上述代码展开为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;The square of 3 is &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="15-宏的副作用">1.5. 宏的副作用
&lt;/h3>&lt;p>宏可以导致意外的行为，尤其是如果宏的使用不符合预期或宏的定义不当。&lt;/p>
&lt;h3 id="16-宏与类型">1.6. 宏与类型
&lt;/h3>&lt;p>宏可以用来定义常量值，但它们不包含类型信息。&lt;/p>
&lt;h3 id="17-宏的撤销">1.7. 宏的撤销
&lt;/h3>&lt;p>使用&lt;code>#undef&lt;/code>可以撤销宏定义。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#undef PI
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="18-宏的可见性">1.8. 宏的可见性
&lt;/h3>&lt;p>默认情况下，宏在定义它们的文件中可见。使用&lt;code>#undef&lt;/code>或在文件结尾可以限制它们的可见性。&lt;/p>
&lt;h3 id="19-避免宏冲突">1.9. 避免宏冲突
&lt;/h3>&lt;p>在不同的头文件中定义相同的宏名可能会导致冲突。使用唯一的宏名称或命名空间可以避免这种情况。&lt;/p>
&lt;h3 id="110-宏与函数的区别">1.10. 宏与函数的区别
&lt;/h3>&lt;p>宏在预处理阶段展开，没有作用域和类型检查，而函数在编译时调用，具有类型安全和作用域规则。&lt;/p>
&lt;h3 id="111-字符串化操作符">1.11. 字符串化操作符（#）
&lt;/h3>&lt;p>使用&lt;code>#&lt;/code>可以将宏参数转换为字符串字面量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define STRINGIZE(x) #x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">STRINGIZE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Hello&lt;/span> &lt;span class="n">World&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="112-连接操作符">1.12. 连接操作符（##）
&lt;/h3>&lt;p>使用&lt;code>##&lt;/code>可以将两个宏参数连接起来。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define CONCAT(a, b) a ## b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">CONCAT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">World&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 展开为HelloWorld
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="113-宏的限制">1.13. 宏的限制
&lt;/h3>&lt;p>宏不支持复杂的表达式和语句，如循环和条件语句。对于这些情况，应使用内联函数或模板。&lt;/p>
&lt;h3 id="114-宏在调试中的问题">1.14. 宏在调试中的问题
&lt;/h3>&lt;p>宏在调试时可能不太容易跟踪，因为它们在预处理阶段就被展开。&lt;/p>
&lt;p>宏定义是C++中一个强大的工具，但它们也有局限性和潜在的问题。在许多情况下，现代C++推荐使用内联函数、模板或&lt;code>constexpr&lt;/code>来替代宏，以提供更好的类型安全和可读性。&lt;/p>
&lt;p>在 C++中，宏定义（macro definition）是一种预处理指令，它允许你用一个标识符来代表一段代码或一个值。以下是关于 C++中宏定义的详细介绍：&lt;/p>
&lt;h2 id="2宏定义面试回答">2.宏定义面试回答
&lt;/h2>&lt;h3 id="21定义方法">2.1.定义方法
&lt;/h3>&lt;p>使用&lt;code>#define&lt;/code>指令来定义宏。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define PI 3.14159
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MAX(a, b) ((a) &amp;gt; (b)? (a) : (b))
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一个例子中，定义了一个名为&lt;code>PI&lt;/code>的宏，代表圆周率的值。在第二个例子中，定义了一个名为&lt;code>MAX&lt;/code>的宏，它接受两个参数并返回较大的值。&lt;/p>
&lt;h3 id="22二作用">2.2.二、作用
&lt;/h3>&lt;ol>
&lt;li>提高代码的可读性和可维护性：通过给常量或常用表达式定义一个有意义的名称，可以使代码更易于理解。例如，使用&lt;code>PI&lt;/code>来代表圆周率，而不是直接使用数值，这样在代码中看到&lt;code>PI&lt;/code>就可以很容易地知道它的含义。&lt;/li>
&lt;li>方便修改：如果需要修改一个常量的值或一个表达式的实现，可以只在宏定义处进行修改，而不需要在整个代码中逐个查找并修改。例如，如果要改变圆周率的精度，只需要修改&lt;code>PI&lt;/code>的定义即可。&lt;/li>
&lt;li>提高效率：对于一些简单的操作，可以使用宏来避免函数调用的开销。例如，上面的&lt;code>MAX&lt;/code>宏可以在不进行函数调用的情况下比较两个值并返回较大的值。&lt;/li>
&lt;/ol>
&lt;h3 id="23注意事项">2.3.注意事项
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>宏定义只是简单的文本替换，没有类型检查：在使用宏时，编译器不会进行类型检查。因此，可能会出现一些意想不到的结果。例如，&lt;code>MAX(2, 3.5)&lt;/code>会将&lt;code>2&lt;/code>和&lt;code>3.5&lt;/code>都视为整数进行比较，可能会导致错误的结果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>宏定义可能会引起副作用：如果宏的参数在表达式中有副作用，可能会导致意想不到的结果。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define SQUARE(x) (x * x)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SQUARE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>b&lt;/code>的值可能不是预期的 36，因为&lt;code>a++&lt;/code>在宏展开后会被计算两次。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>宏定义没有作用域：宏定义在整个文件中都是有效的，除非被重新定义或使用&lt;code>#undef&lt;/code>指令取消定义。这可能会导致命名冲突和难以调试的问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>为了避免这些问题，可以考虑使用常量表达式和内联函数来代替宏定义。常量表达式在编译时进行计算，并且有类型检查。内联函数也可以避免函数调用的开销，同时具有类型检查和更好的错误处理能力。&lt;/p>
&lt;h2 id="3位运算与宏定义">3.位运算与宏定义
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitRead(value, bit) (((value) &amp;gt;&amp;gt; (bit)) &amp;amp; 0x01)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitSet(value, bit) ((value) |= (1UL &amp;lt;&amp;lt; (bit)))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitClear(value, bit) ((value) &amp;amp;= ~(1UL &amp;lt;&amp;lt; (bit)))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitReverse(value, bit) ((value) ^= (1UL &amp;lt;&amp;lt; (bit)))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define lowByte(w) ((w) &amp;amp; 0xff)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define highByte(w) ((w) &amp;gt;&amp;gt; 8)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitRigthmostGet(value) ((value) &amp;amp; (-value))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define bitRigthmostClear(value) ((value) &amp;amp; (value-1))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//嵌入式中位操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#define SET_BIT(REG, BIT) ((REG) |= (BIT))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define CLEAR_BIT(REG, BIT) ((REG) &amp;amp;= ~(BIT))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define READ_BIT(REG, BIT) ((REG) &amp;amp; (BIT))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//嵌入式中寄存器操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#define CLEAR_REG(REG) ((REG) = (0x0))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define WRITE_REG(REG, VAL) ((REG) = (VAL))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define READ_REG(REG) ((REG))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MODIFY_REG(REG, CLEARMASK, SETMASK) WRITE_REG((REG), (((READ_REG(REG)) &amp;amp; (~(CLEARMASK))) | (SETMASK)))
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4宏定义使用场景">4.宏定义使用场景
&lt;/h2>&lt;p>宏定义在C++中的用法多样，主要用于条件编译、常量定义、代码重用、调试辅助等场景。以下是一些常见的使用场景：&lt;/p>
&lt;h3 id="41-定义编译时常量">4.1. 定义编译时常量
&lt;/h3>&lt;p>使用宏定义来创建编译时常量，这些常量在整个程序中都是可见的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MAX_BUFFER_SIZE 1024
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="42-条件编译">4.2. 条件编译
&lt;/h3>&lt;p>宏定义可以用于条件编译，根据不同的条件包含或排除代码段。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define DEBUG_MODE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef DEBUG_MODE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Debug information: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">variable&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="43-代码重用">4.3. 代码重用
&lt;/h3>&lt;p>宏定义可以代替多处重复的代码片段，减少代码冗余。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define PRINT_VALUE(x) std::cout &amp;lt;&amp;lt; #x &amp;#34; = &amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">PRINT_VALUE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="44-函数样宏">4.4. 函数样宏
&lt;/h3>&lt;p>宏可以定义为接受参数的宏，类似于函数，但它们是文本替换，没有类型检查。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define SQUARE(x) ((x) * (x))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SQUARE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="45-调试辅助">4.5. 调试辅助
&lt;/h3>&lt;p>宏可以用于简化调试过程，例如定义断点或输出调试信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define DEBUG_BREAK() __builtin_trap()
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="46-字符串化操作">4.6. 字符串化操作（#）
&lt;/h3>&lt;p>宏可以将参数转换为字符串，常用于错误消息或调试输出。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define STRINGIZE(x) #x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define CREATE_ERROR_MESSAGE(msg) &amp;#34;Error: &amp;#34; msg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">errorMessage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CREATE_ERROR_MESSAGE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">STRINGIZE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Invalid&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="47-连接符号">4.7. 连接符号（##）
&lt;/h3>&lt;p>宏可以将两个符号连接为一个新的符号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define CONCAT内部(a, b) a ## b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define CONCAT外部(x) CONCAT内部(x, _t)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">CONCAT外部&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myVar&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="48-循环展开续行操作符">4.8. 循环展开（续行操作符）（\）
&lt;/h3>&lt;p>宏可以用于手动展开循环，有时用于性能优化。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define REPEAT_4_TIMES(func) do { \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> func(0); \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> func(1); \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> func(2); \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> func(3); \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">} while(0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">REPEAT_4_TIMES&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Index: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="49-兼容性和平台特定代码">4.9. 兼容性和平台特定代码
&lt;/h3>&lt;p>宏可以用于根据不同的平台或编译器特性包含不同的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#if defined(WINDOWS)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#define PATH_SEPARATOR &amp;#39;\\&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#define PATH_SEPARATOR &amp;#39;/&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="410-创建类型安全宏">4.10. 创建类型安全宏
&lt;/h3>&lt;p>使用宏结合类型转换操作符，可以创建类型安全的宏。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define CAST_PTR(type, ptr) ((type*)(ptr))
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="411-避免头文件重复包含">4.11. 避免头文件重复包含
&lt;/h3>&lt;p>宏常用于防止头文件被多次包含。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifndef HEADER_FILE_NAME_H
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define HEADER_FILE_NAME_H
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ... 头文件内容 ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif &lt;/span>&lt;span class="c1">// HEADER_FILE_NAME_H
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="412-性能测试">4.12. 性能测试
&lt;/h3>&lt;p>宏可以用于快速切换性能测试代码的启用或禁用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define PERFORMANCE_TEST
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef PERFORMANCE_TEST
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="c1">// 性能测试代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>尽管宏定义在C++中非常有用，但它们也有缺点，如不进行类型检查、可能导致意外的替换效果等。因此，在可能的情况下，推荐使用内联函数、模板或&lt;code>constexpr&lt;/code>来替代宏。&lt;/p>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic polymorphic</title><link>https://wesigj.github.io/p/c-basic-polymorphic/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-polymorphic/</guid><description>&lt;h1 id="c面试基础系列-polymorphic">C++面试基础系列-polymorphic
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>C++ 支持面向对象编程，包括类（Class）和对象（Object）、继承（Inheritance）、封装（Encapsulation）和多态（Polymorphism）。&lt;/li>
&lt;li>C 语言不支持面向对象编程。&lt;/li>
&lt;/ul>
&lt;h2 id="1polymorphic多态性">1.polymorphic多态性
&lt;/h2>&lt;p>在C++中，多态性（Polymorphism）是一个核心概念，它允许我们通过基类的接口来使用派生类的对象。多态性使得代码更加灵活和可扩展，主要有以下几种形式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>编译时多态（静态绑定）&lt;/strong>：通过函数重载和运算符重载实现，它们在编译时就已经确定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>运行时多态（动态绑定）&lt;/strong>：通过虚函数实现，调用哪个函数的实现是在运行时根据对象的实际类型来确定的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2编译时多态的实现">2.编译时多态的实现
&lt;/h2>&lt;p>编译时多态，也称为静态多态或早绑定（Early Binding），是在编译期间确定函数调用的机制。在C++中，编译时多态主要通过以下几种方式实现：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>函数重载（Function Overloading）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>允许在同一个作用域内定义多个同名函数，只要它们的参数列表不同（参数类型、数量或顺序不同）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>运算符重载（Operator Overloading）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>允许为自定义类型定义或修改已有运算符的行为。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板（Templates）&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>允许创建泛型类和函数，它们可以在编译时根据模板参数实例化出不同类型的具体实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="示例代码">示例代码
&lt;/h3>&lt;h4 id="函数重载示例">函数重载示例
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 函数重载示例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Integer: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Double: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调用第一个print函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">3.14&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调用第二个print函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>print&lt;/code> 函数被重载了两次，一次接受 &lt;code>int&lt;/code> 类型的参数，另一次接受 &lt;code>double&lt;/code> 类型的参数。编译器根据传递给 &lt;code>print&lt;/code> 函数的参数类型来决定调用哪个函数。&lt;/p>
&lt;h4 id="运算符重载示例">运算符重载示例：
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 运算符重载，实现点的加法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span> &lt;span class="n">p3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 使用重载的 + 运算符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;p3: (&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">p3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">p3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，我们为 &lt;code>Point&lt;/code> 类重载了 &lt;code>+&lt;/code> 运算符，使其能够实现两个点的加法。编译器在编译时根据操作数的类型确定使用哪个 &lt;code>+&lt;/code> 运算符。&lt;/p>
&lt;h4 id="模板示例">模板示例：
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 模板类示例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Container&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Container&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="nf">getValue&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Container&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">intContainer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Container&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">doubleContainer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">3.14&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;intContainer value: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">intContainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getValue&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;doubleContainer value: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">doubleContainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getValue&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，我们定义了一个模板类 &lt;code>Container&lt;/code>，它可以存储任何类型的值。编译器在编译时根据模板参数的类型来实例化 &lt;code>Container&lt;/code> 类的不同版本。&lt;/p>
&lt;p>编译时多态的优点是调用效率高，因为它在编译期间就已经确定了调用的具体函数或方法。然而，它的局限性在于只能在编译时知道所有可能的调用类型。&lt;/p>
&lt;h2 id="3运行时多态的实现">3.运行时多态的实现
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>虚函数（Virtual Functions）&lt;/strong>：在基类中使用 &lt;code>virtual&lt;/code> 关键字声明的函数，可以被子类重写（Override）。&lt;/li>
&lt;li>&lt;strong>虚析构函数（Virtual Destructor）&lt;/strong>：确保通过基类指针删除派生类对象时，能够调用到正确的析构函数。&lt;/li>
&lt;li>&lt;strong>动态类型识别（Dynamic Cast）&lt;/strong>：在运行时检查对象的类型，并在需要时将基类指针转换为派生类指针。&lt;/li>
&lt;/ul>
&lt;h3 id="示例代码-1">示例代码
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 基类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 虚函数，用于模拟动物的声音
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">speak&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Some animal sound&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 虚析构函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 派生类 Dog
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Dog&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 重写基类的虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">speak&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Woof! Woof!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 派生类 Cat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Cat&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 重写基类的虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">speak&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Meow! Meow!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Animal&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">animal1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Dog&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Animal&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">animal2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Cat&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 多态性：通过基类指针调用派生类的方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">animal1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">speak&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 输出: Woof! Woof!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">animal2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">speak&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 输出: Meow! Meow!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 清理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">animal1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">animal2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>Animal&lt;/code> 是一个基类，它有一个虚函数 &lt;code>speak&lt;/code>。&lt;code>Dog&lt;/code> 和 &lt;code>Cat&lt;/code> 是 &lt;code>Animal&lt;/code> 的派生类，它们重写了 &lt;code>speak&lt;/code> 函数。在 &lt;code>main&lt;/code> 函数中，我们创建了 &lt;code>Dog&lt;/code> 和 &lt;code>Cat&lt;/code> 的对象，并通过基类指针 &lt;code>Animal*&lt;/code> 调用了 &lt;code>speak&lt;/code> 函数。由于多态性，即使我们通过基类指针调用，实际执行的也是派生类中重写的 &lt;code>speak&lt;/code> 函数。&lt;/p>
&lt;p>这种通过基类接口来操作不同派生类对象的能力，就是多态性的体现。它使得我们可以编写更加通用的代码，而不必担心对象的具体类型。&lt;/p>
&lt;h2 id="4编译时多态的优点">4.编译时多态的优点
&lt;/h2>&lt;p>在实际开发中，选择使用编译时多态而不是运行时多态的原因通常包括以下几点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>性能&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>编译时多态（如函数重载和模板）通常比运行时多态（如虚函数）具有更高的性能。这是因为编译时多态在编译期间就已经确定了函数调用，没有运行时的类型检查和函数查找开销。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>类型安全&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>编译时多态提供了更强的类型安全保证。编译器可以在编译期间检查类型错误和不一致性，从而避免了许多运行时错误。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码清晰和可维护性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>函数重载和模板可以提供更清晰的代码结构，使得代码更容易理解和维护。开发者可以直观地看到所有重载的函数或模板实例化，而不需要深入到类的继承层次中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免虚函数的限制&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>运行时多态依赖于虚函数，但虚函数有一些限制，例如不能是静态的，不能是构造函数，也不能是友元函数。在这些情况下，编译时多态是更合适的选择。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免虚函数表的开销&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>运行时多态需要使用虚函数表（vtable）来实现，这会带来一定的内存和性能开销。对于小型对象或性能敏感的应用，这可能是不可接受的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>静态链接&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>编译时多态不依赖于运行时的动态链接，这使得程序的部署和链接更加简单和可靠。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编译时决策&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些情况下，我们可能希望在编译时就做出某些决策，例如根据编译时常量来选择不同的实现。编译时多态允许我们根据模板参数或其他编译时已知信息来实现这一点。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免动态绑定的不确定性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>运行时多态的动态绑定可能会导致一些不确定性，例如当基类指针或引用指向的对象类型未知时。编译时多态可以消除这种不确定性，因为所有决策都是在编译时做出的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>特定场景的需求&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在某些特定场景下，如元编程或编译时计算，编译时多态是实现这些需求的唯一或最佳方式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免运行时错误&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>运行时多态可能会因为类型不匹配或其他问题导致运行时错误。编译时多态可以在编译期间捕捉这些错误，从而提高程序的稳定性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>总之，编译时多态和运行时多态各有优势和适用场景。在实际开发中，开发者需要根据具体需求、性能要求、代码可维护性和其他因素来选择最合适的方法。在某些情况下，两者也可以结合使用，以实现最佳的编程效果。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic series</title><link>https://wesigj.github.io/p/c-basic-series/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-series/</guid><description>&lt;h1 id="overview">Overview
&lt;/h1>&lt;hr>
&lt;h2 id="c-basic-面试基础知识系列">C++ basic 面试基础知识系列
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="./Basic/abstract/README.md" >abstract&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/assert/README.md" >assert&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/bit_field/README.md" >bit_field&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/bit_operation/README.md" >bit_operation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/C&amp;#43;&amp;#43;Features/README.md" >C++Features&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/const/README.md" >const&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/decltype/README.md" >decltype&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/double_colon/README.md" >double_colon&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/enum/README.md" >enum&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/explicit/README.md" >explicit&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/extern/README.md" >extern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/friend/README.md" >friend&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/function_pointerANDpointer_function/README.md" >function_pointerANDpointer_function&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/inline/README.md" >inline&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/macro_definition/README.md" >macro_definition&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/pointerANDreferance/README.md" >pointerANDreferance&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/polymorphic/README.md" >polymorphic&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/sizeof/README.md" >sizeof&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/static/README.md" >static&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/struct/README.md" >struct&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/this/README.md" >this&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/union/README.md" >union&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/using/README.md" >using&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/virtual/README.md" >virtual&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/volatile/README.md" >volatile&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./Basic/vptr_vtable/README.md" >vptr_vtable&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic sizeof</title><link>https://wesigj.github.io/p/c-basic-sizeof/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-sizeof/</guid><description>&lt;h1 id="c面试基础系列-sizeof">C++面试基础系列-sizeof
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;ul>
&lt;li>sizeof，可用于分析数据结构的内存分配，字节对齐
&lt;ul>
&lt;li>类&lt;/li>
&lt;li>结构体&lt;/li>
&lt;li>基础类型int，char等&lt;/li>
&lt;li>数组&lt;/li>
&lt;li>模板&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>sizeof与类，
&lt;ul>
&lt;li>空类的大小为1字节&lt;/li>
&lt;li>虚函数本身、成员函数（包括静态与非静态）和静态数据成员都是不占用类对象的存储空间&lt;/li>
&lt;li>对于包含虚函数的类，不管有多少个虚函数，只有一个虚指针,vptr的大小&lt;/li>
&lt;li>普通继承，派生类继承了所有基类的函数与成员，要按照字节对齐来计算大小&lt;/li>
&lt;li>虚函数继承，不管是单继承还是多继承，都是继承了基类的vptr。(32位操作系统4字节，64位操作系统 8字节)！&lt;/li>
&lt;li>虚继承,继承基类的vptr。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="1sizeof基本用法">1.sizeof基本用法
&lt;/h2>&lt;p>在 C++ 中，&lt;code>sizeof&lt;/code> 运算符用于确定变量或类型在内存中的大小，以字节为单位。&lt;code>sizeof&lt;/code> 是编译时运算符，它的&lt;strong>值在编译时就已经确定，并被用作一个常量表达式。&lt;/strong>&lt;/p>
&lt;p>以下是 &lt;code>sizeof&lt;/code> 的一些用法示例：&lt;/p>
&lt;h3 id="11基本类型">1.1.基本类型
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 输出 &amp;#39;i&amp;#39; 的大小，通常是 4 字节（取决于平台）
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="12指针类型">1.2.指针类型
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 输出指针 &amp;#39;p&amp;#39; 的大小，通常是 sizeof(void*)（取决于平台）
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13数组类型">1.3.数组类型
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 输出整个数组 &amp;#39;arr&amp;#39; 的大小，10 * sizeof(int)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="11结构体和类">1.1.结构体和类
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">MyStruct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyStruct&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 输出 &amp;#39;MyStruct&amp;#39; 的总大小 4 + 1 + （3）+8 =16
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="14引用类型">1.4.引用类型
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 输出引用 &amp;#39;ref&amp;#39; 的大小，通常等于 int 的大小
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="15动态内存分配">1.5.动态内存分配
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dynamicArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dynamicArray&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 输出指针的大小，不是数组的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">dynamicArray&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 记得释放内存
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="16sizeof-c11-可变参数模板">1.6.sizeof&amp;hellip; (C++11 可变参数模板)
&lt;/h3>&lt;p>C++11 引入了 &lt;code>sizeof...&lt;/code> 运算符，用于在模板中获取参数包中的参数数量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">Args&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">countArgs&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">...(&lt;/span>&lt;span class="n">Args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="17注意事项">1.7.注意事项
&lt;/h3>&lt;ul>
&lt;li>&lt;code>sizeof&lt;/code> 一个类型或变量是编译时计算的，不占用运行时间。&lt;/li>
&lt;li>&lt;code>sizeof&lt;/code> 一个指针总是返回相同大小，因为指针的大小与它指向的对象的大小无关。&lt;/li>
&lt;li>&lt;code>sizeof&lt;/code> 一个数组返回的是整个数组的大小，不是数组指针的大小。&lt;/li>
&lt;li>&lt;code>sizeof&lt;/code> 可以用于静态数组，但对于动态数组，它返回的是指针的大小，而不是分配的内存块的大小。&lt;/li>
&lt;li>&lt;code>sizeof&lt;/code> 可以用于基本数据类型、指针、数组、结构体、类、枚举和引用。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sizeof&lt;/code> 是 C++ 中一个非常有用的工具，可以帮助你了解不同类型和变量在内存中占用的空间大小。&lt;/p>
&lt;p>在 C++ 中，&lt;code>sizeof&lt;/code> 运算符可以用来确定类型或对象在内存中的大小，这有助于优化内存分配。以下是一些使用 &lt;code>sizeof&lt;/code> 来优化内存分配的方法：&lt;/p>
&lt;h2 id="2在-c-中如何使用-sizeof-运算符来优化内存分配">2.在 C++ 中，如何使用 sizeof 运算符来优化内存分配？
&lt;/h2>&lt;p>在 C++ 中，&lt;code>sizeof&lt;/code> 运算符可以用来优化内存分配，主要通过确保为对象分配的内存既足够又不过度。以下是一些具体的策略：&lt;/p>
&lt;p>在 C++ 中，可以使用 &lt;code>sizeof&lt;/code> 运算符来优化内存分配，以下是一些方法：&lt;/p>
&lt;h3 id="21确定数组大小">2.1.确定数组大小
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>静态数组：在定义静态数组时，可以使用 &lt;code>sizeof&lt;/code> 来确保数组的大小与特定类型的对象相匹配，避免浪费内存或出现缓冲区溢出。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 创建一个足够容纳 10 个整数的数组
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样可以确保数组的大小是根据整数的实际大小计算出来的，而不是使用一个固定的数字，提高了代码的可维护性和灵活性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>动态分配数组：在使用 &lt;code>new&lt;/code> 运算符动态分配数组时，可以结合 &lt;code>sizeof&lt;/code> 来确定数组的大小。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">dynamicArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// n 是一个变量，表示所需的整数数量
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种方法可以根据实际需求动态地分配内存，避免分配过多或过少的内存。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22结构体和类的内存布局">2.2.结构体和类的内存布局
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>了解内存占用：通过 &lt;code>sizeof&lt;/code> 运算符可以了解结构体或类对象在内存中的占用大小。这对于优化内存布局和避免不必要的内存浪费非常有用。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">MyStruct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of MyStruct: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyStruct&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过查看结构体的大小，可以确定其中各个成员变量的排列方式以及可能存在的内存对齐问题。如果发现结构体的大小超出了预期，可以考虑重新排列成员变量的顺序或者使用位域等技术来优化内存布局。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内存对齐考虑：&lt;code>sizeof&lt;/code> 运算符返回的值可能会受到内存对齐的影响。在某些平台上，编译器会对结构体和类的成员变量进行内存对齐，以提高访问效率。了解内存对齐规则可以帮助你更好地利用内存，并避免因对齐问题导致的内存浪费。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">MyAlignedStruct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">short&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of MyAlignedStruct: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyAlignedStruct&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，由于内存对齐的原因，结构体的大小可能会大于各个成员变量大小之和。可以通过调整成员变量的顺序或者使用特定的编译指令来控制内存对齐，以达到优化内存分配的目的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="23模板参数推导">2.3.模板参数推导
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>容器类模板：在编写容器类模板时，可以使用 &lt;code>sizeof&lt;/code> 运算符来推导模板参数的大小，从而实现更灵活的内存分配策略。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyContainer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyContainer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)])&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">MyContainer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个容器类模板中，构造函数根据传入的大小参数和 &lt;code>sizeof(T)&lt;/code> 来动态分配内存，确保容器能够容纳正确数量的对象。这种方法可以适应不同类型的对象，提高了代码的通用性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数模板参数推导：在函数模板中，也可以使用 &lt;code>sizeof&lt;/code> 来推导参数的大小，从而实现更高效的内存操作。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">copyArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">destination&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">destination&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个函数模板中，通过 &lt;code>sizeof(T)&lt;/code> 可以确定每个元素的大小，从而正确地进行内存复制操作。这种方法可以适用于不同类型的数组，提高了代码的复用性。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="24避免内存泄漏和重复分配">2.4.避免内存泄漏和重复分配
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>动态内存管理：在使用动态内存分配时，要注意避免内存泄漏和重复分配。可以使用智能指针（如 &lt;code>std::unique_ptr&lt;/code> 和 &lt;code>std::shared_ptr&lt;/code>）来自动管理内存，或者在手动管理内存时，确保在合适的时机释放内存。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">processData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，手动分配了一块内存，然后在使用完后及时释放。如果忘记释放内存，就会导致内存泄漏。可以考虑使用智能指针来自动管理内存，避免这种错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>避免重复分配：在一些情况下，可能会多次分配和释放内存，这会导致性能下降。可以通过合理的设计和使用 &lt;code>sizeof&lt;/code> 来避免重复分配内存。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyDataProcessor&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyDataProcessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)])&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">MyDataProcessor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">processData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，在类的构造函数中一次性分配了足够的内存，然后在整个对象的生命周期内使用。避免了在每次处理数据时都进行内存分配和释放，提高了性能。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>总之，在 C++ 中，&lt;code>sizeof&lt;/code> 运算符是一个非常有用的工具，可以帮助你优化内存分配，提高程序的性能和可维护性。但是，要注意正确使用 &lt;code>sizeof&lt;/code>，并结合其他内存管理技术，以确保程序的正确性和稳定性。&lt;/p>
&lt;h2 id="3sizeof详细用例">3.sizeof详细用例
&lt;/h2>&lt;p>在 C++ 中，&lt;code>sizeof&lt;/code> 运算符提供了类型或对象所占内存的大小（以字节为单位），这可以在多种情况下帮助优化内存分配：&lt;/p>
&lt;h3 id="31动态数组分配">3.1.动态数组分配
&lt;/h3>&lt;p>使用 &lt;code>sizeof&lt;/code> 确定数组元素类型的大小，然后根据需要的元素数量动态分配数组。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用 arr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="32避免过度分配">3.2.避免过度分配
&lt;/h3>&lt;p>对于结构体或类，使用 &lt;code>sizeof&lt;/code> 来确保为实例分配的内存正好满足需求。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">MyStruct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyStruct&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">MyStruct&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyStruct&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用 s
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="33使用-sizeof-与-new-表达式">3.3.使用 &lt;code>sizeof&lt;/code> 与 &lt;code>new&lt;/code> 表达式
&lt;/h3>&lt;p>在分配未知大小的对象时，可以使用 &lt;code>sizeof&lt;/code> 来确保分配正确的大小。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyStruct&lt;/span>&lt;span class="p">)];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用 data 作为 MyStruct 类型的内存
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MyStruct&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyStruct&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用 s
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="34动态内存分配的类型安全封装">3.4.动态内存分配的类型安全封装
&lt;/h3>&lt;p>创建模板函数或类来封装内存分配逻辑，使用 &lt;code>sizeof&lt;/code> 确保类型安全。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">allocateArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">intArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">allocateArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用 intArray
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">intArray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="35优化容器类">3.5.优化容器类
&lt;/h3>&lt;p>如果你实现了自定义容器类，使用 &lt;code>sizeof&lt;/code> 来确定存储元素所需的内存，可以避免使用额外的内存分配器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Stack&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="36内存对齐">3.6.内存对齐
&lt;/h3>&lt;p>使用 &lt;code>sizeof&lt;/code> 来确保对象按照特定的对齐要求分配内存，这有助于提高访问效率。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">AlignedStruct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">size_t&lt;/span> &lt;span class="n">alignment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">alignof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AlignedStruct&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AlignedStruct&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">AlignedStruct&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">alignedStruct&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">AlignedStruct&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uintptr_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">memory&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">alignment&lt;/span> &lt;span class="o">-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uintptr_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">memory&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">alignment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用 alignedStruct
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">memory&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="37避免内存泄漏">3.7.避免内存泄漏
&lt;/h3>&lt;p>使用 &lt;code>sizeof&lt;/code> 来跟踪分配的内存大小，确保正确释放内存。&lt;/p>
&lt;h3 id="38利用编译时常量">3.8.利用编译时常量
&lt;/h3>&lt;p>由于 &lt;code>sizeof&lt;/code> 是编译时常量，可以在编译时计算所需内存大小，从而避免运行时计算的开销。&lt;/p>
&lt;h3 id="39使用-stdsize">3.9.使用 &lt;code>std::size&lt;/code>
&lt;/h3>&lt;p>对于标准库容器，使用 &lt;code>std::size&lt;/code> 成员函数来获取容器中元素的数量，然后结合 &lt;code>sizeof&lt;/code> 来分配所需内存。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">numElements&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">numElements&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用 array
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="310c11-标准库特性">3.10.C++11 标准库特性
&lt;/h3>&lt;p>利用 C++11 的 &lt;code>std::array&lt;/code> 或 &lt;code>std::unique_ptr&lt;/code> 等特性，它们内部使用 &lt;code>sizeof&lt;/code> 来管理内存，提供自动内存管理。&lt;/p>
&lt;p>通过这些方法，&lt;code>sizeof&lt;/code> 运算符可以帮助你更精确地控制内存的使用，从而提高程序的性能和效率。然而，也要注意，过度优化可能会导致代码复杂性增加，因此应当在真正需要优化的地方使用这些技术。&lt;/p>
&lt;p>在 C++ 中，&lt;code>sizeof&lt;/code> 运算符提供了一种在编译时获取类型或对象所占内存大小的方式。当涉及到类时，&lt;code>sizeof&lt;/code> 的行为可以更加复杂，因为类可能包含成员变量、继承、内存对齐要求等。以下是一些更详细的点，解释了 &lt;code>sizeof&lt;/code> 与类在 C++ 中的使用：&lt;/p>
&lt;h2 id="4sizeof与类">4.sizeof与类
&lt;/h2>&lt;h3 id="41成员变量和类大小">4.1.成员变量和类大小
&lt;/h3>&lt;p>类的大小由其所有非静态成员变量的大小决定。继承的成员也会被计算在内。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 4 字节（大多数系统上）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 1 字节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 8 字节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of MyClass: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; bytes&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出通常是 13 字节，但可能会因为内存对齐而更大，比如16字节。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="42内存对齐">4.2.内存对齐
&lt;/h3>&lt;p>编译器可能会在类成员之间或类末尾添加填充（padding），以确保数据按照特定的对齐边界存储。这可能会增加类的总大小。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">AlignExample&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 可能需要 8 字节对齐
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of AlignExample: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AlignExample&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出可能大于 9 字节，因为可能会在 &amp;#39;a&amp;#39; 和 &amp;#39;b&amp;#39; 之间添加填充。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="43继承和大小">4.3.继承和大小
&lt;/h3>&lt;p>派生类的 &lt;code>sizeof&lt;/code> 包括了所有基类的成员，以及它自己的成员。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of Derived: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Derived&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出将包括 Base 中的 &amp;#39;x&amp;#39; 和 Derived 中的 &amp;#39;y&amp;#39; 的大小。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="44静态成员和大小">4.4.静态成员和大小
&lt;/h3>&lt;p>静态成员不属于任何类实例，因此它们不计入 &lt;code>sizeof&lt;/code> 类的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">staticVar&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of MyClass with static member: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出通常为 1，因为静态成员不计入大小。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="45空类和大小">4.5.空类和大小
&lt;/h3>&lt;p>空类的大小通常至少为 1 字节，以确保在内存中可以区分不同的实例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Empty&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of Empty class: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Empty&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出通常为 1。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="46位域">4.6.位域
&lt;/h3>&lt;p>位域是一种特殊的成员，它占用一个固定数量的位，但不一定增加类的大小。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BitFields&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="nl">a&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 占用 1 位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">b&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 占用 7 位，可能占用额外的存储单元
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of BitFields: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BitFields&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出可能小于 5 字节，因为位域可能共享存储单元。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="47模板类和大小">4.7.模板类和大小
&lt;/h3>&lt;p>模板类的大小取决于实例化时使用的类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TemplateClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of TemplateClass&amp;lt;int&amp;gt;: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TemplateClass&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出将取决于 &amp;#39;int&amp;#39; 的大小。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="48匿名类和大小">4.8.匿名类和大小
&lt;/h3>&lt;p>匿名类的大小由其成员决定，但它们通常用于定义不命名的类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">lambda&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]()&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of anonymous lambda: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lambda&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 输出取决于捕获的变量和编译器实现。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="49sizeof-与指针">4.9.&lt;code>sizeof&lt;/code> 与指针
&lt;/h3>&lt;p>&lt;code>sizeof&lt;/code> 一个类的指针总是等于指针的大小，而不是类实例的大小。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">MyClass&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of pointer to MyClass: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出是指针的大小，通常为 4 或 8 字节。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>理解 &lt;code>sizeof&lt;/code> 在类中的应用可以帮助你更好地管理内存和优化性能。然而，依赖于 &lt;code>sizeof&lt;/code> 进行编程应该谨慎，因为内存布局可能因编译器和平台而异。&lt;/p>
&lt;p>在 C++中，&lt;code>sizeof&lt;/code>运算符在涉及类时有以下一些重要特点和用途：&lt;/p>
&lt;h3 id="410继承与多态对sizeof的影响">4.10.继承与多态对&lt;code>sizeof&lt;/code>的影响
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>单继承：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当一个类从另一个类继承时，派生类对象的大小包括基类部分的大小和派生类自身成员变量的大小。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">baseData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">derivedData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>sizeof(Derived)&lt;/code>的结果将大于等于&lt;code>sizeof(Base)+sizeof(char)&lt;/code>，具体大小取决于内存对齐要求。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>多继承：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在多继承的情况下，派生类对象的大小是各个基类部分大小之和，再加上派生类自身成员变量的大小以及可能的内存对齐所需的额外空间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">data1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">data2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DerivedMulti&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">data3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>sizeof(DerivedMulti)&lt;/code>的结果将取决于&lt;code>Base1&lt;/code>、&lt;code>Base2&lt;/code>和&lt;code>DerivedMulti&lt;/code>各自的大小以及内存对齐要求。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>虚函数与虚继承：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果一个类包含虚函数，编译器通常会为该类对象添加一个指向虚函数表的指针，这会增加类对象的大小。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">WithVirtual&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">doVirtual&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">normalData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>sizeof(WithVirtual)&lt;/code>将大于&lt;code>sizeof(int)&lt;/code>，因为需要额外的空间来存储虚函数表指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果一个类使用虚继承，也会增加类对象的大小，以存储额外的信息来解决多继承中的二义性问题。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic static</title><link>https://wesigj.github.io/p/c-basic-static/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-static/</guid><description>&lt;h1 id="c面试基础系列-static">C++面试基础系列-static
&lt;/h1>&lt;hr>
&lt;h2 id="1static含义">1.static含义
&lt;/h2>&lt;p>static关键字&lt;/p>
&lt;ul>
&lt;li>静态变量和静态类&lt;/li>
&lt;li>类中的静态成员&lt;/li>
&lt;/ul>
&lt;p>在C++中，static 关键字有多个用途，包括定义静态变量、静态成员函数、静态数据成员、静态常量成员以及在函数中定义静态局部变量。以下是对 static 在C++中的详细描述：&lt;/p>
&lt;h2 id="2普通静态变量">2.普通静态变量
&lt;/h2>&lt;h3 id="21静态全局变量">2.1.静态全局变量
&lt;/h3>&lt;p>当 static 用于全局变量时，它限制了变量的链接范围，使其只在定义它的文件内部可见，其他文件无法访问。&lt;/p>
&lt;h3 id="22静态局部变量">2.2.静态局部变量
&lt;/h3>&lt;p>在函数内部定义的 static 变量具有静态存储期。这意味着它们在程序的整个运行期间都存在，而不是仅在函数调用期间。每次函数调用时，static 局部变量都会保留上一次调用的值。&lt;/p>
&lt;h2 id="3类中静态变量">3.类中静态变量
&lt;/h2>&lt;h3 id="31静态成员变量">3.1.静态成员变量
&lt;/h3>&lt;p>类的静态成员变量属于类本身，而不是类的任何特定对象。它们在所有对象之间共享。静态成员变量在所有实例之前或之后初始化，在程序的整个生命周期内保持其值。&lt;/p>
&lt;h3 id="32静态常量成员">3.2.静态常量成员
&lt;/h3>&lt;p>静态常量成员是类的一个特殊成员，它不仅具有静态存储期，还具有 const 特性。它们在定义时必须被初始化，并且不能被修改。&lt;/p>
&lt;h3 id="33静态成员函数">3.3.静态成员函数
&lt;/h3>&lt;p>静态成员函数属于类本身，而不是类的任何对象。它们可以访问类的静态成员，但不能访问非静态成员，因为它们没有 this 指针。静态成员函数可以在没有创建类的对象的情况下被调用。&lt;/p>
&lt;h3 id="34静态类">3.4.静态类
&lt;/h3>&lt;p>从C++11开始，可以定义一个静态类，它只能包含静态成员，不能有构造函数、析构函数或基类。&lt;/p>
&lt;h3 id="35模板中的静态">3.5.模板中的静态
&lt;/h3>&lt;p>在类模板中，静态成员具有特殊的行为。每个实例化的模板类都有自己的静态成员，它们不是共享的。&lt;/p>
&lt;h3 id="36嵌套静态类">3.6.嵌套静态类
&lt;/h3>&lt;p>在C++中，可以在类中定义静态类（也称为嵌套类），这些类在定义它们的类的外部是不可访问的。&lt;/p>
&lt;ul>
&lt;li>初始化：&lt;/li>
&lt;/ul>
&lt;p>静态数据成员通常在类的定义外部进行初始化，而不是在类内部。&lt;/p>
&lt;ul>
&lt;li>作用域：&lt;/li>
&lt;/ul>
&lt;p>静态成员的作用域是整个程序，它们可以在类的任何对象上通过类名直接访问。&lt;/p>
&lt;ul>
&lt;li>内存分配：&lt;/li>
&lt;/ul>
&lt;p>静态成员变量和静态局部变量存储在静态存储区，而不是堆栈或堆上。
以下是一些示例来说明 static 的使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 静态全局变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">globalVar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 只在定义它的文件内可见
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 静态局部变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">staticVar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 函数调用间保留值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">staticVar&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">staticMember&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 静态常量成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">staticConstMember&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 静态成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">staticMemberFunction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">staticMember&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 可以访问静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在类外初始化静态成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">staticMember&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">functionWithStatic&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用静态成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">staticMemberFunction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">localStaticConst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 局部静态常量，作用域限制在函数内
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic struct</title><link>https://wesigj.github.io/p/c-basic-struct/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-struct/</guid><description>&lt;h1 id="c面试基础系列-struct">C++面试基础系列-struct
&lt;/h1>&lt;hr>
&lt;h2 id="1c中struct">1.C中struct
&lt;/h2>&lt;ul>
&lt;li>struct里面只能放数据类型（基本数据类型，自定义数据类型，指针等），不能放置函数&lt;/li>
&lt;li>C中不存在public、protected、private，&lt;/li>
&lt;li>C中，定义结构体变量，定义必须加struct。&lt;/li>
&lt;li>C不存在继承&lt;/li>
&lt;li>结构体与函数的名称可以相同&lt;/li>
&lt;/ul>
&lt;h2 id="2c中struct">2.C++中struct
&lt;/h2>&lt;p>C++中strcut基本和class一致&lt;/p>
&lt;ul>
&lt;li>C++中，struct默认是public，class默认是private&lt;/li>
&lt;li>C++中，存在public、protected、private&lt;/li>
&lt;li>C++中，使用时，可以不带strcut&lt;/li>
&lt;li>C++中，可以继承&lt;/li>
&lt;li>C++中，若结构体的名字与函数名相同，可以正常调用！但是定义结构体变量时候只能用带struct的！&lt;/li>
&lt;/ul>
&lt;h3 id="21同名函数">2.1.同名函数
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">A&lt;/span>&lt;span class="p">(){}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//ok
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">A&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//error
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="22typedef定义结构体别名">2.2.typedef定义结构体别名
&lt;/h3>&lt;p>A自带struct，不可以直接调用函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">a&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="23继承">2.3.继承
&lt;/h3>&lt;p>struct继承和class是一致&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Base&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;print&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">v2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Derived&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Derived&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3总结">3.总结
&lt;/h2>&lt;h3 id="31c和c中的struct区别">3.1.C和C++中的Struct区别
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">C&lt;/th>
&lt;th style="text-align: left">C++&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">不能将函数放在结构体声明&lt;/td>
&lt;td style="text-align: left">能将函数放在结构体声明&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">在C结构体声明中不能使用C++访问修饰符。&lt;/td>
&lt;td style="text-align: left">public、protected、private 在C++中可以使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">在C中定义结构体变量，如果使用了下面定义必须加struct。&lt;/td>
&lt;td style="text-align: left">可以不加struct&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">结构体不能继承（没有这一概念）。&lt;/td>
&lt;td style="text-align: left">可以继承&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">若结构体的名字与函数名相同，可以正常运行且正常的调用！&lt;/td>
&lt;td style="text-align: left">若结构体的名字与函数名相同，使用结构体，只能使用带struct定义！&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在C++中，struct和class都可以用来定义自定义数据类型，但它们之间存在一些关键的区别：&lt;/p>
&lt;ul>
&lt;li>默认访问权限：
&lt;ul>
&lt;li>struct的成员默认是public，即可以被任何外部代码访问。&lt;/li>
&lt;li>class的成员默认是private，即只能在类的内部访问。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>继承访问权限：
&lt;ul>
&lt;li>当一个struct继承自另一个struct时，基类的public成员在派生类中默认也是public。&lt;/li>
&lt;li>当一个class继承自另一个class时，基类的public成员在派生类中默认是private。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>设计意图：
&lt;ul>
&lt;li>struct通常用于简单的数据结构，如纯数据的聚合，没有太多的封装和抽象。&lt;/li>
&lt;li>class通常用于创建具有封装、继承和多态性的面向对象结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>构造函数和析构函数：
&lt;ul>
&lt;li>struct可以有构造函数和析构函数，但它们默认是public的。&lt;/li>
&lt;li>class也可以有构造函数和析构函数，但它们默认是private的，除非显式指定。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>继承：
&lt;ul>
&lt;li>struct可以被继承，并且基类的成员在派生类中保持原有的访问级别。&lt;/li>
&lt;li>class也可以被继承，但基类的public成员在派生类中默认是private的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>多态：
&lt;ul>
&lt;li>struct支持多态，但通常不会用struct来实现多态性，因为它通常不包含虚函数。&lt;/li>
&lt;li>class支持多态，并且可以包含虚函数和抽象类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>语法：
&lt;ul>
&lt;li>struct和class在语法上几乎相同，都可以包含数据成员、成员函数、继承等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用场景：
&lt;ul>
&lt;li>struct通常用于类似C语言的简单记录结构，没有方法或行为。&lt;/li>
&lt;li>class用于定义具有封装、继承和多态性的复杂数据类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>C++11及以后：
&lt;ul>
&lt;li>从C++11开始，struct和class在使用上更加一致，struct也可以包含成员函数和构造函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在实际使用中，struct和class的区别主要在于默认的访问权限和设计意图。struct更适合简单的数据结构，而class更适合需要封装和继承的面向对象设计。然而，这种区分更多是传统和风格上的，技术上两者几乎可以互换使用。&lt;/li>
&lt;/ul>
&lt;h2 id="4struct字节对齐">4.struct字节对齐
&lt;/h2>&lt;p>结构体占用内存空间大小，结构体存在字节对齐现象，实际使用空间往往大于结构体内部定义的数据的大小总和。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;A size is&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在64位系统中，实际占用空间为16字节，a,b共同占用8字节，c占用8字节&lt;/p>
&lt;h2 id="5struct与const">5.struct与const
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define ADDRESS_USER 0x1000000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define ADDRESS_LENGTH 100
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ADDRESS_LENGTH&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ADDRESS_LENGTH&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ADDRESS_LENGTH&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ADDRESS_LENGTH&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">address_length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pbuffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">Buffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const Buffer test1 = {ADDRESS_USER, ADDRESS_LENGTH, &amp;amp;buffer1[0]};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const Buffer test2 = {ADDRESS_USER, ADDRESS_LENGTH, &amp;amp;buffer2[0]};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const Buffer test3 = {ADDRESS_USER, ADDRESS_LENGTH, &amp;amp;buffer3[0]};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const Buffer test4 = {ADDRESS_USER, ADDRESS_LENGTH, &amp;amp;buffer4[0]};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">Buffer&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">ADDRESS_USER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ADDRESS_LENGTH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">buffer1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">ADDRESS_USER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ADDRESS_LENGTH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">buffer2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">ADDRESS_USER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ADDRESS_LENGTH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">buffer3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">ADDRESS_USER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ADDRESS_LENGTH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">buffer4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]}};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">Buffer&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pstructbuffers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">Buffer&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="nf">get_buffer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">pstructbuffers&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Buffer **tests = (Buffer **)pstructbuffers;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">Buffer&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">tests&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tests&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_buffer&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tests&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">pbuffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;testestes&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;buffer = %s&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tests&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">pbuffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic this</title><link>https://wesigj.github.io/p/c-basic-this/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-this/</guid><description>&lt;h1 id="c面试基础系列-this指针">C++面试基础系列-this指针
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;h2 id="1this指针">1.this指针
&lt;/h2>&lt;p>在 C++ 中，&lt;code>this&lt;/code> 指针是一个特殊的指针，它在每个非静态成员函数中自动可用。&lt;code>this&lt;/code> 指向调用成员函数的当前对象实例。以下是 &lt;code>this&lt;/code> 指针的一些关键特性和用法：&lt;/p>
&lt;h3 id="11特性">1.1.特性
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>隐式存在&lt;/strong>：在成员函数中，&lt;code>this&lt;/code> 指针隐式地可用，不需要定义或声明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>指向当前对象&lt;/strong>：&lt;code>this&lt;/code> 指针指向调用成员函数的对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>类型为当前类的指针&lt;/strong>：&lt;code>this&lt;/code> 的类型是成员函数所在类的指针类型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>在静态成员函数中不可用&lt;/strong>：由于静态成员不属于任何对象实例，因此在静态成员函数中 &lt;code>this&lt;/code> 指针不可用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用于区分成员变量和局部变量&lt;/strong>：当局部变量名与成员变量名相同时，&lt;code>this&lt;/code> 可以用来区分它们。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="12用法">1.2.用法
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>访问成员变量&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">setValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 使用 this 指针访问成员变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>调用其他成员函数&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">doSomething&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 使用 this 指针调用另一个成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>在构造函数中使用&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 在构造函数中使用 this 指针调用成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现赋值运算符&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 检查自赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 返回当前对象的引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>用于多态&lt;/strong>：
当涉及到多态时，&lt;code>this&lt;/code> 指针可以被转换为派生类的指针：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">extraValue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 安全地将 this 转换为 Derived 类型的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">dynamic_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Derived&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用 d 指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>在 lambda 表达式中使用&lt;/strong>：
在成员函数中定义的 lambda 可以捕获 &lt;code>this&lt;/code> 指针：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">](){&lt;/span> &lt;span class="c1">// 通过值捕获 this 指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">doSomething&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免对象复制&lt;/strong>：
使用 &lt;code>this&lt;/code> 指针实现深拷贝或浅拷贝逻辑。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13注意事项">1.3.注意事项
&lt;/h3>&lt;ul>
&lt;li>应谨慎使用 &lt;code>this&lt;/code> 指针，避免不必要的使用，因为它可能会使代码的意图不够明确。&lt;/li>
&lt;li>在多态情况下，使用 &lt;code>dynamic_cast&lt;/code> 转换 &lt;code>this&lt;/code> 指针时，只有在含有虚函数的类中才有效。&lt;/li>
&lt;li>在构造函数和析构函数中也可以使用 &lt;code>this&lt;/code> 指针，但要确保使用方式是安全的，因为这些特殊时期对象可能未完全构造或正在被销毁。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>this&lt;/code> 指针是 C++ 中一个强大的特性，正确使用它可以提高代码的灵活性和表达能力。&lt;/p>
&lt;p>当然可以。在 C++ 中，多态性通常通过虚函数实现，而 &lt;code>this&lt;/code> 指针在多态类中可以用来调用成员函数或访问成员变量，尤其是在需要明确对象类型时。以下是一个使用 &lt;code>this&lt;/code> 指针的多态类的示例：&lt;/p>
&lt;h2 id="2使用-this-指针的多态类的示例">2.使用 &amp;rsquo;this&amp;rsquo; 指针的多态类的示例
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 基类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 虚函数，用于多态
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">speak&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Some generic animal sound&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用 this 指针调用其他成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">performAction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;The animal is performing an action.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">speak&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 派生类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Dog&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">speak&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Woof! Woof!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Cat&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Animal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">speak&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Meow! Meow!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用多态和 this 指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">makeAnimalsSpeak&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">animals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">animal&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">animals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通过 this 指针明确调用 speak 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">speak&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 错误的使用示例，仅用于说明 this 的作用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">animal&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">speak&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 正确的多态调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">animals&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">animals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Dog&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">animals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Cat&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">makeAnimalsSpeak&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">animals&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Animal&lt;/code> 是一个基类，有一个虚函数 &lt;code>speak()&lt;/code> 和一个非虚函数 &lt;code>performAction()&lt;/code>。&lt;code>performAction()&lt;/code> 使用 &lt;code>this&lt;/code> 指针调用 &lt;code>speak()&lt;/code>，展示了如何在类内部使用 &lt;code>this&lt;/code> 指针调用成员函数。&lt;/li>
&lt;li>&lt;code>Dog&lt;/code> 和 &lt;code>Cat&lt;/code> 是从 &lt;code>Animal&lt;/code> 派生的子类，它们重写了 &lt;code>speak()&lt;/code> 函数，提供了具体的实现。&lt;/li>
&lt;li>&lt;code>makeAnimalsSpeak()&lt;/code> 函数接受一个 &lt;code>Animal&lt;/code> 指针的 &lt;code>std::vector&lt;/code>，并调用每个动物的 &lt;code>speak()&lt;/code> 函数。这里展示了如何通过多态性使用 &lt;code>this&lt;/code> 指针。注意，示例中的 &lt;code>((Animal*)this)-&amp;gt;speak();&lt;/code> 是错误的用法，仅用于说明 &lt;code>this&lt;/code> 的作用。正确的用法是 &lt;code>animal-&amp;gt;speak();&lt;/code>，它利用了多态性调用正确的 &lt;code>speak()&lt;/code> 版本。&lt;/li>
&lt;li>在 &lt;code>main()&lt;/code> 函数中，我们创建了一个 &lt;code>Animal&lt;/code> 对象的向量，其中包括 &lt;code>Dog&lt;/code> 和 &lt;code>Cat&lt;/code> 的实例，并调用 &lt;code>makeAnimalsSpeak()&lt;/code> 来演示多态性。&lt;/li>
&lt;/ul>
&lt;p>这个示例展示了如何在多态上下文中使用 &lt;code>this&lt;/code> 指针，以及如何在派生类中重写虚函数来实现不同行为。&lt;/p>
&lt;h2 id="3在c中指针和对象本身有什么区别">3.在C++中，指针和对象本身有什么区别？
&lt;/h2>&lt;p>在 C++ 中，指针和对象本身有几个关键的区别：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>存储内容&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象：对象是实际的数据实体，它占用内存并包含数据和可能的行为（通过成员函数）。&lt;/li>
&lt;li>指针：指针是一个变量，它存储的是另一个对象的内存地址。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存占用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象：对象的大小通常比指针大，因为它包含了实际的数据。&lt;/li>
&lt;li>指针：指针的大小在 32 位系统上通常是 4 字节，在 64 位系统上是 8 字节，与它所指向的对象大小无关。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>访问数据&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象：可以直接访问对象的成员变量和函数。&lt;/li>
&lt;li>指针：需要使用解引用操作符（*）来访问指针指向的对象的成员。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>生命周期&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象：对象有自己的生命周期，它可能在栈上自动创建和销毁，或在堆上通过 &lt;code>new&lt;/code> 和 &lt;code>delete&lt;/code> 进行管理。&lt;/li>
&lt;li>指针：指针本身有自己的生命周期，但它指向的对象可能有不同的生命周期。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>别名&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象：对象通常只有一个标识符。&lt;/li>
&lt;li>指针：可以通过多个指针引用同一个对象（别名），这可能导致复杂的内存管理问题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可变性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象：对象的地址在声明后通常不会改变（除非使用 &lt;code>std::move&lt;/code>）。&lt;/li>
&lt;li>指针：指针的值（即它所指向的地址）可以在运行时改变。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数组和指针&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象：不能直接将对象视为数组来处理。&lt;/li>
&lt;li>指针：指针可以进行算术运算（如加法和减法），这使得指针可以像数组一样使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>传递性能&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象：按值传递对象可能会涉及复制构造函数，这可能代价昂贵。&lt;/li>
&lt;li>指针：指针传递的是地址，通常是很小的数据量，开销较小。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象：使用对象通常更安全，因为它们不允许悬空或未定义的状态。&lt;/li>
&lt;li>指针：指针需要小心管理，不当使用可能导致悬空指针、野指针或内存泄漏。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象：使用变量名直接访问。&lt;/li>
&lt;li>指针：需要通过 &lt;code>-&amp;gt;&lt;/code> 运算符来访问指针指向的对象的成员。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>理解指针和对象之间的区别对于编写有效和安全的 C++ 程序至关重要。指针提供了强大的灵活性，但也需要更多的注意力来确保正确管理内存和对象的生命周期。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic union</title><link>https://wesigj.github.io/p/c-basic-union/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-union/</guid><description>&lt;h1 id="c面试基础系列-union">C++面试基础系列-union
&lt;/h1>&lt;ul>
&lt;li>&lt;a class="link" href="#c%e9%9d%a2%e8%af%95%e5%9f%ba%e7%a1%80%e7%b3%bb%e5%88%97-union" >C++面试基础系列-union&lt;/a>
&lt;ul>
&lt;li>&lt;a class="link" href="#1union%e5%90%ab%e4%b9%89" >1.union含义&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#2union%e7%9a%84%e5%85%b3%e9%94%ae%e7%82%b91" >2.union的关键点1&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#3union%e7%9a%84%e5%85%b3%e9%94%ae%e7%82%b92" >3.union的关键点2&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#4union%e4%b8%8estruct%e7%9a%84%e5%8c%ba%e5%88%ab" >4.union与struct的区别&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#%e5%85%b3%e4%ba%8e%e4%bd%9c%e8%80%85" >关于作者&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1union含义">1.union含义
&lt;/h2>&lt;p>在C++中，union是一种特殊的数据类型，它允许在相同的内存位置存储不同的数据类型。union与struct类似，但它的所有成员都共享相同的内存地址。这意味着在任意时刻只能访问union中的一个成员，如果访问了一个新的成员，那么之前存储的值将被覆盖。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">union&lt;/span> &lt;span class="nc">UnionName&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">type1&lt;/span> &lt;span class="n">member1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">type2&lt;/span> &lt;span class="n">member2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">typeN&lt;/span> &lt;span class="n">memberN&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的type1到typeN是数据类型，member1到memberN是成员变量。&lt;/p>
&lt;p>使用union的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">union&lt;/span> &lt;span class="nc">Data&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Data&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 存储一个整数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Integer: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 存储一个字符，这将覆盖data.i的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Character: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// data.i的值已经被覆盖，所以输出将不是10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Integer after storing character: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2union的关键点1">2.union的关键点1
&lt;/h2>&lt;ul>
&lt;li>union的所有成员始于相同的内存地址。&lt;/li>
&lt;li>union的大小等于其最大成员的大小。在上面的例子中，Data的大小将等于一个double的大小，因为double通常比int和char占用更多的字节。&lt;/li>
&lt;li>union可用于内存对齐和打包，以及访问字节级数据。&lt;/li>
&lt;li>union不允许有引用类型的成员，也不能有继承或虚函数。&lt;/li>
&lt;li>union可以用于位域操作，尽管这通常不是推荐的做法。&lt;/li>
&lt;/ul>
&lt;h2 id="3union的关键点2">3.union的关键点2
&lt;/h2>&lt;p>联合（union）是一种节省空间的特殊的类，一个 union 可以有多个数据成员，但是在任意时刻只有一个数据成员可以有值。当某个成员被赋值后其他成员变为未定义状态。联合有如下特点：&lt;/p>
&lt;ul>
&lt;li>默认访问控制符为 public&lt;/li>
&lt;li>可以含有构造函数、析构函数&lt;/li>
&lt;li>不能含有引用类型的成员&lt;/li>
&lt;li>不能继承自其他类，不能作为基类&lt;/li>
&lt;li>不能含有虚函数&lt;/li>
&lt;li>匿名 union 在定义所在作用域可直接访问 union 成员&lt;/li>
&lt;li>匿名 union 不能包含 protected 成员或 private 成员&lt;/li>
&lt;li>全局匿名联合必须是静态（static）的&lt;/li>
&lt;/ul>
&lt;h2 id="4union与struct的区别">4.union与struct的区别
&lt;/h2>&lt;ul>
&lt;li>struct的每个成员都有自己的内存位置，而union的所有成员共享一个内存位置。&lt;/li>
&lt;li>struct可以有构造函数、析构函数和成员函数，而union不能。&lt;/li>
&lt;li>struct可以用于继承，而union不能。&lt;/li>
&lt;/ul>
&lt;p>union在需要节约内存或需要通过同一个内存位置访问不同类型的数据时非常有用，但使用时需要小心，以避免数据被意外覆盖。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic using</title><link>https://wesigj.github.io/p/c-basic-using/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-using/</guid><description>&lt;h1 id="c面试基础系列-using">C++面试基础系列-using
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;h2 id="1using关键字">1.using关键字
&lt;/h2>&lt;p>在 C++ 中，&lt;code>using&lt;/code> 关键字有几种不同的用法，主要用于别名声明、类型导入和命名空间的成员导入。以下是 &lt;code>using&lt;/code> 的几种常见用法：&lt;/p>
&lt;h3 id="11-别名声明type-alias">1.1. 别名声明（Type Alias）
&lt;/h3>&lt;p>使用 &lt;code>using&lt;/code> 为类型创建一个别名，简化复杂类型的书写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">int_ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">int_ptr&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 使用别名创建智能指针
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="12-模板别名">1.2. 模板别名
&lt;/h3>&lt;p>为模板类型创建一个别名，简化模板类型的书写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">IntVector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">IntVector&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 使用别名创建向量
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13-类别名">1.3. 类别名
&lt;/h3>&lt;p>为类或其指针、引用类型创建别名。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">MyHandle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 创建类指针的别名
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MyHandle&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="14-命名空间导入">1.4. 命名空间导入
&lt;/h3>&lt;p>使用 &lt;code>using&lt;/code> 从命名空间中导入特定的名称，避免重复前缀。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">NS&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">NS&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 导入函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 直接调用
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="15-命名空间别名">1.5. 命名空间别名
&lt;/h3>&lt;p>为命名空间创建别名，简化长命名空间的引用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">my_namespace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">my_namespace&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">seconds&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="16-导入构造函数">1.6. 导入构造函数
&lt;/h3>&lt;p>使用 &lt;code>using&lt;/code> 语句导入基类的构造函数，使得派生类具有与基类相同的构造函数签名。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">using&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 导入 Base 类的构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Derived&lt;/span> &lt;span class="nf">d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 直接使用 Base 的构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="17-委托构造函数">1.7. 委托构造函数
&lt;/h3>&lt;p>C++11 允许在类内部使用 &lt;code>using&lt;/code> 委托其他构造函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="18-注意事项">1.8. 注意事项
&lt;/h3>&lt;ul>
&lt;li>&lt;code>using&lt;/code> 声明不应该与 &lt;code>using&lt;/code> 指令混淆，后者是命名空间的另一种用法，用于使命名空间中的名称在当前作用域内可用。&lt;/li>
&lt;li>&lt;code>using&lt;/code> 声明是作用域限定的，它只在声明它们的作用域内有效。&lt;/li>
&lt;li>在模板中使用 &lt;code>using&lt;/code> 可以简化模板类型的书写，特别是在模板别名中。&lt;/li>
&lt;/ul>
&lt;p>正确使用 &lt;code>using&lt;/code> 可以提高代码的可读性和可维护性，但过度使用或不当使用可能会导致代码可读性降低。&lt;/p>
&lt;p>在 C++ 中，&lt;code>using&lt;/code> 声明（using declaration）和 &lt;code>using&lt;/code> 指令（using directive）是两种不同的命名空间相关的关键字，它们各自有不同的用途和适用场景：&lt;/p>
&lt;h2 id="2c-中的-using-声明和-using-指令有什么区别">2.C++ 中的 using 声明和 using 指令有什么区别？
&lt;/h2>&lt;p>C++ 中的 using 声明和 using 指令有什么区别，它们各自在什么情况下使用？&lt;/p>
&lt;h3 id="21using-声明-using-declaration">2.1.using 声明 (using declaration)
&lt;/h3>&lt;p>&lt;code>using&lt;/code> 声明用于从命名空间中导入特定的名称（如函数、变量、类型等），使其在当前作用域内可以直接使用而不需要命名空间前缀。&lt;/p>
&lt;p>&lt;strong>语法：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 导入 std 命名空间中的 vector
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 直接使用 vector 而不需要 std:: 前缀
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>使用场景：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当你需要在当前作用域内多次使用某个命名空间中的特定名称时。&lt;/li>
&lt;li>当你想要简化代码书写，避免重复书写长命名空间前缀时。&lt;/li>
&lt;/ul>
&lt;h3 id="22using-指令-using-directive">2.2.using 指令 (using directive)
&lt;/h3>&lt;p>&lt;code>using&lt;/code> 指令用于将整个命名空间中的所有名称导入到当前作用域，使得所有名称都可以不加前缀地直接使用。&lt;/p>
&lt;p>&lt;strong>语法：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">ns&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 导入 std 命名空间中的所有内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 直接使用 cout 和 endl 而不需要 std:: 前缀
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>使用场景：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当你需要在当前作用域内使用某个命名空间中的多个名称时。&lt;/li>
&lt;li>当你确信当前作用域内不会发生名称冲突时。&lt;/li>
&lt;/ul>
&lt;h3 id="23区别">2.3.区别
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>作用范围&lt;/strong>：&lt;code>using&lt;/code> 声明只导入特定的名称，而 &lt;code>using&lt;/code> 指令导入整个命名空间的所有名称。&lt;/li>
&lt;li>&lt;strong>名称冲突&lt;/strong>：使用 &lt;code>using&lt;/code> 声明时，不容易造成名称冲突，因为只有特定的名称被导入；而 &lt;code>using&lt;/code> 指令可能会引起名称冲突，因为它导入了所有名称。&lt;/li>
&lt;li>&lt;strong>代码清晰度&lt;/strong>：&lt;code>using&lt;/code> 声明可以提高代码的清晰度，因为它明确了名称的来源；而 &lt;code>using&lt;/code> 指令可能会降低代码的清晰度，因为它隐藏了名称的来源。&lt;/li>
&lt;li>&lt;strong>使用限制&lt;/strong>：&lt;code>using&lt;/code> 指令不能用于类的作用域内，而 &lt;code>using&lt;/code> 声明可以。&lt;/li>
&lt;/ol>
&lt;h3 id="24最佳实践">2.4.最佳实践
&lt;/h3>&lt;ul>
&lt;li>尽量避免在大型代码库或头文件中使用 &lt;code>using&lt;/code> 指令，因为它可能导致名称冲突和降低代码的可读性。&lt;/li>
&lt;li>优先使用 &lt;code>using&lt;/code> 声明来导入所需的特定名称，这样可以提高代码的可维护性和可读性。&lt;/li>
&lt;li>在确实需要使用 &lt;code>using&lt;/code> 指令时，最好将其限制在较小的作用域内，如函数或代码块内部。&lt;/li>
&lt;/ul>
&lt;p>理解 &lt;code>using&lt;/code> 声明和 &lt;code>using&lt;/code> 指令的区别，以及它们各自的适用场景，有助于编写更清晰、更安全的 C++ 代码。&lt;/p>
&lt;h2 id="3using示例">3.using示例
&lt;/h2>&lt;p>以下是一个简单的 C++ 代码示例，展示了 &lt;code>using&lt;/code> 声明和 &lt;code>using&lt;/code> 指令的使用及其区别：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用 using 指令导入整个 std 命名空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 可以直接使用命名空间 std 中的类型和函数，无需前缀
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用 using 声明导入特定函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">using&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">npos&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 从 string 类中导入 npos 成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用导入的 npos
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello, using declaration!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">string&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_type&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;using&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Position of &amp;#39;using&amp;#39;: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 输出找到的字符串位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Position of &amp;#39;example&amp;#39; (not found): &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;example&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 使用 npos 作为未找到的默认值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 尝试使用 std::vector 的 size() 成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Size of vector: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 正确使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果注释掉 using namespace std; 则需要使用 std:: 前缀来调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// cout &amp;lt;&amp;lt; &amp;#34;Size of vector (with prefix): &amp;#34; &amp;lt;&amp;lt; std::vector&amp;lt;int&amp;gt;::size() &amp;lt;&amp;lt; endl;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>我们首先使用 &lt;code>using namespace std;&lt;/code> 导入了整个 &lt;code>std&lt;/code> 命名空间，这允许我们在 &lt;code>main&lt;/code> 函数中直接使用 &lt;code>std&lt;/code> 命名空间中的所有名称，如 &lt;code>cout&lt;/code>、&lt;code>endl&lt;/code> 和 &lt;code>vector&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接着，我们使用 &lt;code>using string::npos;&lt;/code> 声明导入了 &lt;code>std::string&lt;/code> 类的 &lt;code>npos&lt;/code> 成员。这是一种 &lt;code>using&lt;/code> 声明，它只导入了 &lt;code>string&lt;/code> 类中的 &lt;code>npos&lt;/code> 常量，而不是整个 &lt;code>string&lt;/code> 类或 &lt;code>std&lt;/code> 命名空间。这样，我们就可以在不使用 &lt;code>std::&lt;/code> 前缀的情况下直接使用 &lt;code>npos&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>示例中展示了使用 &lt;code>npos&lt;/code> 来查询字符串中未找到的子字符串的默认行为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我们可以直接使用 &lt;code>vector&lt;/code> 的 &lt;code>size()&lt;/code> 成员函数，因为我们已经通过 &lt;code>using namespace std;&lt;/code> 导入了 &lt;code>std&lt;/code> 命名空间。如果你注释掉 &lt;code>using namespace std;&lt;/code>，则需要使用 &lt;code>std::&lt;/code> 前缀来访问 &lt;code>size()&lt;/code>，如示例中注释的部分所示。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这个示例展示了 &lt;code>using&lt;/code> 声明和 &lt;code>using&lt;/code> 指令如何影响作用域内名称的使用，以及如何通过它们来简化代码书写。使用 &lt;code>using&lt;/code> 声明可以避免命名空间的冲突，而 &lt;code>using&lt;/code> 指令则提供了一种快速访问命名空间中所有名称的方法，但可能会引起名称冲突。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic volatile</title><link>https://wesigj.github.io/p/c-basic-volatile/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-volatile/</guid><description>&lt;h1 id="c面试基础系列-volatile">C++面试基础系列-volatile
&lt;/h1>&lt;h2 id="1volatile核心规则">1.volatile核心规则
&lt;/h2>&lt;ul>
&lt;li>volatile修饰变量或指针功能
&lt;ul>
&lt;li>告诉编译器，被volatile修饰的变量或指针（寄存器或硬件寄存器），不要进行优化&lt;/li>
&lt;li>变量或指针在中断服务子程序，用户函数中同时调用，不要进行优化&lt;/li>
&lt;li>多线程，多任务同时调用变量或指针，使用volatile修饰，表示每次操作该变量或指针，都要从内存中取最新的值进行操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>简单来说
&lt;ul>
&lt;li>编译器，不要优化&lt;/li>
&lt;li>从内存取值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="2c与c中volatile区别">2.C与C++中volatile区别
&lt;/h2>&lt;ul>
&lt;li>在C和C++中，volatile关键字都用于告诉编译器一个变量可能会在程序的控制之外被改变，通常是由于硬件的作用。尽管C和C++都支持volatile，但它们在某些方面存在一些差异：&lt;/li>
&lt;/ul>
&lt;h3 id="21c语言中的volatile">2.1.C语言中的volatile
&lt;/h3>&lt;ul>
&lt;li>在C语言中，volatile主要用于多线程环境或中断服务例程（ISR）中，指示编译器该变量可能会在任何时候被改变，因此每次使用时都应该从内存中重新读取，而不是从寄存器中。&lt;/li>
&lt;li>C标准并没有详细说明volatile的所有行为，尤其是在多线程同步方面。&lt;/li>
&lt;/ul>
&lt;h3 id="22c中的volatile">2.2.C++中的volatile
&lt;/h3>&lt;ul>
&lt;li>C++中的volatile用法与C类似，但C++标准对volatile的行为有更明确的定义，特别是在多线程环境中。&lt;/li>
&lt;li>在C++11及以后的版本中，标准定义了内存模型，volatile变量的访问将遵循这些规则，以确保在多线程环境中对它们的访问是原子的（如果需要）。&lt;/li>
&lt;/ul>
&lt;h3 id="23原子性和顺序">2.3.原子性和顺序
&lt;/h3>&lt;ul>
&lt;li>在C++11中，volatile关键字不保证操作的原子性，即使在多线程环境中也是如此。如果需要原子性，C++提供了std::atomic模板和相关的原子操作函数。&lt;/li>
&lt;li>C++中的volatile也不保证编译器不会重排相关操作的顺序，这与C类似。&lt;/li>
&lt;/ul>
&lt;h3 id="24易失性">2.4.易失性
&lt;/h3>&lt;ul>
&lt;li>在C和C++中，volatile都可以用来指示编译器一个变量是易失性的，即它可能会因为外部硬件事件而改变。&lt;/li>
&lt;/ul>
&lt;h3 id="25优化">2.5.优化
&lt;/h3>&lt;ul>
&lt;li>由于volatile告诉编译器变量可能在任何时候改变，编译器将不会对这个变量进行优化。&lt;/li>
&lt;/ul>
&lt;h3 id="26使用场景">2.6.使用场景
&lt;/h3>&lt;ul>
&lt;li>在嵌入式编程中，volatile经常用于访问内存映射的硬件寄存器，因为这些寄存器可能会被外部硬件改变。&lt;/li>
&lt;/ul>
&lt;h3 id="27c特有的特性">2.7.C++特有的特性
&lt;/h3>&lt;ul>
&lt;li>C++中volatile的使用可能会受到C++特有的特性影响，如类和对象模型。例如，C++中的volatile成员变量需要特别注意，因为它们的行为可能不如预期。&lt;/li>
&lt;/ul>
&lt;h3 id="28c20引入的变化如果有">2.8.C++20引入的变化（如果有）
&lt;/h3>&lt;ul>
&lt;li>C++20标准可能会对volatile有进一步的说明或改进，但截至知识截止日期，这些变化尚未明确。&lt;/li>
&lt;/ul>
&lt;p>总结来说，C和C++中的volatile在基本用途上相似，但C++标准提供了更明确的定义，尤其是在多线程环境中。在C++中，如果需要原子性或线程安全的同步，应该使用std::atomic或其他同步机制，而不是仅仅依赖volatile。&lt;/p>
&lt;h2 id="3volatile常见面试问题">3.volatile常见面试问题
&lt;/h2>&lt;p>在面试中，&lt;code>volatile&lt;/code> 关键字是一个常见的话题，以下是一些可能会问到的问题以及相关的答案：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>&lt;code>volatile&lt;/code> 关键字是什么？&lt;/strong>
&lt;code>volatile&lt;/code> 是一种类型修饰符，用于告诉编译器该变量可能会在程序的控制之外被改变，例如由中断服务程序、多线程或硬件修改。使用 &lt;code>volatile&lt;/code> 可以防止编译器对这些变量进行优化，确保每次访问都直接从内存中读取或写入，从而保证数据的一致性。&lt;/li>
&lt;li>&lt;strong>&lt;code>volatile&lt;/code> 变量的可见性如何保证？&lt;/strong>
&lt;code>volatile&lt;/code> 变量保证了对所有线程的可见性。当一个线程修改了一个 &lt;code>volatile&lt;/code> 变量时，其他线程能够立即看到这个修改，这是因为 &lt;code>volatile&lt;/code> 变量的写操作会立即刷新到主内存中，而读操作会从主内存中读取最新值。&lt;/li>
&lt;li>&lt;strong>&lt;code>volatile&lt;/code> 能否保证原子性？&lt;/strong>
&lt;code>volatile&lt;/code> 关键字不能保证操作的原子性。它只能确保单次的读/写操作具有原子性，但对于复合操作，如自增（&lt;code>i++&lt;/code>），&lt;code>volatile&lt;/code> 无法保证整个操作的原子性。因此，对于需要原子性保证的操作，应该使用其他同步机制，如 &lt;code>synchronized&lt;/code> 或 &lt;code>AtomicInteger&lt;/code>。&lt;/li>
&lt;li>&lt;strong>&lt;code>volatile&lt;/code> 变量在多线程中的使用场景有哪些？&lt;/strong>
&lt;code>volatile&lt;/code> 变量适用于多线程环境下的某些特定场景，例如：
&lt;ul>
&lt;li>作为状态标志，用于控制线程间的协调，如退出循环的条件。&lt;/li>
&lt;li>在没有其他同步机制的情况下，用于保护简单的状态变量，以确保变量的可见性和有序性。&lt;/li>
&lt;li>与锁结合使用，实现读写锁模式，提高性能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&lt;code>volatile&lt;/code> 与 &lt;code>const&lt;/code> 的区别是什么？&lt;/strong>
&lt;code>const&lt;/code> 关键字用于定义常量，即值不能被修改的变量。而 &lt;code>volatile&lt;/code> 用于定义可能会在程序的控制之外被改变的变量。&lt;code>const&lt;/code> 保证的是值的不变性，而 &lt;code>volatile&lt;/code> 保证的是变量的可见性和禁止指令重排序。&lt;/li>
&lt;li>&lt;strong>&lt;code>volatile&lt;/code> 指针是什么？&lt;/strong>
&lt;code>volatile&lt;/code> 指针是指指向的变量可能会在程序的控制之外被改变的指针。它可以是指向 &lt;code>volatile&lt;/code> 变量的指针，也可以是指针本身的值是 &lt;code>volatile&lt;/code> 的。在使用 &lt;code>volatile&lt;/code> 指针时，编译器不会对通过该指针进行的操作进行优化。&lt;/li>
&lt;li>&lt;strong>在嵌入式系统中，&lt;code>volatile&lt;/code> 的作用是什么？&lt;/strong>
在嵌入式系统中，&lt;code>volatile&lt;/code> 通常用于声明与硬件寄存器相关的变量，以确保编译器不会对与硬件交互的代码进行优化。这是因为硬件寄存器的值可能会由硬件本身的操作所改变，需要每次访问时都从内存中读取最新值。&lt;/li>
&lt;li>&lt;strong>&lt;code>volatile&lt;/code> 能否替代 &lt;code>synchronized&lt;/code>？&lt;/strong>
&lt;code>volatile&lt;/code> 在某些情况下可以作为 &lt;code>synchronized&lt;/code> 的轻量级替代，特别是在读操作远多于写操作的场景下。但是，由于 &lt;code>volatile&lt;/code> 不能保证复合操作的原子性，它不能完全替代 &lt;code>synchronized&lt;/code>。在需要原子性保证的情况下，仍然需要使用 &lt;code>synchronized&lt;/code> 或其他同步机制。&lt;/li>
&lt;/ol>
&lt;p>理解 &lt;code>volatile&lt;/code> 的作用和限制对于编写正确的多线程程序至关重要。在面试中，展示对 &lt;code>volatile&lt;/code> 的深入理解可以体现候选人的专业知识和经验。&lt;/p>
&lt;h2 id="4volatile与const与指针">4.volatile与const与指针
&lt;/h2>&lt;ul>
&lt;li>（1）一个参数既可以是const还可以是volatile吗？为什么？
可以。一个例子是只读的状态寄存器。它是volatile因为它可能被意想不到地改变。它是const因为程序不应该试图去修改它。&lt;/li>
&lt;li>（2）一个指针可以是volatile吗？为什么？
可以。尽管这并不常见。一个例子是当一个中断服务子程序修改一个指向一个buffer的指针时。&lt;/li>
&lt;/ul>
&lt;h2 id="5应用场景">5.应用场景
&lt;/h2>&lt;p>在嵌入式系统开发中，正确地使用 volatile 关键字对于避免硬件中断对程序执行的影响至关重要。以下是一些关于如何在嵌入式系统中使用 volatile 的关键点：&lt;/p>
&lt;ul>
&lt;li>防止编译器优化：volatile 告诉编译器，即使在代码中看似没有改变，变量的值也可能在任何时候改变，因此编译器不应进行优化&lt;/li>
&lt;li>中断服务程序中的变量：在中断服务程序（ISR）中，经常需要访问或修改一些变量。如果这些变量在主程序中也被访问，那么它们应该被声明为 volatile，以确保每次访问时都能获取最新的值&lt;/li>
&lt;li>多线程共享变量：在多线程环境中，如果多个任务共享某些变量，并且这些变量的值可能被任何一个任务改变，那么这些变量也应该被声明为 volatile，以确保所有任务都能看到其他任务对共享变量的最新修改&lt;/li>
&lt;li>硬件寄存器访问：在嵌入式编程中，硬件寄存器的值可能会被硬件本身的操作所改变。使用 volatile 修饰硬件寄存器可以确保每次访问都是直接从硬件寄存器中读取，而不是从CPU缓存中&lt;/li>
&lt;li>保证内存顺序：volatile 还可以防止编译器和处理器对指令的重排序，确保指令按照代码中的顺序执行，这对于中断和主程序之间的同步尤为重要&lt;/li>
&lt;li>使用场景：volatile 适用于并行设备的硬件寄存器、中断服务子程序中访问的非自动变量、多线程应用中被多个任务共享的变量，以及需要防止编译器优化的情况，如for循环延时程序&lt;/li>
&lt;li>注意限制：虽然 volatile 可以确保变量的可见性，但它不保证操作的原子性。在多线程环境中，如果需要原子性，还需要使用其他同步机制，如互斥锁&lt;/li>
&lt;li>性能影响：使用 volatile 可能会降低程序的性能，因为它阻止了编译器进行某些优化。因此，只有在必要时才应该使用 volatile&lt;/li>
&lt;/ul>
&lt;p>总结来说，volatile 在嵌入式系统中是一个关键的关键字，用于确保变量的值能够反映出最新的状态，特别是在中断服务程序和多线程环境中。然而，开发者应当谨慎使用，避免滥用，同时注意它并不能替代其他同步机制来保证操作的原子性。&lt;/p>
&lt;h2 id="6应用示例">6.应用示例
&lt;/h2>&lt;p>（1）并行设备的硬件寄存器（如状态寄存器）。&lt;/p>
&lt;ul>
&lt;li>假设要对一个设备进行初始化，此设备的寄存器为0x0x80008004。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="mh">0x0&lt;/span>&lt;span class="n">x80008004&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//定义一个IO端口；
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果开启的 &lt;strong>-O3&lt;/strong> 优化，那么经过编译器优化后，编译器认为前面循环，对最后的结果毫无影响。&lt;/li>
&lt;li>最终只是将output这个指针赋值为 9，所以汇编后的程序相当于：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果你需要程序完全按照你所写程序运行，那就用volatile修饰变量。&lt;/li>
&lt;li>通知编译器这个变量是一个不稳定的，在遇到此变量时候不要优化。&lt;/li>
&lt;/ul>
&lt;p>（2）一个中断服务子程序中访问到的变量；&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">dosomething&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Interrupt service routine */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">IRS&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>上面示例程序的本意是产生中断时，由中断服务子程序IRS响应中断，变更程序变量i，使在main函数中调用dosomething函数，&lt;/li>
&lt;li>但是，由于编译器判断在main函数里面没有修改过i，因此可能只执行一次对从i到某寄存器的读操作，然后每次if判断都只使用这个寄存器里面的“i副本”，导致dosomething永远不会被调用。&lt;/li>
&lt;li>如果将变量i加上volatile修饰，则编译器保证对变量i的读写操作都不会被优化，从而保证了变量i被外部程序更改后能及时在原程序中得到感知。&lt;/li>
&lt;/ul>
&lt;p>（3）多线程应用中被多个任务共享的变量。&lt;/p>
&lt;ul>
&lt;li>当多个线程共享某一个变量时，该变量的值会被某一个线程更改，应该用 volatile 声明。&lt;/li>
&lt;li>作用是防止编译器优化把变量从内存装入CPU寄存器中，当一个线程更改变量后，未及时同步到其它线程中导致程序出错。&lt;/li>
&lt;li>volatile的作用是让编译器每次操作该变量时一定要从内存中真正取出，而不是使用已经存在寄存器中的值。示例如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">volatile&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">bStop&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//bStop 为共享全局变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//第一个线程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">threadFunc1&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">bStop&lt;/span>&lt;span class="p">){...}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//第二个线程终止上面的线程循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">threadFunc2&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bStop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>要想通过第二个线程终止第一个线程循环，如果bStop不使用volatile定义，那么这个循环将是一个死循环，因为bStop已经读取到了寄存器中，寄存器中bStop的值永远不会变成FALSE，&lt;/li>
&lt;li>加上volatile，程序在执行时，每次均从内存中读出bStop的值，就不会死循环了。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic 函数指针与指针函数</title><link>https://wesigj.github.io/p/c-basic-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%B8%8E%E6%8C%87%E9%92%88%E5%87%BD%E6%95%B0/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%B8%8E%E6%8C%87%E9%92%88%E5%87%BD%E6%95%B0/</guid><description>&lt;h1 id="c面试基础系列-函数指针与指针函数">C++面试基础系列-函数指针与指针函数
&lt;/h1>&lt;p>[toc]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;h2 id="1function_pointer函数指针">1.function_pointer函数指针
&lt;/h2>&lt;ul>
&lt;li>function_pointer函数指针也是一个指针，
&lt;ul>
&lt;li>只不过函数指针可以指向函数，可以通过该指针调用函数&lt;/li>
&lt;li>联想到重载，多态，模板，只不过函数指针需要重新调整指针指向的函数类型&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="2pointer_function指针函数">2.pointer_function指针函数
&lt;/h2>&lt;ul>
&lt;li>指针函数实际上只是函数返回值返回一个指针&lt;/li>
&lt;/ul>
&lt;h2 id="3面试中最喜欢的是函数指针和指针函数的区别">3.面试中，最喜欢的是函数指针和指针函数的区别
&lt;/h2>&lt;p>函数指针和指针函数是两个不同的概念，主要区别如下：&lt;/p>
&lt;h3 id="31定义">3.1.定义
&lt;/h3>&lt;ol>
&lt;li>指针函数：
&lt;ul>
&lt;li>本质是一个函数，其返回值是一个指针。&lt;/li>
&lt;li>例如：&lt;code>int* fun() { /* 函数体 */ }&lt;/code>，这里的函数 &lt;code>fun&lt;/code>就是一个指针函数，它返回一个指向整数的指针。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>函数指针：
&lt;ul>
&lt;li>是指向函数的指针变量。&lt;/li>
&lt;li>例如：&lt;code>int (*pf)();&lt;/code>，这里 &lt;code>pf&lt;/code>是一个函数指针，它指向一个返回值为整数的函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="32用法">3.2.用法
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>指针函数的用法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>先调用指针函数，得到一个指针结果，然后通过这个指针访问其所指向的内存空间中的数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>看出下面代码的错误了吗？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>ERROR:a是一个局部变量，调用指向a的指针，会出现内存泄漏，应避免这种用法。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>函数指针的用法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>可以将函数指针作为参数传递给其他函数，实现回调函数的功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Result: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="33存储方式">3.3.存储方式
&lt;/h3>&lt;ol>
&lt;li>指针函数：在内存中与普通函数一样，有特定的代码段存储函数体，执行时将在该代码段中运行。返回的指针则存储在相应的内存地址中。&lt;/li>
&lt;li>函数指针：本身作为一个变量存储在内存中，它的值是所指向函数的入口地址。&lt;/li>
&lt;/ol>
&lt;h2 id="4函数指针用法">4.函数指针用法
&lt;/h2>&lt;p>函数指针是C++中一种重要的特性，它允许将函数作为值来处理。以下是函数指针的一些常见用法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>动态函数调用&lt;/strong>：
使用函数指针可以在运行时决定调用哪个函数。这在实现回调机制、策略模式或事件处理系统时非常有用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">function1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Function 1&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">function2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Function 2&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">functionPtr&lt;/span>&lt;span class="p">)()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">function1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 函数指针指向function1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">functionPtr&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用function1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">functionPtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">function2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 现在指向function2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">functionPtr&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用function2
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现回调函数&lt;/strong>：
函数指针经常用于回调函数，即作为参数传递给另一个函数，然后在该函数内部调用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">)())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">myFunction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Hello from myFunction&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myFunction&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>作为数据成员&lt;/strong>：
在类中使用函数指针作为数据成员，允许对象根据行为的不同来调用不同的函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Event&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="p">)();&lt;/span> &lt;span class="c1">// 函数指针作为数据成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Event&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">myFunction&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用myFunction
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>数组和向量&lt;/strong>：
函数指针可以存储在数组或向量中，用于管理一组函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">functions&lt;/span>&lt;span class="p">[])()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">function1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">function2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">func&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">functions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>函数指针类型转换&lt;/strong>：
在某些情况下，可能需要将一个函数指针转换为另一个类型的指针，或者反之。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">FuncType&lt;/span>&lt;span class="p">)();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">intFunc&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">function1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 类型转换
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现多态&lt;/strong>：
函数指针可以用来实现类似多态的行为，尤其是在使用函数作为类的成员或参数时。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Execute in Derived&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Base&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">basePtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">basePtr&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 多态调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span> &lt;span class="n">basePtr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>用于排序和搜索算法&lt;/strong>：
在标准库算法中，如 &lt;code>std::sort&lt;/code>或 &lt;code>std::find_if&lt;/code>，可以传递函数指针或函数对象来指定自定义的比较或谓词函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[](&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">});&lt;/span> &lt;span class="c1">// lambda表达式作为函数指针使用
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>信号处理&lt;/strong>：
在Unix和类Unix系统中，&lt;code>signal&lt;/code>函数允许为各种信号注册信号处理函数，这通常通过函数指针完成。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">signalHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Signal received&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 注册信号处理函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SIGINT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signalHandler&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>函数指针的指针&lt;/strong>：
可以创建函数指针的数组或指针，这在实现函数表或多级回调时很有用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">functionTable&lt;/span>&lt;span class="p">[])()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">function1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">function2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">functionTablePtr&lt;/span>&lt;span class="p">)()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">functionTable&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">functionTablePtr&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]();&lt;/span> &lt;span class="c1">// 调用function1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>与C ABI兼容&lt;/strong>：
由于C++兼容C的ABI（应用程序二进制接口），函数指针在C和C++之间可以互用，这在编写跨语言的库或接口时非常有用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>函数指针是C++中实现多态、回调和高阶函数（即接受或返回函数的函数）的关键工具。然而，过度使用函数指针可能会使代码难以理解和维护，因此应谨慎使用，并考虑使用更现代的C++特性，如函数对象、lambda表达式和std::function。&lt;/p>
&lt;h2 id="5指针函数">5.指针函数
&lt;/h2>&lt;p>指针函数是一种返回指针类型的函数。以下是指针函数的一些用法：&lt;/p>
&lt;h3 id="51动态内存分配">5.1.动态内存分配
&lt;/h3>&lt;p>在 C 和 C++中，可以使用指针函数来动态分配内存并返回指向该内存的指针。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">allocateArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>allocateArray&lt;/code>函数接受一个整数参数 &lt;code>size&lt;/code>，用于指定要分配的数组大小。函数内部使用 &lt;code>new&lt;/code>关键字动态分配一个整数数组，并返回指向该数组的指针。使用时可以这样调用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">myArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">allocateArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用 myArray
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">myArray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="52返回复杂数据结构的指针">5.2.返回复杂数据结构的指针
&lt;/h3>&lt;p>当需要从函数中返回一个复杂的数据结构时，可以使用指针函数。例如，假设有一个结构体表示学生信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Student&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Student&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">createStudent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用方式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">student&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createStudent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Tom&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用 student
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">student&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="53作为函数参数传递">5.3.作为函数参数传递
&lt;/h3>&lt;p>指针函数的返回值可以作为其他函数的参数进行传递。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">processArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">generateArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以这样调用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">myArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">generateArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myArray&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用 myArray
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">myArray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>generateArray&lt;/code>函数生成一个整数数组，然后将其作为参数传递给 &lt;code>processArray&lt;/code>函数进行处理。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic 指针和引用</title><link>https://wesigj.github.io/p/c-basic-%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8/</guid><description>&lt;h1 id="c面试基础系列-指针和引用">C++面试基础系列-指针和引用
&lt;/h1>&lt;p>[toc]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;h2 id="1指针和引用含义">1.指针和引用含义
&lt;/h2>&lt;p>在C++中，&amp;ldquo;pointer reference&amp;quot;这个术语可能引起一些混淆，因为&amp;quot;reference&amp;rdquo;（引用）和&amp;quot;pointer&amp;quot;（指针）是两种不同的概念，但它们可以一起使用。以下是对这两种概念的解释和它们如何一起使用的示例：&lt;/p>
&lt;h3 id="11指针pointer">1.1.指针（Pointer）
&lt;/h3>&lt;p>指针是一个变量，它存储了另一个变量的内存地址。指针允许你间接访问内存地址上存储的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pointer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// &amp;#39;pointer&amp;#39;是指向&amp;#39;value&amp;#39;的指针
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="12引用reference">1.2.引用（Reference）
&lt;/h3>&lt;p>引用是一个别名，为一个已存在的变量提供了另一个名字。一旦引用被初始化，它就不能重新绑定到另一个变量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">reference&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// &amp;#39;reference&amp;#39;是&amp;#39;value&amp;#39;的引用
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13指针和引用一起使用">1.3.指针和引用一起使用
&lt;/h3>&lt;p>你可以有一个指针到引用，这通常在函数参数中看到，以便传递一个对对象的引用而不是对象本身，同时还能保持指针的语义。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">increment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ref&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ref&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">increment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 通过指针传递引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>increment&lt;/code> 函数接受一个引用作为参数。在 &lt;code>process&lt;/code> 函数中，我们有一个指向 &lt;code>value&lt;/code> 的指针 &lt;code>ptr&lt;/code>。我们通过 &lt;code>*ptr&lt;/code>（解引用指针以获取它所指向的值）来调用 &lt;code>increment&lt;/code>，这样 &lt;code>increment&lt;/code> 就可以修改 &lt;code>value&lt;/code> 的原始值。&lt;/p>
&lt;h3 id="14指针引用pointer-to-reference">1.4.指针引用（Pointer to Reference）
&lt;/h3>&lt;p>虽然不常见，但你可以有一个指向引用的指针。这通常在复杂的数据结构或模板元编程中看到。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&amp;amp;&lt;/span> &lt;span class="n">refRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ref&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// &amp;#39;refRef&amp;#39;是指向引用的引用，也指向&amp;#39;value&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>refRef&lt;/code> 是一个引用到引用的指针。它首先声明为 &lt;code>ref&lt;/code> 的引用，然后可以被当作一个指向 &lt;code>value&lt;/code> 的指针使用。&lt;/p>
&lt;h3 id="15注意事项">1.5.注意事项
&lt;/h3>&lt;ul>
&lt;li>引用必须在声明时被初始化，并且不能是&lt;code>nullptr&lt;/code>。&lt;/li>
&lt;li>指针可以是&lt;code>nullptr&lt;/code>，表示它不指向任何地址。&lt;/li>
&lt;li>引用的引用（或指向引用的指针）在大多数情况下是不推荐的，因为它可能导致代码难以理解和维护。&lt;/li>
&lt;/ul>
&lt;p>在实际编程中，通常建议使用常规的引用或指针，因为它们已经能够满足大多数需求，而且更易于理解和使用。&lt;/p>
&lt;h2 id="2指针和引用的区别">2.指针和引用的区别
&lt;/h2>&lt;p>指针（Pointer）和引用（Reference）在C++中是两种不同的概念，它们在使用和行为上有着明显的区别：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义方式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>指针是一个变量，它存储了另一个变量的内存地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// p是指向a的指针
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>引用是某个已存在变量的别名。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// r是a的引用
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>初始化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>指针可以在任何时候被初始化或重新指向另一个地址。&lt;/li>
&lt;li>引用必须在声明时立即初始化，且一旦初始化后，就不能再指向另一个变量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可修改性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>指针可以在任何时间指向&lt;code>nullptr&lt;/code>或被重新赋值为其他地址。&lt;/li>
&lt;li>引用不能是&lt;code>nullptr&lt;/code>，且一旦引用绑定到一个对象，就不能被修改为引用其他对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>语法使用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>通过指针访问其指向的值需要使用解引用操作符&lt;code>*&lt;/code>。&lt;/li>
&lt;li>引用使用起来就像使用原始变量一样，没有特别的语法需求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存分配&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>指针可能涉及到动态内存分配（使用&lt;code>new&lt;/code>和&lt;code>delete&lt;/code>）。&lt;/li>
&lt;li>引用不涉及动态内存分配，它们只是现有变量的别名。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>类型转换&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>指针可以进行类型转换，如从&lt;code>void*&lt;/code>转换为具体类型指针。&lt;/li>
&lt;li>引用通常不进行类型转换，它们在声明时类型就固定了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数组和函数参数&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>指针可以用于数组和作为函数参数，以实现更复杂的数据操作。&lt;/li>
&lt;li>引用通常用于函数参数，以提供对实际参数的直接修改能力，避免复制开销。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存占用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>指针变量本身占用内存，它们存储的是另一个变量的地址。&lt;/li>
&lt;li>引用不占用额外内存，它们不存储地址，只是现有变量的一个别名。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>指针可能更容易出错，如野指针、内存泄漏等。&lt;/li>
&lt;li>引用由于其绑定的特性，使用起来更安全，不容易出现错误。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>与&lt;code>const&lt;/code>结合使用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>可以有指向&lt;code>const&lt;/code>的指针（指向常量的指针），这意味着不能通过这个指针修改其指向的值。&lt;/li>
&lt;li>引用可以是&lt;code>const&lt;/code>的，表示不能通过引用修改原始变量的值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>在实际编程中，选择使用指针还是引用通常取决于具体的应用场景和需求。引用通常用于简化代码和提高可读性，而指针则提供了更多的灵活性和控制能力。&lt;/p>
&lt;h2 id="3指针和引用使用方法">3.指针和引用使用方法
&lt;/h2>&lt;p>以下是一个简单的C++代码示例，展示了指针和引用的使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">usePointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Using pointer: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 修改指针指向的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">useReference&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ref&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Using reference: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">ref&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 修改引用绑定的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Original value: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">usePointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Value after pointer function: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Original value: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">useReference&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Value after reference function: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>usePointer&lt;/code> 函数接受一个&lt;code>int*&lt;/code>类型的参数，即指向&lt;code>int&lt;/code>的指针。在函数内部，我们首先检查指针是否不为&lt;code>nullptr&lt;/code>，然后通过解引用操作符&lt;code>*&lt;/code>来访问和修改指针指向的值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>useReference&lt;/code> 函数接受一个&lt;code>int&amp;amp;&lt;/code>类型的参数，即&lt;code>int&lt;/code>的引用。在函数内部，我们直接使用引用来访问和修改它绑定的原始变量的值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在&lt;code>main&lt;/code>函数中，我们声明了一个&lt;code>int&lt;/code>类型的变量&lt;code>value&lt;/code>并初始化为10。然后分别使用指针和引用的方式调用函数，并观察变量值的变化。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这个示例展示了指针和引用在函数参数传递中的使用，以及它们如何影响原始变量的值。请注意，引用在函数内部被当作原始变量的别名来使用，而指针则需要通过解引用来访问其指向的值。&lt;/p>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic 虚函数virtual</title><link>https://wesigj.github.io/p/c-basic-%E8%99%9A%E5%87%BD%E6%95%B0virtual/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-%E8%99%9A%E5%87%BD%E6%95%B0virtual/</guid><description>&lt;h1 id="c面试基础系列-c虚函数virtual">C++面试基础系列-C++虚函数virtual
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;h2 id="1virtual">1.virtual
&lt;/h2>&lt;p>在 C++ 中，&lt;code>virtual&lt;/code> 关键字用于实现多态性，它允许你定义虚函数。虚函数是一种成员函数，它可以在派生类中被重写（override），并且调用哪个函数版本是由对象的实际类型决定的，而不是由指针或引用的静态类型决定的。&lt;/p>
&lt;p>以下是 &lt;code>virtual&lt;/code> 关键字的一些关键点和示例：&lt;/p>
&lt;h3 id="11虚函数">1.1.虚函数
&lt;/h3>&lt;ul>
&lt;li>使用 &lt;code>virtual&lt;/code> 关键字定义的函数可以在派生类中被重写。&lt;/li>
&lt;li>调用虚函数时，将根据对象的实际类型调用相应的函数实现。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">show&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Base show&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 虚析构函数确保派生类的析构函数被调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">show&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 使用 override 关键字明确重写意图
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Derived show&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="12抽象类">1.2.抽象类
&lt;/h3>&lt;ul>
&lt;li>如果类包含至少一个纯虚函数，它就成为了一个抽象类（abstract class），不能被实例化。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">AbstractBase&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">pureVirtualFunction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 纯虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 其他成员函数...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13虚析构函数">1.3.虚析构函数
&lt;/h3>&lt;ul>
&lt;li>定义虚析构函数以确保在删除通过基类指针删除派生类对象时，正确的析构函数被调用。&lt;/li>
&lt;/ul>
&lt;h3 id="14虚继承">1.4.虚继承
&lt;/h3>&lt;ul>
&lt;li>使用 &lt;code>virtual&lt;/code> 关键字进行虚继承可以解决菱形继承问题，避免重复继承同一基类。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base1&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base2&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base2&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="15多态的使用">1.5.多态的使用
&lt;/h3>&lt;ul>
&lt;li>通过基类指针或引用调用虚函数，可以实现多态行为。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Base&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">basePtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">basePtr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">show&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用 Derived 类的 show 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span> &lt;span class="n">basePtr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="16final-关键字">1.6.&lt;code>final&lt;/code> 关键字
&lt;/h3>&lt;ul>
&lt;li>使用 &lt;code>final&lt;/code> 关键字可以阻止进一步的重写。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">FinalClass&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">show&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">final&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;FinalClass show&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>FinalClass&lt;/code> 中的 &lt;code>show&lt;/code> 函数不能在任何派生类中被重写。&lt;/p>
&lt;h3 id="17注意事项">1.7.注意事项
&lt;/h3>&lt;ul>
&lt;li>虚函数提供了运行时多态性，这是 C++ 的核心特性之一。&lt;/li>
&lt;li>虚函数通常用于接口类或基类，以提供可扩展的行为。&lt;/li>
&lt;li>确保正确使用虚析构函数，以避免资源泄漏。&lt;/li>
&lt;li>虚函数和纯虚函数是实现多态和抽象类的基础。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>virtual&lt;/code> 关键字是 C++ 实现面向对象编程的重要工具，它允许更灵活和动态的代码设计。&lt;/p>
&lt;h2 id="2如何使用-c-的虚函数实现多态性">2.如何使用 C++ 的虚函数实现多态性？
&lt;/h2>&lt;p>在 C++ 中，多态性是指允许不同类的对象对同一消息做出响应的能力，但响应的方式取决于发送消息的对象的实际类型。多态性主要通过虚函数实现。以下是使用虚函数实现多态性的步骤和示例：&lt;/p>
&lt;h3 id="21-定义基类和虚函数">2.1. 定义基类和虚函数
&lt;/h3>&lt;p>首先，你需要定义一个基类，并在其中声明至少一个虚函数。虚函数使用 &lt;code>virtual&lt;/code> 关键字声明。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 纯虚函数，强制实现多态性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 虚析构函数，确保派生类的析构函数被调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="22-在派生类中重写虚函数">2.2. 在派生类中重写虚函数
&lt;/h3>&lt;p>然后，在每个派生类中重写基类的虚函数。这允许每个类以自己的方式响应函数调用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Circle&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Drawing a circle.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Square&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Drawing a square.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="23-使用基类指针或引用">2.3. 使用基类指针或引用
&lt;/h3>&lt;p>创建派生类对象的基类指针或引用，通过这些指针或引用调用虚函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Shape&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">shapes&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nf">Circle&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="p">()};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="24-调用虚函数">2.4. 调用虚函数
&lt;/h3>&lt;p>通过基类指针或引用调用虚函数，实际调用的是对象实际类型的函数实现。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">shape&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">shapes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shape&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 根据对象的实际类型调用相应的 draw 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="25-释放资源">2.5. 释放资源
&lt;/h3>&lt;p>如果使用动态分配（&lt;code>new&lt;/code>），不要忘记释放内存。如果基类有一个虚析构函数，那么通过基类指针删除派生类对象时，将正确地调用派生类的析构函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">shape&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">shapes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="26-示例代码">2.6. 示例代码
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 基类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 纯虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 虚析构函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 派生类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Circle&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Drawing a circle.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Square&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Drawing a square.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">shapes&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shapes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shapes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">shape&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">shapes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shape&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 多态性：调用对象实际类型的 draw 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 清理资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">shape&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">shapes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>Shape&lt;/code> 类是一个抽象基类，它声明了一个纯虚函数 &lt;code>draw&lt;/code>。&lt;code>Circle&lt;/code> 和 &lt;code>Square&lt;/code> 类是 &lt;code>Shape&lt;/code> 的具体实现，它们重写了 &lt;code>draw&lt;/code> 函数。通过基类指针数组 &lt;code>shapes&lt;/code> 存储派生类对象的指针，然后在循环中调用 &lt;code>draw&lt;/code> 函数，展示了多态性的行为。每个对象调用其实际类型的 &lt;code>draw&lt;/code> 函数，而不是指针静态类型的函数。&lt;/p>
&lt;h2 id="3在c中虚函数和纯虚函数有什么区别">3.在C++中，虚函数和纯虚函数有什么区别？
&lt;/h2>&lt;p>在 C++ 中，虚函数和纯虚函数都是用来实现多态性的，但它们之间存在一些关键区别：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>定义方式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>虚函数：使用 &lt;code>virtual&lt;/code> 关键字声明，可以有实现，也可以没有（即只有声明）。&lt;/li>
&lt;li>纯虚函数：使用 &lt;code>virtual&lt;/code> 关键字声明，并在函数声明末尾加上 &lt;code>= 0&lt;/code>，必须没有实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实现&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>虚函数：可以在基类中提供默认实现，派生类可以选择重写它。&lt;/li>
&lt;li>纯虚函数：没有实现，派生类必须提供实现，否则派生类也会变成抽象类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>抽象类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>虚函数：基类中可以包含虚函数，但即使包含虚函数的类也不一定是抽象类。&lt;/li>
&lt;li>纯虚函数：如果一个类包含至少一个纯虚函数，这个类就是抽象类，不能被实例化。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多态性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>虚函数：允许在派生类中重写基类的行为，实现多态性。&lt;/li>
&lt;li>纯虚函数：强制派生类提供具体实现，以确保每个派生类都有其特定的行为。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用目的&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>虚函数：用于定义接口，同时提供默认行为，允许派生类根据需要重写。&lt;/li>
&lt;li>纯虚函数：用于定义接口规范，确保派生类遵循接口，强制实现特定的行为。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>析构函数&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>虚函数：虚析构函数用于确保通过基类指针删除派生类对象时，调用正确的析构函数。&lt;/li>
&lt;li>纯虚函数：通常不用于析构函数，但技术上可以声明析构函数为纯虚函数（不推荐）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="示例">示例
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Base implementation&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 虚析构函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Derived implementation&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">AbstractBase&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">pureVirtualFunction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 纯虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// AbstractBase obj; // 错误：不能实例化抽象类
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>Base&lt;/code> 类中的 &lt;code>doSomething&lt;/code> 是一个虚函数，可以在 &lt;code>Derived&lt;/code> 类中被重写。&lt;code>Base&lt;/code> 类的析构函数是一个虚析构函数。&lt;code>AbstractBase&lt;/code> 类包含一个纯虚函数 &lt;code>pureVirtualFunction&lt;/code>，使其成为一个抽象类，不能被直接实例化。&lt;/p>
&lt;p>理解虚函数和纯虚函数的区别对于设计灵活且可扩展的 C++ 程序非常重要。&lt;/p>
&lt;h2 id="4能否给我一个使用虚继承解决菱形继承问题的c代码示例">4.能否给我一个使用虚继承解决菱形继承问题的C++代码示例？
&lt;/h2>&lt;p>当使用传统的多重继承时，可能会出现菱形继承问题，也称为钻石继承。在这种情况下，一个类（C）同时从两个类（A1 和 A2）继承，而这两个类又从同一个基类（B）继承。这会导致基类 B 的成员在类 C 中出现两次，从而产生歧义。&lt;/p>
&lt;p>虚继承可以用来解决这个问题，它确保了基类 B 的成员在派生类 C 中只有一个副本。以下是使用虚继承解决菱形继承问题的 C++ 代码示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 基类 B
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;B&amp;#39;s constructor called.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;B&amp;#39;s destructor called.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">functionB&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Function in B&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 中间类 A1 和 A2，都虚继承自 B
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">A1&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">B&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;A1&amp;#39;s constructor called.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">A1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;A1&amp;#39;s destructor called.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">functionA1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Function in A1&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A2&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">B&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;A2&amp;#39;s constructor called.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">A2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;A2&amp;#39;s destructor called.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">functionA2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Function in A2&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 派生类 C，继承自 A1 和 A2，它们都虚继承自 B
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">A1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">A2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">C&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;C&amp;#39;s constructor called.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;C&amp;#39;s destructor called.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">functionC&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Function in C&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">C&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 创建 C 的对象，只会调用一次 B 的构造函数和析构函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">functionB&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用 B 中的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">functionA1&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用 A1 中的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">functionA2&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用 A2 中的函数;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">functionC&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用 C 中的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中：&lt;/p>
&lt;ul>
&lt;li>类 &lt;code>B&lt;/code> 是一个基类，包含一个成员函数 &lt;code>functionB&lt;/code>。&lt;/li>
&lt;li>类 &lt;code>A1&lt;/code> 和 &lt;code>A2&lt;/code> 都通过虚继承从 &lt;code>B&lt;/code> 继承，这意味着 &lt;code>B&lt;/code> 的成员在 &lt;code>A1&lt;/code> 和 &lt;code>A2&lt;/code> 中只会有一个副本。&lt;/li>
&lt;li>类 &lt;code>C&lt;/code> 同时继承自 &lt;code>A1&lt;/code> 和 &lt;code>A2&lt;/code>。由于 &lt;code>A1&lt;/code> 和 &lt;code>A2&lt;/code> 是通过虚继承从 &lt;code>B&lt;/code> 继承的，&lt;code>C&lt;/code> 中不会出现 &lt;code>B&lt;/code> 的重复成员。&lt;/li>
&lt;li>在 &lt;code>main&lt;/code> 函数中，创建 &lt;code>C&lt;/code> 的对象时，&lt;code>B&lt;/code> 的构造函数和析构函数只会被调用一次，这展示了虚继承解决了菱形继承问题。&lt;/li>
&lt;/ul>
&lt;p>使用虚继承可以避免对象中出现基类成员的多个副本，是处理复杂多重继承关系的有效方法。&lt;/p>
&lt;h2 id="5如果我想在派生类中调用基类的虚函数但是不想让基类成为抽象类我该怎么做">5.如果我想在派生类中调用基类的虚函数，但是不想让基类成为抽象类，我该怎么做？
&lt;/h2>&lt;p>如果你想在派生类中调用基类的虚函数，但又不想让基类成为抽象类，你可以简单地在基类中提供一个虚函数的定义，而不是声明它为纯虚函数。这样，基类就不是抽象类，可以被实例化，同时派生类也可以重写这个虚函数。&lt;/p>
&lt;p>以下是如何做到这一点的示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 基类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 虚函数，不是纯虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">display&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Display in Base&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 提供虚析构函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 派生类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 重写基类的虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">display&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Display in Derived&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Base&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">basePtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 基类指针指向派生类对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">basePtr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用派生类的 display 函数，展示多态性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 在派生类中调用基类的虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">baseRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">basePtr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">baseRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用基类的 display 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">basePtr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Base&lt;/code> 类包含一个虚函数 &lt;code>display()&lt;/code>，它有一个具体的实现。这使得 &lt;code>Base&lt;/code> 类可以被实例化，并且 &lt;code>display()&lt;/code> 函数可以在对象上直接调用。&lt;/li>
&lt;li>&lt;code>Derived&lt;/code> 类继承自 &lt;code>Base&lt;/code> 并重写了 &lt;code>display()&lt;/code> 函数，提供了自己的实现。&lt;/li>
&lt;li>在 &lt;code>main()&lt;/code> 函数中，我们创建了一个 &lt;code>Derived&lt;/code> 类型的指针 &lt;code>basePtr&lt;/code>，它指向 &lt;code>Derived&lt;/code> 的实例，并通过基类指针调用 &lt;code>display()&lt;/code> 函数来展示多态性。&lt;/li>
&lt;li>然后，我们演示了如何在派生类的对象中通过基类引用调用基类的 &lt;code>display()&lt;/code> 函数。&lt;/li>
&lt;/ul>
&lt;p>通过这种方式，你可以保留基类的对象实例化能力，同时在派生类中重写虚函数以展示不同的行为。如果派生类没有重写基类的虚函数，那么通过派生类对象调用该函数将执行基类中的版本。&lt;/p>
&lt;h2 id="6常见面试问题">6.常见面试问题
&lt;/h2>&lt;p>C++ 中的虚函数（&lt;code>virtual&lt;/code>）是实现多态性的关键机制之一。虽然虚函数非常有用，但在使用过程中可能会遇到一些问题。以下是一些常见的问题以及它们的解决方案：&lt;/p>
&lt;h3 id="61-忘记虚析构函数">6.1. 忘记虚析构函数
&lt;/h3>&lt;p>&lt;strong>问题&lt;/strong>：如果基类没有虚析构函数，通过基类指针删除派生类对象时，只调用派生类的析构函数，不会调用基类的析构函数，导致资源泄漏。
&lt;strong>解决方案&lt;/strong>：在基类中声明一个虚析构函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 清理资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="62-覆盖虚函数但未使用-override">6.2. 覆盖虚函数但未使用 &lt;code>override&lt;/code>
&lt;/h3>&lt;p>&lt;strong>问题&lt;/strong>：在派生类中覆盖虚函数时，如果忘记了 &lt;code>override&lt;/code> 关键字，而函数签名与基类中的不完全匹配，编译器可能不会报错，导致潜在的bug。
&lt;strong>解决方案&lt;/strong>：使用 &lt;code>override&lt;/code> 关键字明确你的目的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 如果签名不匹配，编译器会报错
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="63-忘记虚函数的实现">6.3. 忘记虚函数的实现
&lt;/h3>&lt;p>&lt;strong>问题&lt;/strong>：声明了虚函数但没有在基类或派生类中提供实现，导致链接错误。
&lt;strong>解决方案&lt;/strong>：确保虚函数在基类或派生类中有定义。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="64-非虚函数与虚函数的混淆">6.4. 非虚函数与虚函数的混淆
&lt;/h3>&lt;p>&lt;strong>问题&lt;/strong>：在派生类中声明了一个与基类中虚函数同名但签名不同的函数，导致调用时出现混淆。
&lt;strong>解决方案&lt;/strong>：确保派生类中的函数覆盖是有意为之，并且签名完全匹配。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">baz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">baz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 正确覆盖
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="65-私有虚函数">6.5. 私有虚函数
&lt;/h3>&lt;p>&lt;strong>问题&lt;/strong>：在基类中将虚函数声明为私有，派生类无法访问或覆盖它。
&lt;strong>解决方案&lt;/strong>：确保虚函数在基类中是公共（public）或受保护（protected）的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 公共访问权限
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="66-多重继承中的虚函数冲突">6.6. 多重继承中的虚函数冲突
&lt;/h3>&lt;p>&lt;strong>问题&lt;/strong>：在多重继承中，两个基类有相同名称的虚函数，派生类需要明确覆盖哪个基类的函数。
&lt;strong>解决方案&lt;/strong>：使用作用域运算符（&lt;code>::&lt;/code>）来指定要覆盖的基类中的虚函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">Base1&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 覆盖 Base1 中的 func
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">Base2&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 覆盖 Base2 中的 func
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="67-虚函数与模板">6.7. 虚函数与模板
&lt;/h3>&lt;p>&lt;strong>问题&lt;/strong>：在模板类中使用虚函数可能导致编译器错误或警告。
&lt;strong>解决方案&lt;/strong>：确保模板类中的虚函数声明正确，并且在模板实例化时遵循虚函数的规则。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TemplateBase&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">templateFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 纯虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="68-虚函数与友元">6.8. 虚函数与友元
&lt;/h3>&lt;p>&lt;strong>问题&lt;/strong>：虚函数不能声明为友元函数，因为它们需要通过虚表（vtable）进行调用，而友元函数不具备这种机制。
&lt;strong>解决方案&lt;/strong>：避免将友元函数声明为虚函数。&lt;/p>
&lt;p>理解并解决这些问题有助于你更有效地使用虚函数，并避免在 C++ 程序中引入难以发现的错误。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>C++ basic 虚函数vptr_vtable</title><link>https://wesigj.github.io/p/c-basic-%E8%99%9A%E5%87%BD%E6%95%B0vptr_vtable/</link><pubDate>Sat, 07 Sep 2024 15:07:39 +0800</pubDate><guid>https://wesigj.github.io/p/c-basic-%E8%99%9A%E5%87%BD%E6%95%B0vptr_vtable/</guid><description>&lt;h1 id="c面试基础系列-c虚函数vptr_vtable">C++面试基础系列-C++虚函数vptr_vtable
&lt;/h1>&lt;p>[TOC]&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;h2 id="1简单介绍">1.简单介绍
&lt;/h2>&lt;p>在 C++ 中，虚函数的实现细节涉及到虚表指针（&lt;code>vptr&lt;/code>）和虚表（&lt;code>vtable&lt;/code>）。这些是编译器用来实现运行时多态性的机制。以下是关于 &lt;code>vptr&lt;/code> 和 &lt;code>vtable&lt;/code> 的一些关键点：&lt;/p>
&lt;h3 id="11vptr虚表指针">1.1.vptr（虚表指针）
&lt;/h3>&lt;ul>
&lt;li>&lt;code>vptr&lt;/code> 是一个指针，存储在对象的内存布局中，指向该对象的虚表。&lt;/li>
&lt;li>每个包含虚函数的类都有自己的虚表。&lt;/li>
&lt;li>&lt;code>vptr&lt;/code> 的位置和大小可能因编译器而异，但通常位于对象的内存布局的开始处。&lt;/li>
&lt;li>&lt;code>vptr&lt;/code> 的存在是透明的，程序员不需要（也不应该）直接操作它。&lt;/li>
&lt;/ul>
&lt;h3 id="12vtable虚表">1.2.vtable（虚表）
&lt;/h3>&lt;ul>
&lt;li>&lt;code>vtable&lt;/code> 是一个表格，包含了类中所有虚函数的地址。&lt;/li>
&lt;li>每个类都有自己的 &lt;code>vtable&lt;/code>，它包含了该类所有虚函数的指针。&lt;/li>
&lt;li>当你调用一个虚函数时，程序会查找对象的 &lt;code>vptr&lt;/code> 指向的 &lt;code>vtable&lt;/code>，然后在表中查找正确的函数地址来执行。&lt;/li>
&lt;/ul>
&lt;h3 id="13工作原理">1.3.工作原理
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>构造对象&lt;/strong>：当创建一个对象时，编译器会在对象的内存中安排 &lt;code>vptr&lt;/code> 和类的成员变量。&lt;/li>
&lt;li>&lt;strong>调用虚函数&lt;/strong>：当通过对象调用虚函数时，程序会先访问对象的 &lt;code>vptr&lt;/code>，然后查找 &lt;code>vtable&lt;/code> 中对应的函数地址。&lt;/li>
&lt;li>&lt;strong>多态性&lt;/strong>：如果对象是派生类实例，但通过基类指针或引用调用，&lt;code>vtable&lt;/code> 会确保调用正确的函数实现，即使基类指针或引用的静态类型不知道实际对象的动态类型。&lt;/li>
&lt;/ol>
&lt;h3 id="14示例">1.4.示例
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Base::func&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Derived::func&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Base&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">basePtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">basePtr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用 Derived::func，展示了多态性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">basePtr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，&lt;code>Base&lt;/code> 类和 &lt;code>Derived&lt;/code> 类都有自己的 &lt;code>vtable&lt;/code>。&lt;code>Derived&lt;/code> 类的 &lt;code>vtable&lt;/code> 覆盖了 &lt;code>Base&lt;/code> 类的 &lt;code>vtable&lt;/code> 中的 &lt;code>func&lt;/code> 条目。当通过 &lt;code>Base&lt;/code> 类型的指针调用 &lt;code>func&lt;/code> 时，实际调用的是 &lt;code>Derived&lt;/code> 类的 &lt;code>func&lt;/code> 函数。&lt;/p>
&lt;h3 id="15注意事项">1.5.注意事项
&lt;/h3>&lt;ul>
&lt;li>不要直接操作 &lt;code>vptr&lt;/code> 或 &lt;code>vtable&lt;/code>，它们是编译器实现细节。&lt;/li>
&lt;li>虚函数的使用可能会影响程序的性能，因为它们引入了间接调用。&lt;/li>
&lt;li>当类中有虚函数时，复制或移动操作可能需要特别处理，以确保 &lt;code>vptr&lt;/code> 正确设置。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>vptr&lt;/code> 和 &lt;code>vtable&lt;/code> 是 C++ 实现多态性的核心机制，它们使得程序能够在运行时确定调用哪个函数实现。&lt;/p>
&lt;p>在 C++ 中，&lt;code>vptr&lt;/code>（虚表指针）和 &lt;code>vtable&lt;/code>（虚表）是实现多态性机制的底层技术。下面将更详细地介绍它们的工作原理和相关概念：&lt;/p>
&lt;h2 id="2强化认识">2.强化认识
&lt;/h2>&lt;h3 id="21vtable虚表">2.1.vtable（虚表）
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>结构&lt;/strong>：&lt;code>vtable&lt;/code> 是一个或多个函数指针的数组。每个包含虚函数的类都有自己的 &lt;code>vtable&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>布局&lt;/strong>：&lt;code>vtable&lt;/code> 通常按照类中虚函数的声明顺序排列，每个条目对应一个虚函数的地址。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>继承&lt;/strong>：当一个类继承自另一个类时，它的 &lt;code>vtable&lt;/code> 会包含基类 &lt;code>vtable&lt;/code> 的引用以及它自己新增的虚函数的地址。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态绑定&lt;/strong>：&lt;code>vtable&lt;/code> 用于在运行时确定应该调用哪个函数。当调用一个虚函数时，程序会查找对象的 &lt;code>vptr&lt;/code> 指向的 &lt;code>vtable&lt;/code>，然后根据虚函数的声明顺序找到对应的函数地址。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>例子&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">func1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Base func1&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Base func2&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>Base&lt;/code> 类的 &lt;code>vtable&lt;/code> 可能包含两个条目，每个条目指向 &lt;code>func1&lt;/code> 和 &lt;code>func2&lt;/code> 的实现。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22vptr虚表指针">2.2.vptr（虚表指针）
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>存储&lt;/strong>：&lt;code>vptr&lt;/code> 是一个指针，通常存储在对象的内存布局的最前面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>作用&lt;/strong>：&lt;code>vptr&lt;/code> 指向对象的 &lt;code>vtable&lt;/code>，它用于访问类的虚函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>隐藏性&lt;/strong>：&lt;code>vptr&lt;/code> 对程序员是透明的，由编译器自动管理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>继承&lt;/strong>：在多重继承情况下，对象可能包含多个 &lt;code>vptr&lt;/code>，每个 &lt;code>vptr&lt;/code> 对应一个基类的 &lt;code>vtable&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>例子&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Base&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>obj&lt;/code> 的内存布局中会包含一个指向 &lt;code>Base&lt;/code> 类 &lt;code>vtable&lt;/code> 的 &lt;code>vptr&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="23多态性实现">2.3.多态性实现
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>基类指针&lt;/strong>：当使用基类指针指向派生类对象时，通过基类指针调用虚函数，实际调用的是派生类版本的函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>构造和析构&lt;/strong>：在构造派生类对象时，会先构造基类部分，设置 &lt;code>vptr&lt;/code> 指向正确的 &lt;code>vtable&lt;/code>，然后再构造派生类新增的部分。在析构时，顺序相反。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>例子&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Base&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">basePtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">basePtr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">func1&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 调用 Derived::func1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span> &lt;span class="n">basePtr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，通过 &lt;code>Base&lt;/code> 类型的指针 &lt;code>basePtr&lt;/code> 调用 &lt;code>func1&lt;/code>，实际执行的是 &lt;code>Derived&lt;/code> 类重写的 &lt;code>func1&lt;/code> 函数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="24性能考虑">2.4.性能考虑
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>间接调用&lt;/strong>：由于虚函数的调用需要通过 &lt;code>vptr&lt;/code> 和 &lt;code>vtable&lt;/code>，可能会引入一些性能开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优化&lt;/strong>：现代编译器和优化器会使用诸如内联函数、虚函数表优化等技术来减少这些开销。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="25内存布局">2.5.内存布局
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>对象内存&lt;/strong>：对象的内存布局首先包含 &lt;code>vptr&lt;/code>，然后是类的成员变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多重继承&lt;/strong>：在多重继承情况下，对象的内存布局可能包含多个 &lt;code>vptr&lt;/code>，每个对应一个基类的 &lt;code>vtable&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="26注意事项">2.6.注意事项
&lt;/h3>&lt;ul>
&lt;li>虚函数不能是静态的（&lt;code>static&lt;/code>）或常量（&lt;code>const&lt;/code>）成员函数。&lt;/li>
&lt;li>虚函数的声明必须使用 &lt;code>virtual&lt;/code> 关键字，而重写虚函数时可以使用 &lt;code>override&lt;/code> 关键字来提高代码可读性。&lt;/li>
&lt;li>理解 &lt;code>vptr&lt;/code> 和 &lt;code>vtable&lt;/code> 有助于深入学习 C++ 的内存管理和多态性机制。&lt;/li>
&lt;/ul>
&lt;p>通过深入理解 &lt;code>vptr&lt;/code> 和 &lt;code>vtable&lt;/code>，你可以更好地掌握 C++ 的多态性机制，编写出更高效、更安全的面向对象代码。&lt;/p>
&lt;hr>
&lt;h2 id="关于作者">关于作者
&lt;/h2>&lt;ul>
&lt;li>微信公众号:WeSiGJ&lt;/li>
&lt;li>GitHub:&lt;a class="link" href="https://github.com/wesigj/cplusplusboys" target="_blank" rel="noopener"
>https://github.com/wesigj/cplusplusboys&lt;/a>&lt;/li>
&lt;li>CSDN:&lt;a class="link" href="https://blog.csdn.net/wesigj" target="_blank" rel="noopener"
>https://blog.csdn.net/wesigj&lt;/a>&lt;/li>
&lt;li>微博:&lt;/li>
&lt;li>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。&lt;/li>
&lt;/ul>
&lt;img src=https://wesigj.github.io/./img/wechat.jpg width=60% /></description></item><item><title>Archives</title><link>https://wesigj.github.io/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://wesigj.github.io/archives/</guid><description/></item><item><title>Links</title><link>https://wesigj.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wesigj.github.io/links/</guid><description/></item><item><title>Search</title><link>https://wesigj.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wesigj.github.io/search/</guid><description/></item></channel></rss>